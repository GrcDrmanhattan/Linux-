给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。

一对景点（i < j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。

返回一对观光景点能取得的最高分。

 

示例：

输入：[8,1,5,2,6]
输出：11
解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11
 

提示：

2 <= A.length <= 50000
1 <= A[i] <= 1000

————————————————————————————————法一暴力
class Solution 
{
public:
    int maxScoreSightseeingPair(vector<int>& A) //暴力超时O(n^2)能过的数据规模大概在1000左右，
    {
        int res;
        int n=A.size();
        for(int i=0;i<n;++i)
        {
            for(int j=i+1;j<n;++j)
            {
                res=max(res,A[i]+A[j]+i-j);
            }
        }      

        return res;
    }
};

==================================================法二

class Solution
{
public:
    int maxScoreSightseeingPair(vector<int> &A)
    {//把A[i] + A[j] + i - j拆分为A[i]+i和A[j]-j，对A[i]+i遍历边维护
        int res=0;
        int tmp=A[0]+0;//最开始的最大值
        for(int i=1;i<A.size();++i)
        {
            res=max(res,tmp+A[i]-i);
            tmp=max(tmp,A[i]+i);//对A[i]+i遍历边维护
        }
        return res;
    }
};
