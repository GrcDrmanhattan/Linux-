将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定有序数组: [-10,-3,0,5,9],

一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5

==============================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//有序数组相当于中序遍历，所以已知中序遍历求二叉树
//选择中间数字作为二叉搜索树的根节点
class Solution 
{
public:
    TreeNode* dfs(vector<int>& nums,int start ,int end)
    {
        if(start==end) return NULL;
        int mid=(start+end)>>1;
        TreeNode* root=new TreeNode(nums[mid]);
        root->left=dfs(nums,start,mid);
        root->right=dfs(nums,mid+1,end);
        return root;

    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return dfs(nums,0,nums.size());
    }
};


-----------------------------------------------------------------  1224


class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty()) return nullptr;
        int l=0;
        int r=nums.size()-1;
        return help(nums, l, r);
    }

    TreeNode* help(vector<int>& nums, int l,int r)
    {
        if(l>r) return nullptr;
        int mid=l+r>>1;
        auto rt=new TreeNode(nums[mid]);
        rt->left = help(nums, l, mid-1);
        rt->right = help(nums, mid+1, r);

        return rt;
    }
};




