111. 二叉树的最小深度

给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明：叶子节点是指没有子节点的节点。

 

示例 1：


输入：root = [3,9,20,null,null,15,7]
输出：2
示例 2：

输入：root = [2,null,3,null,4,null,5,null,6]
输出：5
 

提示：

树中节点数的范围在 [0, 105] 内
-1000 <= Node.val <= 1000

-----------------------------------------------------------   1224


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

------------------------------------------------------------- 递归   1224

// class Solution {
// public:
//     int minDepth(TreeNode* root) {
//         if(!root) return 0;

//         int ll=minDepth(root->left);
//         int rr=minDepth(root->right);
//         if(!root->left || !root->right) return ll+rr+1;
//         // d当有一个孩子为空时，一定不可以到达叶子结点所以要取不为0的一个

//         return min(ll,rr) +1 ;

//     }
// };



// -----------------------------------------------迭代


class Solution {
public:

    int minDepth(TreeNode* root) {
        queue<TreeNode*> q;
        int depth = 0;
        if(root) q.push(root);
        
        while(q.size()) {
            depth ++;
            int n = q.size();
            for(int i = 0; i < n; i ++) {
                TreeNode* cur = q.front(); q.pop();
                if(!cur->left && !cur->right) return depth;
                
                if(cur->left) q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
        }
        return depth;
    }
};





----------------------------------------- 0125 / 2021 / yxc

对于树的问题，只需要看一部分就可以



// 计算n个节点 ，每个节点常数计算， 时间总计On


class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;

       if(!root->left && !root->right) return 1; // 叶子节点返回高度1 
       if(root->left && root->right) return min(minDepth(root->left), minDepth(root->right)) + 1; // 
       if(root->left) return minDepth(root->left)+1; // 左子树不空，返回左子树高度+1
       else return minDepth(root->right) +1 ;
    }
};



---------------------------- 0210  /2021 


//局部结构 f(u) 可以通过f(a) f(b),所以可以递归求f(root)

一共算n个状态，每个状态常数次计算
空间复杂度和递归的层数有关

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;

        if(!root->left && !root->right) return 1; //当前是叶子节点
        else if(root->left && root->right) return min(minDepth(root->left), minDepth(root->right)) + 1;
        else if(root->left) return minDepth(root->left)+1;
        else return minDepth(root->right)+1;
    }
};



--------------- 1024 / 2021  
递归就是已知了当前左右子树的，然后计算当前返回什么

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        if(!root->left && !root->right) return 1; // 当前叶子结点
        // 当前不是叶子结点
        if(root->left && root->right) return min(minDepth(root->left), minDepth(root->right)) +1;
        else if(root->left) return minDepth(root->left) +1;
        return minDepth(root->right)+1;
    }
};

------------ 1024 

class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        queue<TreeNode*> q;
        int dep=0;

        q.push(root);
        while(q.size()){
            int n=q.size();
            dep++;
            while(n--){
                auto t=q.front();
                q.pop();

                if(!t->left && !t->right) return dep;
                if(t->left) q.push(t->left);
                if(t->right) q.push(t->right);
            }
        }

        return -1;
    }
};

