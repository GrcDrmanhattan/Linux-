112. 路径总和

给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。



##############################

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//把从根到叶子节点满足条件sum，转换为从根的left和right到叶子节点的满足和为sum-root->val


class Solution 
{
public:
    bool hasPathSum(TreeNode* root, int sum) 
    {
        if(root==NULL) return false;
        if(root->left==root->right) return sum==root->val;
        return hasPathSum(root->left,sum-root->val)||hasPathSum(root->right,sum-root->val);
    }
};



-----------------------------------    1224/2020

// 子问题是 看左右子树是否有到叶子结点到路径和是 sum - 当前节点的val


class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if(!root) return false;

        if(!root->left && !root->right) return root->val == sum;// 到达叶子结点判断相减之后的sum是否等于叶子结点的值

        return hasPathSum(root->left, sum-root->val) || hasPathSum(root->right, sum-root->val);
    }
};



