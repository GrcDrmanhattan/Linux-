117. 填充每个节点的下一个右侧节点指针 II

给定一个二叉树

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。

初始状态下，所有 next 指针都被设置为 NULL。

 

进阶：

你只能使用常量级额外空间。
使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。
 

----------------------------------------- 0125 / 2021 / yxc

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/




class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;

        auto cur = root;

        while(cur) // 每次到下一层要新建head和tail节点
        {
            auto head=new Node(-1);
            auto tail=head;

            for(auto p=cur;p;p=p->next)
            {
                if(p->left)
                {
                    tail->next=p->left; // 通过尾节点连接每一层节点
                    tail=tail->next;
                }
                if(p->right)
                {
                    tail->next=p->right;
                    tail=tail->next;
                }
            }

            cur=head->next;// 本层结束，进入下一层
        }

        return root;
    }
};


