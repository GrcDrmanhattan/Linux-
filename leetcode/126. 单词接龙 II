126. 单词接龙 II

按字典 wordList 完成从单词 beginWord 到单词 endWord 转化，一个表示此过程的 转换序列 是形式上像 beginWord -> s1 -> s2 -> ... -> sk 这样的单词序列，并满足：

每对相邻的单词之间仅有单个字母不同。
转换过程中的每个单词 si（1 <= i <= k）必须是字典 wordList 中的单词。注意，beginWord 不必是字典 wordList 中的单词。
sk == endWord
给你两个单词 beginWord 和 endWord ，以及一个字典 wordList 。请你找出并返回所有从 beginWord 到 endWord 的 最短转换序列 ，如果不存在这样的转换序列，返回一个空列表。
每个序列都应该以单词列表 [beginWord, s1, s2, ..., sk] 的形式返回。

 

示例 1：

输入：beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
输出：[["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
解释：存在 2 种最短的转换序列：
"hit" -> "hot" -> "dot" -> "dog" -> "cog"
"hit" -> "hot" -> "lot" -> "log" -> "cog"
示例 2：

输入：beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
输出：[]
解释：endWord "cog" 不在字典 wordList 中，所以不存在符合要求的转换序列。
 

提示：

1 <= beginWord.length <= 7
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord、endWord 和 wordList[i] 由小写英文字母组成
beginWord != endWord
wordList 中的所有单词 互不相同
--------------------------0830  / 2021 yxc 

//n个单词，单词长度l
// 时间nl * 26 * l，
// 图最短路

class Solution {
public:
    vector<string> tmp;
    unordered_map<string ,int> dis;
    unordered_set<string> st;
    string beginWord;
    queue<string> q;
    vector<vector<string>> res;

    vector<vector<string>> findLadders(string _beginWord, string endWord, vector<string>& wordList) {
        for(auto x:wordList) st.insert(x);
        beginWord=_beginWord;

        dis[beginWord]=0; // dis存储到起点的距离
        q.push(beginWord);

        while(q.size()){
            auto t=q.front();
            q.pop();
            string r=t;

            for(int i=0;i<t.size();++i){
                t=r;
                for(char j='a';j<='z';++j){
                    t[i]=j;
                    if(st.count(t) && dis.count(t) ==0 ){
                        dis[t]=dis[r]+1;
                        if(t==endWord) break;
                        q.push(t);
                    }
                }
            }
        }

        if(dis.count(endWord)==0) return res;
        tmp.push_back(endWord); // 从终点开始搜索
        dfs(endWord);
        return res;
    }

    void dfs(string t){
        if(t==beginWord){
            reverse(tmp.begin(), tmp.end());
            res.push_back(tmp);
            reverse(tmp.begin(), tmp.end());
        }
        else{
            string r=t;
            for(int i=0;i<t.size();++i){
                t=r;
                for(auto j='a';j<='z';++j){
                    t[i]=j;
                    if(dis.count(t) && dis[t] + 1 == dis[r]){
                        tmp.push_back(t);
                        dfs(t);
                        tmp.pop_back();
                    }
                }
            }
        }
    }
};


