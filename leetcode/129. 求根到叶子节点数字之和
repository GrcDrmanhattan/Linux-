129. 求根到叶子节点数字之和

给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。

例如，从根到叶子节点路径 1->2->3 代表数字 123。

计算从根到叶子节点生成的所有数字之和。

说明: 叶子节点是指没有子节点的节点。

示例 1:

输入: [1,2,3]
    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.
示例 2:

输入: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
输出: 1026
解释:
从根到叶子节点路径 4->9->5 代表数字 495.
从根到叶子节点路径 4->9->1 代表数字 491.
从根到叶子节点路径 4->0 代表数字 40.
因此，数字总和 = 495 + 491 + 40 = 1026.

----------------------------------------------------- 0125 / 2021 / self


时On

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int res;
    vector<int> tmp;

    int sumNumbers(TreeNode* root) {
        if(!root) return 0;

        dfs(root);
        
        return res;
    }   

    void dfs(TreeNode* rt)
    {
        if(!rt) return ;
        tmp.push_back(rt->val);

        if(!rt->left && !rt->right)
        {
            int sum=0;
            for(auto x:tmp)
            {
                sum=sum*10 + x;
            }
            
            res+=sum;
        }
        else
        {
            dfs(rt->left);
            dfs(rt->right);
        }
        
        tmp.pop_back();  
    }
};



-------------------------------------------------- yxc 


class Solution {
public:
    int res=0;

    int sumNumbers(TreeNode* root) {
        if(root) dfs(root, 0);
        return res;
    }

    void dfs(TreeNode* rt, int sum)
    {
        sum = sum*10 +rt->val;
        if(!rt->left && !rt->right) res += sum;
        if(rt->left) dfs(rt->left, sum);
        if(rt->right) dfs(rt->right, sum);
    }
};


