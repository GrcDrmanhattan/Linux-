135. 分发糖果
老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。

你需要按照以下要求，帮助老师给这些孩子分发糖果：

每个孩子至少分配到 1 个糖果。
评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。
那么这样下来，老师至少需要准备多少颗糖果呢？

 

示例 1：

输入：[1,0,2]
输出：5
解释：你可以分别给这三个孩子分发 2、1、2 颗糖果。
示例 2：

输入：[1,2,2]
输出：4
解释：你可以分别给这三个孩子分发 1、2、1 颗糖果。
     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。
---------------------------------------------  0904  /2021  / yxc 



class Solution {
public:
    vector<int> f;
    vector<int> w;
    int n;
    
    int candy(vector<int>& ratings) {
        n=ratings.size();
        w=ratings;
        f.resize(n, -1);

        int res=0;
        for(int i=0;i<n;++i) res += dp(i);
        return res;    

    }

    int dp(int x){
        if(f[x] != -1 ) return f[x];
        f[x]=1;
        if(x && w[x-1] < w[x]) f[x]=max(f[x], dp(x-1)+1);
        if(x+1 < n && w[x+1] < w[x]) f[x]=max(f[x], dp(x+1)+1);
        return f[x];
    }
};



------------------------- 0905  /2021   
On

从左往右，如果当前的孩子比左边孩子优秀，他的糖果比前面的多1；
3.从右往左，如果当前孩子比右边孩子优秀，他的糖果比右边至少多1.

class Solution {
public:

    int candy(vector<int>& ratings) {
        const int n=ratings.size();
        vector<int> f(n, 1);

        for(int i=1;i<n;++i){
            if(ratings[i] > ratings[i-1]) f[i]=f[i-1]+1;
        }

        for(int i=n-2;i>=0;--i){
            if(ratings[i] > ratings[i+1]) f[i]=max(f[i], f[i+1]+1);
        }

        int sum=0;
        for(auto x:f) sum += x;
        return sum;
        
    }
};


