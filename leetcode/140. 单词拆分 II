140. 单词拆分 II

给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。

说明：

分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]
示例 2：

输入:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
输出:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
解释: 注意你可以重复使用字典中的单词。
示例 3：

输入:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
输出:
[]


-------------------------- 0318 / 2021/  yxc 


class Solution {
public:
    vector<string> res;
    vector<bool> f;
    unordered_set<string> hash;
    int n;

    vector<string> wordBreak(string s, vector<string>& wordDict) {
        n=s.size();
        f.resize(n+1);
        f[n]=true; // f[i] 表示从i到n是否合法

        for(auto x:wordDict) hash.insert(x);

        for(int i=n-1; ~i;--i) // i 从后往前预处理
            for(int j=i;j<n;++j)
            {
                if(hash.count(s.substr(i, j-i+1)) && f[j+1]) f[i]=true;
            }

        dfs(s, 0, "");
        return res;
    }

    void dfs(string& s, int u ,string tmp){
        if(u==n){
            tmp.pop_back();
            res.push_back(tmp);
        }else{
            for(int i=u;i<n;++i)
            {
                if(hash.count(s.substr(u, i-u+1)) && f[i+1])
                    dfs(s, i+1, tmp+s.substr(u, i-u+1) + ' ');
            }

        }
    }
};



