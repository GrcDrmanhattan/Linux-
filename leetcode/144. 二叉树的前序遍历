144. 二叉树的前序遍历

给定一个二叉树，返回它的 前序 遍历。

 示例:

输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [1,2,3]

#######################

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//. Morris法. 空间复杂度o1，时间 On，前序遍历，

// class Solution {
// public:
//     TreeNode* getleftmostright(TreeNode* root)
//     {   //.  寻找root左子树的最右节点
//         auto node=root->left;
//         while(node!= NULL && node->right!=NULL && node->right != root)
//             node=node->right;
//         return node;
//     }

//     vector<int> preorderTraversal(TreeNode* root) {
//         vector<int> res;
//         while(root)
//         {
//             if(!root->left)          //root的左子树为空,说明到了叶子结点，把值存上
//             {
//                 res.push_back(root->val);
//                 root=root->right;  // 顺着右指针到下一个节点
//             }
//             else
//             {
//                 auto node=getleftmostright(root);  // 如果有左子树，就找到左子树的最右节点
//                 if(node->right==root) //如果，当前节点左子树的最右节点的右指针指向自己
//                 {
//                     node->right=NULL;  // 恢复树的形态
//                     root=root->right;   //. 当前节点继续向右
//                 }
//                 else
//                 {
//                     res.push_back(root->val);
//                     node->right=root;  //指向自己
//                     root=root->left;    // 重新找左子树，
//                 }
//             }

//         }

//         return res;
//     }
// };

//0824 非递归 

class Solution
{
public:
    vector<int> preorderTraversal(TreeNode* root)
    {
        vector<int> res;
        if(!root) return {};

        stack<TreeNode*> st;
        st.push(root);

        while(!st.empty())
        {
            auto tmp=st.top();
            res.push_back(tmp->val);
            st.pop();

            if(tmp->right) st.push(tmp->right);//先右子树
        
            if(tmp->left) st.push(tmp->left);//后左子树

        }

        return res;
    }
};


------------------------------ 0117 / 2021 / 

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(!root) return res;

        stack<TreeNode*> st;
        st.push(root);

        while(st.size())
        {
            auto t=st.top();
            st.pop();
            res.push_back(t->val);
            
            if(t->right) st.push(t->right);
            if(t->left) st.push(t->left);
        }

        return res;
    }
};

--------------------------- yxc

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */



class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        stack<TreeNode*> st;
        vector<int> res;

        while(root || st.size())
        {
            while(root) // 当前节点不空
            {
                res.push_back(root->val);
                st.push(root);
                
                root=root->left;
            }

            root=st.top()->right; // 当前节点指向右子树
            st.pop();
        }

        return res;
    }
};


---------------------------------0224 /2021 ..

时间On 空间On ，最坏是链表


class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> s;

        while(s.size() || root)
        {
            while(root)
            {
                res.push_back(root->val);
                s.push(root);
                root=root->left;
            }

            root=s.top()->right;
            s.pop();
        } 

        return res;
    }
};



