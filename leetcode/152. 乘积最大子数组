152. 乘积最大子数组

给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。

 

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。
---------------------------------- 0716  /2021/  yxc 

时间On
空间O1


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        const int n=nums.size();
        int res=nums[0];
        int f=nums[0];
        int g=nums[0];

        for(int i=1;i<n;++i){
            int a=nums[i];
            int fa= f *a;
            int ga=g*a;
            f=max(a, max(fa, ga));
            g=min(a, min(fa, ga));
            res=max(res , f);
        }
        
        return res;
    }
};


------------------- 0719 /2021
 
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        int res=nums[0];
        int f=nums[0]; // f表示以i右边界的最大值
        int g=nums[0]; // g表示最小值

        for(int i=1;i<n;++i){
            int a=nums[i];
            int fa=f*a;
            int ga=g*a;
            f=max(a, max(fa, ga)); // 更新g和f
            g=min(a, min(fa, ga));
            res=max(res, f);
        }

        return res;
    }
};


----------------- 0820  / 2021  

//递推，从i-1递推出i

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int res=nums[0];
        int f=nums[0];//以i为右端点最大值
        int g=nums[0];// 最小值
        const int n=nums.size();

        for(int i=1;i<n;++i){
            int a=nums[i]; // i为右端点， 只有i这一个数
            int fa=f*a;
            int ga=g*a;
            f=max(a, max(fa, ga));//更新fi， 三种情况取max
            g=min(a, min(ga, fa));//三种情况取min
            res=max(res, f);
        }

        return res;

    }
};


