160. 相交链表

编写一个程序，找到两个单链表相交的起始节点。

如下面的两个链表：



在节点 c1 开始相交。

 

示例 1：



输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。
从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。

¥#######################################

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//解法一

// class Solution 
// {
// public:
//     ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
//     {
//        ListNode* a=headA;
//        while(a)
//        {
//            ListNode* b=headB;
//            while(b)
//            {
//                if(a == b)
//                {
//                     return a;
//                } 

//                b=b->next;
//            }
//             a=a->next;  
           
//        }
//         return nullptr;
//     }
// };

//解法2 
// class Solution
// {
// public:
//     ListNode* getIntersectionNode(ListNode* headA,ListNode* headB)
//     {
//         ListNode* a=headA;
//         ListNode* b=headB;

//         while(a!=b)
//         {
//             if(a) a=a->next;
//             else {
//                 a=headB; //如果heada 遍历结束，就循环进入headB
//             }

//             if(b) b=b->next;
//             else
//             {
//                 b=headA;
//             }
//         }

//         return b; // return a，b都可以
//     }
// };

//0822 

class Solution
{
public:
    ListNode* getIntersectionNode(ListNode* headA,ListNode* headB)
    {
        ListNode* a=headA;
        ListNode* b=headB;

        while(a!=b)
        {
            if(a)
            {
                a=a->next;
            }
            else
            {
                a=headB;//如果a为空就进入b
            }

            if(b)
            {
                b=b->next;
            }
            else
            {
                b=headA;//b为空就进入a，有一个为空就进入另一个继续判断
            }
        }

        return b;
    }
};



----------------------------------- 0128 / 2021/  


class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        auto p1=headA;
        auto p2=headB;

        while(p1 != p2)
        {
            if(p1) p1=p1->next;
            else p1=headB;

            if(p2) p2=p2->next;
            else p2=headA;
        }

        return p1;
    }
};


