167. 木棒
乔治拿来一组等长的木棒，将它们随机地砍断，使得每一节木棍的长度都不超过50个长度单位。

然后他又想把这些木棍恢复到为裁截前的状态，但忘记了初始时有多少木棒以及木棒的初始长度。

请你设计一个程序，帮助乔治计算木棒的可能最小长度。

每一节木棍的长度都用大于零的整数表示。

输入格式
输入包含多组数据，每组数据包括两行。

第一行是一个不超过64的整数，表示砍断之后共有多少节木棍。

第二行是截断以后，所得到的各节木棍的长度。

在最后一组数据之后，是一个零。

输出格式
为每组数据，分别输出原始木棒的可能最小长度，每组数据占一行。

数据范围
数据保证每一节木棍的长度均不大于50。
输入样例：
9
5 2 1 5 2 1 5 2 1
4
1 2 3 4
0
输出样例：
6
5

################################################################

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

const int N=70;

int n;
int w[N],sum,length;//sum所有短木棍总共和，length每个木棒的长度
bool st[N];//短棍是否用过

//dfs是看length的长木棒是否可由短棍拼成，看是否满足题意
bool dfs(int u,int s,int start)//当前要拼第几根大棍，当前已经拼好的大棍的长度，从哪个开始
{
    if(u*length==sum) return true;//找到一组解
    if(s==length) return dfs(u+1,0,0);//当前已经拼够了length，dfs下一根
    
    //枚举拼成大棍
    for(int i=start;i<n;++i)
    {
        if(st[i]) continue;
        if(s+w[i]>length) continue;
        
        
        st[i]=true;
        if(dfs(u,s+w[i],i+1)) return true;
        st[i]=false;
        
        //说明要拼的是长的里面的第一个
        if(!s) return false;//小棍是大棍第一个
        
        if(s+w[i]==length) return false;
        
        int j=i;
        while(j<n && w[j]==w[i]) j++;
        i=j-1;
    }
    
    return false;
}


int main()
{
    while(cin>>n,n)
    {
        memset(st,0,sizeof(st));
        sum=0;
        
        for(int i=0;i<n;++i)
        {
            cin>>w[i];
            sum+=w[i];
        }
        
        //优化搜索顺序
        sort(w,w+n);
        reverse(w,w+n);
        
        length=1;//不断枚举长的木棍的长度，看是否满足题目
        while(1)
        {
            if(sum % length==0 && dfs(0,0,0))//如果sum整除length，就dfs，返回true找到结果
            {
                cout<<length<<endl;
                break;
            }
            length++;
        }
    }
    
    return 0;
}

