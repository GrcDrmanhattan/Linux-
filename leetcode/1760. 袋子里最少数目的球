1760. 袋子里最少数目的球
给你一个整数数组 nums ，其中 nums[i] 表示第 i 个袋子里球的数目。同时给你一个整数 maxOperations 。

你可以进行如下操作至多 maxOperations 次：

选择任意一个袋子，并将袋子里的球分到 2 个新的袋子中，每个袋子里都有 正整数 个球。
比方说，一个袋子里有 5 个球，你可以把它们分到两个新袋子里，分别有 1 个和 4 个球，或者分别有 2 个和 3 个球。
你的开销是单个袋子里球数目的 最大值 ，你想要 最小化 开销。

请你返回进行上述操作后的最小开销。

 

示例 1：

输入：nums = [9], maxOperations = 2
输出：3
解释：
- 将装有 9 个球的袋子分成装有 6 个和 3 个球的袋子。[9] -> [6,3] 。
- 将装有 6 个球的袋子分成装有 3 个和 3 个球的袋子。[6,3] -> [3,3,3] 。
装有最多球的袋子里装有 3 个球，所以开销为 3 并返回 3 。
示例 2：

输入：nums = [2,4,8,2], maxOperations = 4
输出：2
解释：
- 将装有 8 个球的袋子分成装有 4 个和 4 个球的袋子。[2,4,8,2] -> [2,4,4,4,2] 。
- 将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,4,4,4,2] -> [2,2,2,4,4,2] 。
- 将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,2,2,4,4,2] -> [2,2,2,2,2,4,2] 。
- 将装有 4 个球的袋子分成装有 2 个和 2 个球的袋子。[2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2] 。
装有最多球的袋子里装有 2 个球，所以开销为 2 并返回 2 。
示例 3：

输入：nums = [7,17], maxOperations = 2
输出：7
 

提示：

1 <= nums.length <= 105
1 <= maxOperations, nums[i] <= 109



----------------------------------- 0215 / 2021 /  yxc


// 已知答案范围lr， 去猜答案 用二分
// 最大值最小考虑 二分

class Solution {
public:
    vector<int> nums;
    int m;

    int minimumSize(vector<int>& _nums, int op) {
        m=op;
        nums=_nums;
        int l=1;
        int r=1e9;
        while(l<r)
        {
            int mid=l+r>>1;
            if(check(mid)) r=mid;
            else l=mid+1;
        }

        return l;
    }

    bool check(int mid){ // 检查对初始的每一个袋里最少操作多少次，使得分成的堆里球的数目小于等于x，mid是球的数目

        int res=0;
        for(auto k:nums)
        {
            res += (k+mid-1)/mid -1;
            if(res > m) return false;
        }

        return true;
    }
};


---------------------------- 

// 最大值最小考虑 二分
// 对所有可能的球的数目的范围进行二分，，假设球的数目x，满足性质：操作m次，最大的数目小于等于x，这样边界就是答案 
// 边界就是答案，最大的数最多就是边界这么多个， 在边界右边的所有的数都满足，左半区间肯定不满足，不够答案的数目，右半区间比答案多可以满足

//时间Onlogn

class Solution {
public:
    vector<int> nums;
    int m;

    int minimumSize(vector<int>& _nums, int op) {
        m=op;
        nums=_nums;
        int l=1;
        int r=1e9; //答案的左右边界

        while(l<r) // 
        {
            int mid=l+r>>1;
            if(check(mid)) r=mid; // mid成立，说明答案可能等于mid或者小于mid
            else l=mid+1;
        }

        return l;
    }

    bool check(int mid){ 
        // 检查对初始的每一个袋里最少操作多少次，使得分成的堆里球的数目小于等于x，mid是球的数目，因为是独立的，所以可以分别考虑每一堆
        // 使得操作的次数最少并且满足数目都小于等于x，所以每次最多拿出越多越好，就最多x个
        //所以要分割[k/x]上取整次，然后减去最后一次， cpp只有下取整

        int res=0;
        for(auto k:nums)
        {
            res += (k+mid-1)/mid -1; // res统计次数
            if(res > m) return false;
        }

        return true; // 有需要的次数小于等于m就返回true
    }
};



