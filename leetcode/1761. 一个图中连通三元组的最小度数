1761. 一个图中连通三元组的最小度数
给你一个无向图，整数 n 表示图中节点的数目，edges 数组表示图中的边，其中 edges[i] = [ui, vi] ，表示 ui 和 vi 之间有一条无向边。

一个 连通三元组 指的是 三个 节点组成的集合且这三个点之间 两两 有边。

连通三元组的度数 是所有满足此条件的边的数目：一个顶点在三元组内，而另一个顶点不在三元组内。

请你返回所有连通三元组中度数的 最小值 ，如果图中没有连通三元组，那么返回 -1 。

 

示例 1：


输入：n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
输出：3
解释：只有一个三元组 [1,2,3] 。构成度数的边在上图中已被加粗。
示例 2：


输入：n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
输出：0
解释：有 3 个三元组：
1) [1,4,3]，度数为 0 。
2) [2,5,6]，度数为 2 。
3) [5,6,7]，度数为 2 。
 

提示：

2 <= n <= 400
edges[i].length == 2
1 <= edges.length <= n * (n-1) / 2
1 <= ui, vi <= n
ui != vi
图中没有重复的边。


-------------------------------------- 0215  / 2021 / yxc
// 三元组的度数等于 三个点的度数相加-6
const int N=1e6+10;
bool st[N]; // 也可以自定义哈希表

class Solution {
public:
    int minTrioDegree(int n, vector<vector<int>>& edges) {
        memset(st, 0 ,sizeof st);
        unordered_set<int > hash;
        vector<int> d(n+1);

        for(auto x:edges)
        {
            int a=x[0];
            int b=x[1];
            if(a>b) swap(a , b);
            d[a]++;
            d[b]++;
            // hash.insert(a * 1000+b);
            st[a*1000+b]=true;
        }

        int res=INT_MAX;
        for(int i=1;i<=n;++i)
            for(int j=i+1;j<=n;++j)
                if(st[i*1000+j])
                {
                    for(int k=j+1;k<=n;++k)
                    {
                        if(st[i*1000+k] && st[j*1000+k]) 
                            res=min(res, d[i]+d[j]+d[k]-6);
                    }
                }

        if(res==INT_MAX) res=-1;
        return res;
    }
};


