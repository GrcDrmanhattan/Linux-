1781. 所有子字符串美丽值之和

一个字符串的 美丽值 定义为：出现频率最高字符与出现频率最低字符的出现次数之差。

比方说，"abaacc" 的美丽值为 3 - 1 = 2 。
给你一个字符串 s ，请你返回它所有子字符串的 美丽值 之和。

 

示例 1：

输入：s = "aabcb"
输出：5
解释：美丽值不为零的字符串包括 ["aab","aabc","aabcb","abcb","bcb"] ，每一个字符串的美丽值都为 1 。
示例 2：

输入：s = "aabcbaa"
输出：17
 

提示：

1 <= s.length <= 500
s 只包含小写英文字母。



----------------------- 0308 / 2021/  yxc


时间 500 * 500 * 26



class Solution {
public:
    int beautySum(string s) {
        int res=0;
        int cnt[26];
        for(int i=0; i< s.size();++i)
        {
            memset(cnt ,0, sizeof cnt);
            for(int j=i;j<s.size(); ++j)
            {
                cnt[s[j] - 'a']++;
                int maxv=-1;
                int minv=1e8;
                for(int u=0; u<26;++u)
                {
                    if(cnt[u] > 0)
                    {
                        minv=min(minv, cnt[u]);
                        maxv=max(maxv, cnt[u]);
                    }
                    
                }
                res += maxv- minv;
            }
            
        }
        return res;
    }
};


-------------------------- 0308 / 2021  /

class Solution {
public:
    int beautySum(string s) {
        int res=0;
        int cnt[26];
        for(int i=0;i<s.size();++i)
        {
            memset(cnt, 0, sizeof cnt);
            for(int j=i; j<s.size();++j) // 两重循环枚举每个区间
            {
                int minv=1e8;
                int maxv=-1;
                cnt[s[j] - 'a']++;
                for(int u=0;u<26;++u) //枚举区间内字母的出现次数的最值
                {
                    if(cnt[u]){
                        minv=min(minv, cnt[u]);
                        maxv=max(maxv, cnt[u]);
                    }
                }

                res += maxv- minv; // 所有区间相加
            }
        }

        return res;
    }
};


