只会两个
————————————————————————————
————————————————————————————第一题
给你一个数组 nums ，数组中有 2n 个元素，按 [x1,x2,...,xn,y1,y2,...,yn] 的格式排列。

请你将数组按 [x1,y1,x2,y2,...,xn,yn] 格式重新排列，返回重排后的数组

输入：nums = [2,5,1,3,4,7], n = 3
输出：[2,3,5,4,1,7] 
解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]


class Solution {
public:
    vector<int> shuffle(vector<int>& nums, int n) 
    {
        vector<int> res;
        if(nums.size()==2) return nums;
        

        for(int i=0;i<n;++i)
        {
            res.push_back(nums[i]);
            res.push_back(nums[i+n]);
        }
        
        return res;
    }
};

————————————————————————————————————————————————————第二题
5429. 数组中的 k 个最强值

设 m 为数组的中位数，只要满足下述两个前提之一，就可以判定 arr[i] 的值比 arr[j] 的值更强：

 |arr[i] - m| > |arr[j] - m|
 |arr[i] - m| == |arr[j] - m|，且 arr[i] > arr[j]
请返回由数组中最强的 k 个值组成的列表。答案可以以 任意顺序 返回。

中位数 是一个有序整数列表中处于中间位置的值。形式上，如果列表的长度为 n ，那么中位数就是该有序列表（下标从 0 开始）中位于 ((n - 1) / 2) 的元素。

例如 arr = [6, -3, 7, 2, 11]，n = 5：数组排序后得到 arr = [-3, 2, 6, 7, 11] ，数组的中间位置为 m = ((5 - 1) / 2) = 2 ，中位数 arr[m] 的值为 6 。
例如 arr = [-7, 22, 17, 3]，n = 4：数组排序后得到 arr = [-7, 3, 17, 22] ，数组的中间位置为 m = ((4 - 1) / 2) = 1 ，中位数 arr[m] 的值为 3 。

输入：arr = [1,2,3,4,5], k = 2
输出：[5,1]
解释：中位数为 3，按从强到弱顺序排序后，数组变为 [5,1,4,2,3]。最强的两个元素是 [5, 1]。[1, 5] 也是正确答案。
注意，尽管 |5 - 3| == |1 - 3| ，但是 5 比 1 更强，因为 5 > 1 。
示例 2：

输入：arr = [1,1,3,5,5], k = 2
输出：[5,5]
解释：中位数为 3, 按从强到弱顺序排序后，数组变为 [5,5,1,1,3]。最强的两个元素是 [5, 5]。
---------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
vector<int> tmp;
vector<int> idx;
inline bool cmp(int a,int b)
{
    if(tmp[a]!= tmp[b]) return tmp[a]>tmp[b]; //重要的是按照tmp顺序！！
    return a>b;
}

class Solution {
public:

    vector<int> getStrongest(vector<int>& arr, int k) 
    {
        tmp.clear();
        idx.clear();
        sort(arr.begin(),arr.end());
        int n=arr.size();
        vector<int> res;
        vector<int> ans;
        int m=((n - 1) / 2);
        int mid=arr[m];
        
        if(k==n) return arr;
        
        // int mm=INT_MIN;
        
        for(int i=0;i<n;++i)
        {
            int tt=abs(arr[i]-mid);
            idx.push_back(i);//原来的顺序
            tmp.push_back(tt);
            
        }

        sort(idx.begin(),idx.end(),cmp); //从大到小排序，先按照tmp里的大小，在按照原来的顺序
        
        for(int i=0;i<k;++i)
        {
            res.push_back(arr[idx[i]]);
        }
        
//         for(int i=0;i<n;++i)
//         {
//             res.push_back(arr[idx[i]]);
//         }
        
//         for(int i=k;i>=0;--k)
//         {
//             ans.push_back(res[i]);
//         }
        
        return res;
    }
};
------------------------------------------------------
