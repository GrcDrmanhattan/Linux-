给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

示例:

输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---


======================================== 层次遍历，取最后一个

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution 
{
public:
    vector<int> rightSideView(TreeNode* root) 
    {
        vector<int> res;
        vector<int> a;
        if(!root) return {};
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            int n=q.size();
            while(n--) // 安照每一层的个数，对每一层里的元素，依次访问，弹出、加入该元素的左右孩子
            {
                TreeNode* tem=q.front();
                q.pop();                
                a.push_back(tem->val);
                if(tem->left) q.push(tem->left);
                if(tem->right) q.push(tem->right);
                
            }
            res.push_back(a[a.size()-1]);    //层次遍历后，结果存入每一层的最后一个值
            a.clear();
        }
       
        return res;
    }
};





--------------------------- 0123 /2021 


class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root) return {};
        vector<int> res;

        queue<TreeNode*> q;
        q.push(root);

        while(q.size())
        {
            int n=q.size();
            vector<int> tmp;
            while(n--)
            {
                auto t=q.front();
                q.pop();
                tmp.push_back(t->val);

                if(t->left) q.push(t->left);
                if(t->right) q.push(t->right);
            }

            res.push_back(tmp.back());
        }

        return res;
    }
};



                                                                                                   
