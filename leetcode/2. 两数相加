给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

=================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
// class Solution 
// {
// public:
//     ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
//     {
//         int jinwei=0;
//         int sum=0;
//         ListNode* head=new ListNode(-1);  //头节点
//         ListNode* node=head;  // 指向头节点
//         while(l1||l2||jinwei)  //只要有一个为真就继续循环，全部为假时才退出循环
//         {
//             sum=jinwei+(l1?l1->val:0)+(l2?l2->val:0);
//             jinwei=sum/10;
//             ListNode* tem=new ListNode(sum%10); //存入新节点的值
//             node->next=tem;   //插入新节点
//             node=node->next;
            
//             if(l1) l1=l1->next;
//             if(l2) l2=l2->next;
//         }

//         return head->next;     
//     }
// };

// class Solution
// {
// public:
//     ListNode* addTwoNumbers(ListNode* l1,ListNode* l2)
//     {
//         int jw=0;
//         int res=0;

//         ListNode* head=new ListNode(-1);
//         ListNode* node=head;

//         while(l1 || l2 || jw)
//         {
//             res=jw+ (l1?l1->val:0) + (l2?l2->val:l2);
//             jw=res/10;

//             int tmp=res%10;
//             ListNode* t=new ListNode(tmp);
//             node->next=t;
//             node=node->next;

//             if(l1) l1=l1->next;
//             if(l2) l2=l2->next;
//         }

//         return head->next;
//     }
// };



class Solution
{
public:
    ListNode* addTwoNumbers(ListNode* l1,ListNode* l2)
    {
        ListNode* head=new ListNode(-1);
        ListNode* tmp=head;

        int jinwei=0;
        int sum=0;

        while(l1 || l2 || jinwei)
        {
            sum=jinwei+(l1 ? l1->val :0) +(l2?l2->val:0);
            jinwei=sum/10;

            ListNode* node=new ListNode(sum%10);
            tmp->next=node;
            tmp=tmp->next;

            if(l1) l1=l1->next;
            if(l2) l2=l2->next;

        }

        return head->next;
    }
};



//0813 


class  Solution
{
public:
    ListNode* addTwoNumbers(ListNode* l1,ListNode* l2)
    {
        ListNode* du=new ListNode(-1);
        ListNode* tmp=du;

        int sum=0;
        int jinwei=0;

        while(l1|| l2 )
        {
            sum=jinwei+(l1?l1->val:0)+(l2?l2->val:0);
            jinwei=sum/10;

            ListNode* node=new ListNode(sum%10);
            tmp->next=node;
            tmp=tmp->next;

            if(l1) l1=l1->next;
            if(l2) l2=l2->next;
        }

        if(jinwei>0) tmp->next=new ListNode(jinwei);//放到最后判断，减少运行时间！

        return du->next;
    }
};






------------------------------------------------- 0126 / 2021/ yxc 


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        auto d=new ListNode(-1);
        auto tail=d;

        int t=0;

        while(l1 || l2 || t)
        {
            if(l1) t+=l1->val, l1=l1->next;
            if(l2) t+=l2->val, l2=l2->next;

            tail->next= new ListNode(t%10);
            tail=tail->next;// 更新尾节点
            t/=10;
        }
        return d->next;
    }
};


