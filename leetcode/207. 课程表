你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]

给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？

 

示例 1:

输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。
示例 2:

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。

###################################################
##################################


// class Solution 
// {
// public:
//     bool canFinish(int numCourses, vector<vector<int>>& prerequisites) 
//     {
//         vector<vector<int>> edges(numCourses,vector<int>(0));
//         vector<int> precnt(numCourses,0);//存储节点的入度

//         for(auto p:prerequisites)
//         {
//             int nxt=p[0];
//             int pre=p[1];
//             precnt[nxt]++;
//             edges[pre].push_back(nxt);//先修课程 ---> 现在课程
//         }

//         for(int i=0;i<numCourses;++i)
//         {
//             if(precnt[i]==0) dfs(i,precnt,edges);//入度为0，dfs将该点的出边的入度-1
//         }

//         for(int i=0;i<numCourses;++i)
//         {
//             if(precnt[i]>0)
//             {
//                 return false;
//             }
//         }

//         return true;

//     }

//     void dfs(int idx,vector<int>& precnt,vector<vector<int>>& edges)
//     {
//         for(int nxt:edges[idx])
//         {
//             precnt[nxt]--;
//             if(precnt[nxt]==0)
//             {
//                 dfs(nxt,precnt,edges);
//             }
//         }

//         precnt[idx]=-1;
//     }
// };



//O(n+m) n是课程数，m先修课程数，空间复杂度O(n+m)


class Solution
{
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites)
    {
        vector<int> rudu(numCourses,0);
        vector<vector<int>>  edges(numCourses,vector<int>(0));

        for(auto p:prerequisites)
        {
            int nxt=p[0];
            int pre=p[1];
            rudu[nxt]++;
            edges[pre].push_back(nxt);
        }

        queue<int> qu;
        for(int i=0;i<numCourses;++i)
        {
            if(rudu[i]==0)
            {
                qu.push(i);
            }
        }

        int cnt=0;
        while(!qu.empty())
        {
            int tmp=qu.front();
            qu.pop();
            cnt++;

            for(int i=0;i<edges[tmp].size();++i)//对每一个入度为0的节点遍历，他的出边
            {
                rudu[edges[tmp][i]]--;//
                if(rudu[edges[tmp][i]]==0)
                {
                    qu.push(edges[tmp][i]);
                }
            }

        }

        return cnt==numCourses;
    }
};

class Solution 
{
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) 
    {
        vector<vector<int>> edges(numCourses);//邻接列表
        vector<int> inedg (numCourses,0);//入度
        for(int i = 0;i < prerequisites.size();i++)
        {
            int u = prerequisites[i][0];//[u,v]，v->u
            int v = prerequisites[i][1];
            inedg[u]++;//入度加1
            edges[v].push_back(u);//添加邻接点
        }
        int res = 0;
        queue<int> myque;
        for(int i = 0;i < inedg.size();i++ )
        {
            if(inedg[i] == 0 )
            {
                myque.push(i);//入度为0的入队
                res++;
            }
        }
        while(!myque.empty())//非空
        {
            int cur = myque.front();myque.pop();
            for(int j = 0;j < edges[cur].size();j++ )//遍历其邻接点
            {
                int u = edges[cur][j];
                inedg[u]--;//入度减一
                if( inedg[u] == 0)
                {
                    myque.push(u);
                    res++;
                }
            }

        }
        return res == numCourses;
    }
};

