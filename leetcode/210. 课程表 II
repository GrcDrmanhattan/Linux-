现在你总共有 n 门课需要选，记为 0 到 n-1。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]

给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。

可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。

示例 1:

输入: 2, [[1,0]] 
输出: [0,1]
解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。
示例 2:

输入: 4, [[1,0],[2,0],[3,1],[3,2]]
输出: [0,1,2,3] or [0,2,1,3]
解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。
     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。

#########################################################3

就是拓扑排序后，输出拓扑序列的点 ，很简单

#########


// class Solution 
// {
// public:
//     vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) 
//     {
//         vector<vector<int>> e(numCourses);
//         vector<int> pre(numCourses,0);
//         for(int i=0;i<numCourses;++i)
//         {
//             vector<int> tmp;
//             e[i]=tmp;
//         }

//         for(auto p:prerequisites)
//         {
//             e[p[1]].push_back(p[0]);
//             pre[p[0]]++;
//         }

//         vector<int> ans;
//         queue<int> que;
//         for(int i=0;i<numCourses;++i)
//         {
//             if(pre[i]==0) que.push(i);
//         }

//         while(!que.empty())
//         {
//             int f=que.front();
//             ans.push_back(f);
//             que.pop();

//             for(int next:e[f])
//             {
//                 pre[next]--;
//                 if(pre[next]==0)
//                 {
//                     que.push(next);
//                 }
//             }
//         }

//         if(ans.size()<numCourses)
//         {
//             vector<int> emt;
//             return emt;
//         }

//         return ans;
//     }
// };


// 0810 算法笔记 写的


class Solution
{
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites)
    {
        vector<int> res;
        vector<int> rudu(numCourses,0);//入度
        vector<vector<int>> edges(numCourses,vector<int>(0));

        for(auto p:prerequisites)
        {
            int u=p[1];
            int v=p[0];//u->v

            rudu[v]++;
            edges[u].push_back(v);
        }

        queue<int> q;

        for(int i=0;i<numCourses;++i)
        {
            if(rudu[i]==0)
            {
                q.push(i);
            }
        }

        while(!q.empty())
        {
            int tmp=q.front();
            res.push_back(tmp);
            q.pop();

            for(int i=0;i<edges[tmp].size();++i)//遍历从tmp出发的所有点
            {
                rudu[edges[tmp][i]]--;
                if(rudu[edges[tmp][i]]==0)
                {
                    q.push(edges[tmp][i]);
                }
            }
        }

        if(res.size()<numCourses)
        {
            return {};
        }

        return res;
    }

};


