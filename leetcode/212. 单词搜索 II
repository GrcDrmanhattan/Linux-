212. 单词搜索 II

给定一个 m x n 二维字符网格 board 和一个单词（字符串）列表 words，找出所有同时在二维网格和字典中出现的单词。

单词必须按照字母顺序，通过 相邻的单元格 内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。

 

示例 1：


输入：board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
输出：["eat","oath"]
示例 2：


输入：board = [["a","b"],["c","d"]], words = ["abcb"]
输出：[]
 

提示：

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] 是一个小写英文字母
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] 由小写英文字母组成
words 中的所有字符串互不相同
---------------------------------- 0901 / 2021  / yxc 



class Solution {
public:
    struct node{
        int id;
        node* son[26];
        node(){
            id=-1;
            for(int i=0;i<26;++i) son[i]=nullptr;
        }

    };
    node* rt;

    void insert(string& s, int id){
        auto p=rt;
        for(auto x:s){
            int u=x-'a';
            if(!p->son[u]) p->son[u]=new node();
            p=p->son[u];
        }

        p->id=id;
    }

    unordered_set<int> ids;
    vector<vector<char>> g;
    int dx[4]={0, 1, 0, -1};
    int dy[4]={1, 0, -1, 0};

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        g=board;

        rt=new node();

        for(int i=0;i<words.size();++i) insert(words[i], i);

        for(int i=0;i<g.size();++i)
            for(int j=0;j<g[0].size();++j){
                int u=g[i][j]-'a';
                if(rt->son[u]){
                    dfs(i, j, rt->son[u]);
                }
            }

        for(auto x:ids) res.push_back(words[x]);
        return res;
    }

    void dfs(int x, int y, node* p){
        if(p->id != -1) ids.insert(p->id);

        char t=g[x][y];
        g[x][y]='.';

        for(int i=0;i<4;++i){
            int a=x+dx[i];
            int b=y+dy[i];
            if(a>=0 && a<g.size() && b>=0 && b<g[0].size() && g[a][b] != '.'){
                int u=g[a][b]-'a';
                if(p->son[u]) dfs(a, b ,p->son[u]);
            }
        }
        g[x][y]=t;
    }
};


