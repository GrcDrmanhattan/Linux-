你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。
同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。


########################    solution ################

class Solution 
{
public:
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        return max(helper(nums,0,n-2),helper(nums,1,n-1)); //分成不抢最后一个和不抢第一个两种情况
    }

    int helper(vector<int>& nums,int s,int e)
    {
        int n=nums.size();
        if(n==0) return 0;
        if(s>e) return nums[0];
        
        int pre=0;
        int cur=0;

        for(int i=s;i<=e;++i)
        {
            int tmp=cur;
            cur=max(pre+nums[i],cur);
            pre=tmp;
        }
        return cur;
    }
};


//分成两个范围，看懂了题解的

class Solution
{
public:
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        if(n==1) return nums[0];
        return max(helper(nums,0,n-2),helper(nums,1,n-1));
    }

    int helper(vector<int>& nums,int start,int end)
    {
        int dpi=0;
        int dpi1=0;
        int dpi2=0;

        for(int i=start;i<=end;++i)
        {
            dpi=max(dpi1,nums[i]+dpi2);
            dpi2=dpi1;
            dpi1=dpi;
        }

        return dpi;
    }
};


----------------------------- 0718  /2021/  

class Solution {
public:
    int rob(vector<int>& nums) {
        const int n=nums.size();
        if(n==0) return 0;
        if(n==1) return nums[0];
        vector<int> f(n+1), g(n+1);//f 选择 ，g不选择
        int res=0;
        // 不选第一个屋子
        for(int i=2;i<=n;++i){
            f[i]=g[i-1] + nums[i-1];
            g[i]=max(f[i-1], g[i-1]);
        }
        res=max(res, max(f[n], g[n]));

        // 选择第一个屋子
        f[1]=nums[0];
        g[1]=INT_MIN; // g1表示不选第一个屋子 不合法

        for(int i=2;i<=n;++i){
            f[i]=g[i-1]+nums[i-1];
            g[i]=max(f[i-1], g[i-1]);
        }

        res=max(res, g[n]);
        return res;
    }
};


