222. 完全二叉树的节点个数
给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。

完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。

 

示例 1：


输入：root = [1,2,3,4,5,6]
输出：6
示例 2：

输入：root = []
输出：0
示例 3：

输入：root = [1]
输出：1
 

提示：

树中节点的数目范围是[0, 5 * 104]
0 <= Node.val <= 5 * 104
题目数据保证输入的树是 完全二叉树
 

进阶：遍历树来统计节点是一种时间复杂度为 O(n) 的简单解决方案。你可以设计一个更快的算法吗？

--------------------------------------------- 0208 / 2021/ yxc


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */



// (logn) ^ 2 时间
// 最多二分logn次，每次判定的时候就会在当前层往左右两边走，直到叶子，也是logn，

class Solution {
public:
    int countNodes(TreeNode* root) {
        if(!root) return 0;
        // 当前层
        auto l=root->left;
        auto r=root->right;
        int x=1;
        int y=1;
        while(l) l=l->left, x++;
        while(r) r=r->right, y++;

        if(x==y) return (1<<x)-1;
        //递归下一层
        return countNodes(root->left) + 1 + countNodes(root->right);
    }
};



