225. 用队列实现栈

使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空
注意:

你只能使用队列的基本操作-- 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。
你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。
你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。

#######################################

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */

//两个队列实现

class MyStack 
{
public:
    /** Initialize your data structure here. */
    queue<int> q1;
    queue<int> q2;

    MyStack() 
    {

    }
    
    /** Push element x onto stack. */
    void push(int x) 
    {
        q1.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() 
    {
        int res=q1.back();
        while(q1.size()>1)
        {
            q2.push(q1.front());
            q1.pop();
        }

        q1.pop();//弹出最后一个

        while(!q2.empty())
        {
            q1.push(q2.front());
            q2.pop();
        }
        return res;
    }
    
    /** Get the top element. */
    int top() 
    {
        int res=q1.back();
        return res;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() 
    {
        return q1.empty() && q2.empty();
    }
};


//一个队列实现

class MyStack
{
public:
    queue<int> q;
    MyStack() 
    {

    }
    void push(int x)
    {
        q.push(x);
    }

    int pop()
    {
        for(int i=0;i<q.size()-1;++i)
        {
            q.push(q.front());
            q.pop();
        }

        int res=q.front();
        q.pop();
        return res;
    }

    int top()
    {
        return q.back();
    }

    bool empty()
    {
        return q.empty();
    }
};
