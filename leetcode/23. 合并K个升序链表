23. 合并K个升序链表
给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。

 

示例 1：

输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1->4->5,
  1->3->4,
  2->6
]
将它们合并到一个有序链表中得到。
1->1->2->3->4->4->5->6
示例 2：

输入：lists = []
输出：[]
示例 3：

输入：lists = [[]]
输出：[]
 

提示：

k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] 按 升序 排列
lists[i].length 的总和不超过 10^4

----------------------------------- 0202 /2021/  yxc


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


// 所有STL容器和库函数默认使用的是小于号，如果加上greater<>参数，那么会默认使用大于号。
// 在上面的代码中优先队列会默认用一对小括号表示小于号，并且默认会构造一个大根堆，所以我们把小括号里的关系变一下，最后就可以得到小根堆了。

//时间Onlogk

// 小根堆里最多是k个元素，因为要维护每个链表的最小值
// 从堆中取出元素，维护堆 logk
// 然后将下一个最小插入堆，维护堆，时间logk
// 因为最多有n个元素，所以时间是O2nlogk。 也就是Onlogk

class Solution {
public:
    struct cmp{
        bool operator()(ListNode* a, ListNode* b){
            return a->val>b->val; // 让值小的元素优先级高
        }
    };
    

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        auto d=new ListNode(-1);
        auto cur=d;
        priority_queue<ListNode*, vector<ListNode*> ,cmp>  q;

        for(auto l:lists) if(l) q.push(l);

        while(q.size())
        {
            auto t=q.top();
            q.pop();

            cur->next=t;
            cur=cur->next;

            if(t->next) q.push(t->next);
        }

        return d->next;
    }
};



------------------------------ 0205 / 2021 / 


class Solution {
public:
    struct cmp{
        bool operator()(ListNode* a, ListNode* b)
        {
            return a->val > b->val; // 如果b的值小于a，则a（）b 成立，也就是b的优先级高于a，也就是值越小的优先级越高越在堆顶
        }
    };

  
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode* ,vector<ListNode*> , cmp> q;

        for(auto x:lists) if(x) q.push(x);

        auto d=new ListNode(-1);
        auto c=d;

        while(q.size())
        {
            auto t=q.top();
            q.pop();

            c=c->next=new ListNode(t->val);

            if(t->next) q.push(t->next);

        }

        return d->next;
    }
};

---------------------------- 0223 / 2021 / 


class Solution {
public:
    struct cmp{
        bool operator()(ListNode* a, ListNode*b){
            return a->val > b->val;
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return nullptr;

        auto d=new ListNode(-1);
        auto c=d;

        priority_queue<ListNode* ,vector<ListNode*>, cmp> q;
        for(auto x:lists) if(x) q.push(x);

        while(q.size())
        {
            auto t=q.top();
            q.pop();
            c=c->next = t;

            if(t->next) q.push(t->next);
        }

        return d->next;
    }
};



------------------------- 0302/ 2021/  


class Solution {
public:
    struct cmp{
        bool operator()(ListNode* a, ListNode* b)
        {
            return a->val > b->val;
        }

    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        auto d=new ListNode(-1);
        auto c=d;

        priority_queue<ListNode*, vector<ListNode*> , cmp> q;
        for(auto x:lists) if(x) q.push(x);

        while(q.size())
        {
            auto t=q.top();
            q.pop();

            c=c->next=t;
            if(t->next) q.push(t->next);
        }

        return d->next;
    }
};

