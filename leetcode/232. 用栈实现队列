232. 用栈实现队列

使用栈实现队列的下列操作：

push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。
 

示例:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // 返回 1
queue.pop();   // 返回 1
queue.empty(); // 返回 false

####################################

class MyQueue {
public:
    /** Initialize your data structure here. */
    stack<int> st;
    stack<int> st1;
    MyQueue() 
    {

    }
    
    /** Push element x to the back of queue. */
    void push(int x) 
    {
        st.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() 
    {
        while(!st.empty())
        {
            st1.push(st.top());
            st.pop();
        }
        int res=st1.top();
        st1.pop();
        
        while(!st1.empty())
        {
            st.push(st1.top());
            st1.pop();
        }

        return res;
    }
    
    /** Get the front element. */
    int peek() 
    {
        while(!st.empty())
        {
            st1.push(st.top());
            st.pop();
        }
        int res=st1.top();
        
        while(!st1.empty())
        {
            st.push(st1.top());
            st1.pop();
        }

        return res;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() 
    {
        return st.empty()&& st1.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */


----------------------- 0328 / 2021/  


class MyQueue {
public:
    /** Initialize your data structure here. */
    stack<int> s1, s2;
    MyQueue() {

    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int res;
        while(s1.size())
        {
            s2.push(s1.top());
            s1.pop();
        }

        res=s2.top();
        s2.pop();
        while(s2.size()){
            s1.push(s2.top());
            s2.pop();
        }

        return res;
    }
    
    /** Get the front element. */
    int peek() {
        int res;
        while(s1.size())
        {
            s2.push(s1.top());
            s1.pop();
        }

        res=s2.top();
        // s2.pop();
        while(s2.size()){
            s1.push(s2.top());
            s2.pop();
        }

        return res;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s1.empty();
    }
};


