234. 回文链表
请判断一个链表是否为回文链表。

示例 1:

输入: 1->2
输出: false
示例 2:

输入: 1->2->2->1
输出: true

-----------   1228/ 2020 /



时间复杂度：O(n)，其中 n 指的是链表的元素个数。
第一步： 遍历链表并将值复制到数组中，O(n)。
第二步：双指针判断是否为回文，执行了 O(n/2) 次的判断，即 O(n)。
总的时间复杂度：O(2n) = O(n)。

空间复杂度：O(n)，其中 n 指的是链表的元素个数，我们使用了一个数组列表存放链表的元素值。




/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 


class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head) return true;

        vector<int> t;
        int n=0;
        for(auto p=head;p;p=p->next) {
            t.push_back(p->val);
            n++;
        }

        int l=0;
        int r=n-1;
        while(l<r)
        {
            if(t[l] != t[r]) return false;
            l++;
            r--;
        }
        return true;
    }
};



-------------------   yxc 先反转后面一半链表，  0210 /2021/  


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int n=0;
        for(auto p=head;p;p=p->next) n++;
        if(n<=1) return true;
        auto a=head;
        for(int i=0;i<n-n/2;++i) a=a->next;
        auto b=a->next;

        for(int i=0;i<n/2 -1;++i)
        {
            auto c=b->next;
            b->next=a;
            a=b;b=c;
        }

        auto p=head;
        auto q=a;
        bool f=true;
        for(int i=0;i<n/2;++i)
        {
            if(p->val != q->val) 
            {
                f=false;
                break;

            }
            p=p->next;
            q=q->next;
        }

        auto tail=a;
        b=a->next;
        for(int i=0;i<n/2-1;++i)
        {
            auto c=b->next;
            b->next=a;
            a=b;b=c;
        }

        tail->next=nullptr;
        return f;
    }
};




----------------- 0720 / 2021 

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int n=0;
        for(auto p=head;p;p=p->next) n++;
        if(n<=1) return true;

        auto a=head;
        for(int i=0;i<n-n/2;++i) a=a->next;
        auto b=a->next;

        for(int i=0;i<n/2-1;++i){
            auto c=b->next;
            b->next=a;
            a=b;b=c;
        }

        auto p=head;
        auto q=a;
        bool res=true;
        for(int i=0;i<n/2;++i){
            if(p->val != q->val){
                res=false;
                break;
            }

            p=p->next;
            q=q->next;
        }

        auto tail=a;
        b=a->next;
        for(int i=0;i<n/2-1;++i){
            auto c=b->next;
            b->next=a;
            a=b;b=c;
        }

        tail->next=nullptr;
        return res;
    }
};



