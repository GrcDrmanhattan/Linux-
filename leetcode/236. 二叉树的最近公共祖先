输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。

=============================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution 
{
public:
    // pq要么在一边，要么在两边，；如果在一边就递归；两边就返回根
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        if(!root || root==p || root==q) return root;  //终止条件：如果当前节点(root代表当前)为空或等于p或q，则返回当前节点
        //否则对左右子树进行查找, 根据左右子树的返回值判断:
        TreeNode* l=lowestCommonAncestor(root->left,p,q); // ，递归遍历左子树,看左子树是否有pq
        TreeNode* r=lowestCommonAncestor(root->right,p,q);   // 递归右子树，看右子树是否有pq
        if(l && r) return root; // 递归遍历左右子树，如果左右子树查到节点都不为空，则表明p和q分别在左右子树中，因此，当前节点即为最近公共祖先；
        if(!l) return r;
        else if(!r) return l;
        else return root;

        // return l ? l : r;  // 如果左右子树其中一个不为空，则返回非空节点
    }
};

===========================================================


情况 1，如果 p 和 q 都在以 root 为根的树中，那么 left 和 right 一定分别是 p 和 q（从 base case 看出来的）。
情况 2，如果 p 和 q 都不在以 root 为根的树中，直接返回 null。
情况 3，如果 p 和 q 只有一个存在于 root 为根的树中，函数返回该节点。


TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    // base case
    if (root == null) return null;
    if (root == p || root == q) return root;

    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);
    // 情况 1
    if (left != null && right != null) {
        return root;
    }
    // 情况 2
    if (left == null && right == null) {
        return null;
    }
    // 情况 3
    return left == null ? right : left;
}



