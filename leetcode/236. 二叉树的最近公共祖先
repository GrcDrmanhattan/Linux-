给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

 

示例 1：


输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出：3
解释：节点 5 和节点 1 的最近公共祖先是节点 3 。
示例 2：


输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出：5
解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。
示例 3：

输入：root = [1,2], p = 1, q = 2
输出：1
 

提示：

树中节点数目在范围 [2, 105] 内。
-109 <= Node.val <= 109
所有 Node.val 互不相同 。
p != q
p 和 q 均存在于给定的二叉树中。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
、

=============================

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution 
{
public:
    // pq要么在一边，要么在两边，；如果在一边就递归；两边就返回根
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
    {
        if(!root || root==p || root==q) return root;  //终止条件：如果当前节点(root代表当前)为空或等于p或q，则返回当前节点
        //否则对左右子树进行查找, 根据左右子树的返回值判断:
        TreeNode* l=lowestCommonAncestor(root->left,p,q); // ，递归遍历左子树,看左子树是否有pq
        TreeNode* r=lowestCommonAncestor(root->right,p,q);   // 递归右子树，看右子树是否有pq
        if(l && r) return root; // 递归遍历左右子树，如果左右子树查到节点都不为空，则表明p和q分别在左右子树中，因此，当前节点即为最近公共祖先；
        if(!l) return r;
        else if(!r) return l;
        else return root;

        // return l ? l : r;  // 如果左右子树其中一个不为空，则返回非空节点
    }
};

===========================================================


情况 1，如果 p 和 q 都在以 root 为根的树中，那么 left 和 right 一定分别是 p 和 q（从 base case 看出来的）。
情况 2，如果 p 和 q 都不在以 root 为根的树中，直接返回 null。
情况 3，如果 p 和 q 只有一个存在于 root 为根的树中，函数返回该节点。


TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    // base case
    if (root == null) return null;
    if (root == p || root == q) return root;

    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);
    // 情况 1
    if (left != null && right != null) {
        return root;
    }
    // 情况 2
    if (left == null && right == null) {
        return null;
    }
    // 情况 3
    return left == null ? right : left;
}




-------------------------- 0721/  2021 

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        if(root==p || root==q) return root;

        auto ll=lowestCommonAncestor(root->left, p, q);
        auto rr=lowestCommonAncestor(root->right, p ,q);

        if(!ll && !rr) return NULL;
        if(ll && rr) return root;
        if(ll) return ll;
        else return rr;
    }
};


------------------------- 0812  /2021 


// p和q的最近公共祖先要么在root的左子树，要么在root的右子树
//On

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;
        if(root == p || root == q) return root;

        auto ll=lowestCommonAncestor(root->left, p, q); // 在左子树找答案
        auto rr=lowestCommonAncestor(root->right, p, q);
        if(ll==NULL) return rr; // 答案肯定在右子树，如果ll为空
        if(rr==NULL) return ll;
        return root;  //在左右子树都没有找到，则根结点是答案
    }
};


------------- 1028  / 2021  

// 函数递归的其实是找pq结点，因为边界情况就是返回p或者q

// 如果第一次当前某个子树找到了p和q，就说明当前结点是答案
// 如果在当前结点的左子树中找到了pq，右子树没有，答案就是左子树dfs的结果

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root || root->val == p->val || root->val == q->val) return root;
        auto ll=lowestCommonAncestor(root->left,p, q);
        auto rr=lowestCommonAncestor(root->right, p, q);
        if(!ll)  return rr;
        if(!rr) return ll;
        return root;
    }
};


