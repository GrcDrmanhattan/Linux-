238. 除自身以外数组的乘积

给你一个长度为 n 的整数数组 nums，其中 n > 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。

 

示例:

输入: [1,2,3,4]
输出: [24,12,8,6]
 

提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。

说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。

进阶：
你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）


----------------------- 0608 / 2021/  yxc


// 前后缀分解 
// 经典应用

// 预处理一个前缀和数组p，一个变量s表示后缀和
// 前缀和 pi = a1 * a2 * .. ai-1 
// 后缀和 si = an * an-1 *... ai
// resi = pi * si

// 空间On， 时间On


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> p(n, 1);
        for(int i=1;i<n;++i) p[i] = p[i-1] * nums[i-1];// 当前的前缀和=前一个前缀和*当前的数
        
        int s=1;
        for(int i=n-1;i>=0;--i){
            p[i] *= s; // 答案等于前缀和 * 后缀和
            s*=nums[i];//更新后缀和
        }
        return p;
    }
};


------------------------------  0721c/ 2021 

前缀就是不包含当前的数


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> pre(n, 1);
        for(int i=1;i<n;++i) pre[i]=pre[i-1]*nums[i-1]; // p[i-1] * 前一个数

        int s=1;
        for(int i=n-1;i>=0;--i){
            pre[i] *= s;
            s *= nums[i];
        }
        return pre;
    }
};

// 1 2 3 4 
// 1 1 2 6
// 24  12  4  1
//24 12 8 6


---------------- 0812  /2021 

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        const int n=nums.size();
        vector<int> res;
        vector<int> pre(n, 1);
        for(int i=1;i<n;++i) pre[i] = pre[i-1] * nums[i-1];

        int s=1;
        for(int i=n-1;i>=0;--i)
        {
            pre[i] *= s;
            s*=nums[i];
        }

        return pre;
    }
};


-------------------- 0812  /2021 

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> res;
        const int n=nums.size();
        vector<int> pre(n, 1);
        for(int i=1;i<n;++i) pre[i] = pre[i-1] * nums[i-1];
        int s=1;
        for(int i=n-1;i>=0;--i){
            pre[i] *= s;//相当于最开始n-1的对应的后缀和是1，
            s*=nums[i];
        }
        return pre;
    }
};


