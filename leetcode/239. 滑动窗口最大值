239. 滑动窗口最大值

给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

 

进阶：

你能在线性时间复杂度内解决此题吗？

 

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

………………………………………………………………………………………………………………………………………………………………

// const int N=1e6+10;

// int q[N];

// class Solution 
// {
// public:
//     vector<int> maxSlidingWindow(vector<int>& nums, int k) 
//     {
//         vector<int> res;
//         int n=nums.size();
//         if(k==1) return nums;
//         int hh=0;
//         int tt=-1;

//         for(int i=0;i<n;++i)
//         {
//             if(hh<=tt && i-k+1>nums[hh]) ++hh;

//             while(hh<=tt && nums[q[tt]]<=nums[i]) tt--;

//             q[++tt]=i;
//             if(i>=k-1) res.push_back(nums[q[hh]]);
//         }

//         return res;
//     }
// };


// 0904 yxc

class Solution
{
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k)
    {
        vector<int> res;
        deque<int> q;
        int n=nums.size();

        for(int i=0;i<n;++i)
        {
            while(q.size() && i-q.front()+1>k) q.pop_front();//或者i-q.front()>=k
            while(q.size() && nums[q.back()]<=nums[i]) q.pop_back();//把小的队尾的删除，维持递减队列

            q.push_back(i);
            if(i+1>=k) res.push_back(nums[q.front()]);
        }

        return  res;
    }
};


----------------- 0722 / 2021 

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> q;
        int n=nums.size();

        for(int i=0;i<n;++i){
            while(q.size() && i- q.front()+1 > k) q.pop_front();
            while(q.size() && nums[q.back()] <= nums[i]) q.pop_back();
            q.push_back(i);

            if(i>= k-1) res.push_back(nums[q.front()]);
        }

        return res;
    }
};

