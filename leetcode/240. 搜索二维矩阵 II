编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：

每行的元素从左到右升序排列。
每列的元素从上到下升序排列。
示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。

======================================  双指针经典，缩小空间

class Solution 
{
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        if (matrix.size() == 0 || matrix[0].size() == 0) 
        {
            return false;
        }
        int m=matrix.size();
        int n=matrix[0].size();

        int i=0;
        int j=n-1;//右上角开始

        while(i<m && j>=0)
        {
            if(matrix[i][j]==target) return true;
            else if(matrix[i][j]<target)//右上角小于目标，进入下一行搜索
            {
                ++i;
            }
            else//大于目标，左移一列搜索
            {
                --j;
            }
        }
        //越界返回false
        return false;
    }
};


-------------------------------------- 0722 / 2021 

shijain 
O(n+m)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();

        int l=0;
        int r=m-1;
        while(l<n && r>=0){
            if(matrix[l][r] == target) return true;
            else if(matrix[l][r] > target) r--;
            else l++;
        }
        return false;
    }
};


------------------ 0811 / /2021 


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        const int n=matrix.size();
        const int m=matrix[0].size();

        int l=0;
        int r=m-1;
        while(l<n && r>=0){
            if(matrix[l][r]==target) return true;
            else if(matrix[l][r] < target) l++;
            else r--;
        }

        return false;
    }
};


