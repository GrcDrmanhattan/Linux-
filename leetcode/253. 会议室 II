253. 会议室 II
给你一个会议时间安排的数组 intervals ，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi] ，
为避免会议冲突，同时要考虑充分利用会议室资源，请你计算至少需要多少间会议室，才能满足这些会议安排。

 

示例 1：

输入：intervals = [[0,30],[5,10],[15,20]]
输出：2
示例 2：

输入：intervals = [[7,10],[2,4]]
输出：1
 

提示：

1 <= intervals.length <= 104
0 <= starti < endi <= 106
----------------- 0831/  2021  


开会也可以理解成坐公交，都是占用某个资源。
就拿题目给的第一组数组来分析。


intervals = [[0,30],[5,10],[15,20]]
第一个人从0上车，从30下车；
第二个人从5上车，10下车。。。

我们的问题转化为最多车上有几个人（也就是最多有多少会议室）。

显然：上车，车上人数+1；下车，车上人数-1
我们把intervals拆解一下


上车：[0, 1], [5, 1], [15, 1]

下车：[10, -1], [20, -1], [30, -1]
然后按照第一个数把上下车排好序


人数 1    2     1     2     1      0
     0----5----10----15----20-----30
变化 +1   +1    -1    +1    -1    -1
最多车上两个人。



 // nlogn

class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        if(intervals.empty()) return 0;
        vector<pair<int, int>> p;
        for(int i=0;i<intervals.size();++i){
            p.push_back({intervals[i][0], 1}); // 上车
            p.push_back({intervals[i][1], -1}); // 下车
        }

        sort(p.begin(), p.end());

        int res=0;
        int cnt=0;
        for(int i=0;i<p.size();++i){
            cnt += p[i].second;
            res=max(res, cnt);
        }
        return res;
    }
};



