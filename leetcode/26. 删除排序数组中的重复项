给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

 

示例 1:

给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。
示例 2:

给定 nums = [0,0,1,1,1,2,2,3,3,4],

函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

你不需要考虑数组中超出新长度后面的元素。

===========================================================


class Solution 
{
public:
    int removeDuplicates(vector<int>& nums) 
    {
       if(nums.size()<2) return nums.size();

       int j=0;//j指向第一个
       for(int i=1;i<nums.size();++i)//i从第二个一次遍历
       {
           //如果相等增加i，跳过重复
           //如果不等，j后移为新的元素加位置，然后赋值
           if(nums[i]!=nums[j]) nums[++j]=nums[i];//也可以写j++;nums[j]=nums[i];
       }         
       return j+1;
    }
};



------------------  1225 /2020 / 双指针分别移动，但不是维护区间

每个指针最多 遍历一次，时间复杂度O2n，也就是On的复杂度

i指针遍历每个数。
j指针指向新的位置


class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int j=0;
        
        for(int i=0;i<nums.size();++i)
        {
            if(!i || nums[i] != nums[i-1]) // 如果是第一个 或者 和前面的数字不相等
            {
                nums[j]=nums[i];
                j++; 
            }
               
        }

        return j;
    }
};





       
