给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :

输入: [1,2,1,3,2,5]
输出: [3,5]

#########################################

//放眼到二进制，我们要找的这两个数字是不同的，所以它俩至少有一位是不同的，二进制要么是0，要么是1
// 所以我们可以根据这一位，把数组分成这一位都是 1 的一类和这一位都是 0 的一类，这样就把这两个数分到两组里了
//怎么寻找那一位不同呢，最后异或的结果中为1那一位，就代表两个数在这个位置不同，不同才取1


// 计算机中 数字都是以补码形式存在，正数补码等于自己，负数的补码等于反码+1

class Solution 
{
public:
    vector<int> singleNumber(vector<int>& nums) 
    {
        vector<int> res{0,0};
       
        int tmp=0;
        for(int i=0;i<nums.size();++i)
        {
            tmp^=nums[i];
        }

        //构造一个数mask，只有一个1，1的位置是tmp中出现1的最低的位置

        int mask=1;//0001

        //从最后一位开始，当该位不同时，进入循环，相同时，找到了1的位置
        while((tmp & mask)==0)//按位去寻找，当两个数在某一位不同时，mask左移一位
        {
            mask<<=1;
        }

        // tmp &= (-tmp);//一个数 与上 这个数的负数也就是这个数二进制的取反加一 ，结果就是只有一个1，位置是最低位的
        //等价于 tmp &= (~tmp +1) 
        
        for(int i=0;i<nums.size();++i)
        {
            if(nums[i] & mask)
            {
                res[0]^=nums[i];
            }
            else
            {
                res[1]^=nums[i];
            }
        }
      
        return res;
    }
};


// class Solution 
// {
// public:
//     vector<int> singleNumber(vector<int>& nums) 
//     {
//         unordered_map<int,int> hash;
//         vector<int> ans;
//         for(int i = 0;i<nums.size();i++)
//         {
//             hash[nums[i]]++;
//         }
//         for(int i = 0;i<nums.size();i++)
//         {
//             if(hash[nums[i]]==1)
//             {
//                 ans.push_back(nums[i]);
//             }
//         }
//         return ans;
//     }
// };

