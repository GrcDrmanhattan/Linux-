273. 整数转换英文表示
将非负整数 num 转换为其对应的英文表示。

 

示例 1：

输入：num = 123
输出："One Hundred Twenty Three"
示例 2：

输入：num = 12345
输出："Twelve Thousand Three Hundred Forty Five"
示例 3：

输入：num = 1234567
输出："One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"
示例 4：

输入：num = 1234567891
输出："One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One"
 

提示：

0 <= num <= 231 - 1
------------------------ 0901  /2021  / 

class Solution {
public:
    string low[10]={
        "","One","Two","Three","Four","Five","Six","Seven","Eight","Nine",
    };

    string mid[10]={
        "Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen",
        "Seventeen","Eighteen","Nineteen",
    };

    string high[10]={
        "","","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety",
    };

    string numberToWords(int num) {
        string res;
        if(num == 0) return "Zero";

        int part4=num % 1000; //最低三位
        num/=1000;
        int part3 = num % 1000; // 
        num/=1000;
        int part2 = num % 1000;
        num/=1000;
        int part1 = num; // 最高

        if(part1 != 0) res=get(part1) + "Billion ";
        if(part2 != 0) res= res + get(part2) + "Million ";
        if(part3 != 0) res= res + get(part3) + "Thousand ";
        if(part4 != 0) res= res + get(part4);

        // res.pop_back();
        trim(res);
        return res;
    }

    void trim(string &s) 
    {
        if (s.empty()) 
        {
            return ;
        }
        s.erase(0,s.find_first_not_of(" "));
        s.erase(s.find_last_not_of(" ") + 1);
    }

    string get(int u){ // 获取三位数的表示 567
        int ll=u%10;
        u/=10;
        int mm=u%10;
        u/=10;
        int hh=u;
        string res="";

        if(hh != 0) res = low[hh] + " Hundred ";
        if(mm==1) res = res + mid[ll];
        else if(mm==0) res = res + low[ll];
        else res = res + high[mm] + " "+low[ll]; 

        trim(res);
        res = res + " ";
        return res ;
    }
};


