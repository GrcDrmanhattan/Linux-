287. 寻找重复数
给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。

示例 1:

输入: [1,3,4,2,2]
输出: 2
示例 2:

输入: [3,1,3,4,2]
输出: 3
说明：

不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。


-----------------------------------------------------------------------  1225/2020 

hash

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        unordered_map<int,int> cnt;
        for(auto x:nums) cnt[x]++;

        int res;
        for(auto x:nums)
        {
            if(cnt[x]>1)
            {
                res=x;
                break;
            }
        }

        return res;
    }
};



------------------------------------------------  yxc 时间On，空间O1


// i--->nums[i] 看作是一个链表


// 从每个点的坐标指向对应的数，一条出边，
// 这样每个坐标的出边指向的就在1-n之间，必然有一个重合的，也就是转换为求环的入口


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int i=0;
        int j=0;// 坐标从0开始

        while(1)
        {
            i=nums[i];
            j=nums[nums[j]]; // 坐标和值相互转化

            if(i==j)
            {
                i=0;
                while( i != j)
                {
                    i=nums[i];
                    j=nums[j];
                }

                return i;
            }      
        }

        return -1;
    }
};



------------------- 0722 / / 2021  


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int i=0;
        int j=0;
        while(1){
            i=nums[i];
            j=nums[nums[j]];

            if(i==j){
                i=0;
                while(i != j){
                    i=nums[i];
                    j=nums[j];
                }

                return i;
            }
        }

        return -1;
    }
};



------------------- 0811 / /2021 


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int i=0;
        int j=0;
        while(1){
            i=nums[i];
            j=nums[nums[j]];
            if(i==j){
                i=0;
                while(i != j){
                    i=nums[i];
                    j=nums[j];
                }

                return j;
            }
        }

        return -1;
    }
};


