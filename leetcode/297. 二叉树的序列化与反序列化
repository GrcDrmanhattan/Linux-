297. 二叉树的序列化与反序列化

序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。

请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。

示例: 

你可以将以下二叉树：

    1
   / \
  2   3
     / \
    4   5

序列化为 "[1,2,3,null,null,4,5]"
提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。

说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。

--------------------------------------- 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res;
        dfs_s(root, res);
        return res;
    }

    void dfs_s(TreeNode* rt, string& res)
    {
        if(!rt ) 
        {
            res+= "null ";
            return ;
        }

        res += to_string(rt->val) + ' ';
        dfs_s(rt->left, res);
        dfs_s(rt->right, res);
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int u=0;
        return dfs_d(u, data);
    }

    TreeNode* dfs_d(int &u, string data)
    {
        if(u== data.size()) return nullptr;

        int k=u;
        while(k<data.size() && data[k] != ' ') k++;
        
        if(data[u]=='n')
        {
            u=k+1;
            return nullptr;
        }

        bool f=false;
        if(data[u]=='-')
        {
            u++;
            f=true;
        }
        
        int v=0;
        for(int i=u;i < k;++i) v=v*10 + data[i]-'0'; // 小于k，k是空格的位置

        u=k+1;

        if(f) v*=-1;
        auto rt=new TreeNode(v);
        rt->left = dfs_d(u, data);
        rt->right = dfs_d(u, data);

        return rt;
    }
};


// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));



----------------------------- 0216/  2021/  



class Codec {
public:

    // Encodes a tree to a single string.
    string res;
    string serialize(TreeNode* root) {
        dfs_s(root);
        return res;
    }

    void dfs_s(TreeNode* root)
    {
        if(!root) res+="#,";
        else{
            res+=to_string(root->val) + ',';
            dfs_s(root->left);
            dfs_s(root->right);
        }
        
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int u=0;
        return dfs_d(data, u);
    }

    TreeNode* dfs_d(string & data, int &u)
    {
        if(data[u]=='#')
        {
            u+=2;
            return nullptr;
        }
        else{
            int k=u;
            while( data[u]!=',') u++;
            auto rt=new TreeNode(stoi(data.substr(k ,u-k)));
            u++;// 跳过逗号
            rt->left= dfs_d(data, u);
            rt->right = dfs_d(data, u);
            return rt;
        }

    }
};


