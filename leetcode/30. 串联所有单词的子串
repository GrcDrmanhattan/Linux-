30. 串联所有单词的子串

给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。

 

示例 1：

输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。
示例 2：

输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]


---------------------  0101 /2021 / yxc


class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> res;
        if(words.empty()) return res;
        
        int n=s.size();
        int w=words.size();
        int t=words[0].size();

        unordered_map<string, int > hw;
        for(auto x:words) hw[x]++;

        for(int i=0;i< t;++i)
        {
            unordered_map<string, int> hs;
            int cnt=0;

            for(int j=i; j + t <= n; j+=t) // j从每个i的起始位置开始，每次向后前进一个单词的长度
            {
                if(j - i >= w * t)// 超过words的拼接长度, 窗口右移动，左边的单词数减少
                {
                    auto tmp=s.substr(j - w*t, t);
                    hs[tmp]--;
                    if(hs[tmp] < hw[tmp]) cnt--;
                }

                auto word=s.substr(j, t);
                hs[word]++;
                if(hs[word] <= hw[word]) cnt++;

                if(cnt == w) res.push_back(j-(w-1)*t);
            }
        }

        return res;
    }
};



