给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:

输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。

——————————————————————————————————O(n^2)动态规划————————————————————————————
——————————————————————————————                ————————————————————————————————————————————
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) 
    {
        int res=0;
        int n=nums.size();
        vector<int> dp(n,1);//dp[i]表示以nums[i]结尾的最长上升子序列的长度
        for(int i=0;i<n;++i)
        {
            for(int j=0;j<i;++j)//    从开头循环到当前位置i
            {
                if(nums[i]>nums[j])//找到一个结尾比num[i]小的num[j]，dp就等于dp[小的]+1或者，dp[i]
                {
                    dp[i]=max(dp[i],dp[j]+1);
                }
            }
        }

        for(int i=0;i<n;++i)
        {
            res=max(res,dp[i]); //返回最大的那个
        }

        return res;
    }
};


----------------------------------  

// 1223 
// 时间On2

// 空间 On需要额外使用长度为 nn 的 dpdp 数组

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        int res=0;

        for(int i=0;i<n;++i)
        {
            dp[i]=1;
            for(int j=0;j<i;++j)
            {
                if(nums[j]<nums[i]) dp[i]=max(dp[i],dp[j]+1);
            }

            res=max(res,dp[i]);
        }

        return res;
    }
};



-------------------- 0412/  2021/  



class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> f(n);

        int res=0;
        for(int i=0;i<n;++i){
            f[i]=1;
            for(int j=0;j<i;++j){
                if(nums[j] < nums[i]) f[i]=max(f[i], f[j]+1);
            }

            res=max(res, f[i]);
        }

        return res;
    }
};



-------------------- 0412/  2021/  yxc 


// nlogn, 对于每个元素二分一次，二分logn，n个元素

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> q;
        for(auto x:nums){
            if(q.empty() || x > q.back()) q.push_back(x); // 可以产生一个长度更长的序列
            else{
                if(x<= q[0]) q[0]=x;
                else{
                    int l=0;
                    int r=q.size()-1;
                    while(l<r){
                        int mid=l+r+1>>1;
                        if(q[mid] < x) l=mid;
                        else r=mid-1;
                    }
                    q[r+1]=x;
                }  
            }
        }

        return q.size();
    }
};


---------------------- 0724 / 2021 / 

最长严格递增子序列

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> f(n);
        int res=0;
        for(int i=0;i<n;++i){
            f[i]=1;
            for(int j=0;j<i;++j){
                if(nums[j] < nums[i]) f[i]=max(f[i], f[j]+1);
            }

            res=max(res, f[i]);
        }
        return res;
    }
};


----------------- 0724 / 2021

//  fi表示长度是i的子序列结尾的最小值
 
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<int> q;

        for(auto x:nums){
            if(q.empty() || q.back() <x) q.push_back(x);
            else{
                if(x<=q[0]) q[0]=x;
                else{
                    int l=0;
                    int r=q.size()-1;
                    while(l<r){
                        int mid=l+r+1>>1;
                        if(q[mid] < x) l=mid;
                        else r=mid-1;
                    }

                    q[r+1]=x;
                }
            }
        }

        return q.size(); // 最后数组的长度就是最长的    
    }
};



