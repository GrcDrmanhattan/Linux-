306. 累加数

累加数 是一个字符串，组成它的数字可以形成累加序列。

一个有效的 累加序列 必须 至少 包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。

给你一个只包含数字 '0'-'9' 的字符串，编写一个算法来判断给定输入是否是 累加数 。如果是，返回 true ；否则，返回 false 。

说明：累加序列里的数 不会 以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。

 

示例 1：

输入："112358"
输出：true 
解释：累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
示例 2：

输入："199100199"
输出：true 
解释：累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199
 

提示：

1 <= num.length <= 35
num 仅由数字（0 - 9）组成
 

进阶：你计划如何处理由过大的整数输入导致的溢出?
---------------------- 2022/  0105   yxc


class Solution {
public:
    string add(string a, string b){
        vector<int> A;
        vector<int> B;
        for(int i=a.size()-1;i>=0;--i) A.push_back(a[i]-'0');//先存个位
        for(int i=b.size()-1;i>=0;--i) B.push_back(b[i]-'0');

        vector<int> C;
        for(int i=0, t=0;i<A.size() || i<B.size() || t;++i ){
            if(i<A.size()) t+= A[i];
            if(i<B.size()) t+= B[i];
            C.push_back(t%10);
            t/=10;
        }

        string z;
        for(int i=C.size()-1;i>=0;--i) z += to_string(C[i]);// c结尾是十位，先从结尾大数凑出结果
        return z;
    }


    bool isAdditiveNumber(string num) {
        for(int i=0;i<num.size();++i){
            for(int j=i+1;j+1<num.size();++j){
                int a=-1;
                int b=i;
                int c=j;

                while(1){
                    if(b-a>1 && num[a+1]=='0' || c-b>1 && num[b+1]=='0') break;

                    string num1=num.substr(a+1, b-a);
                    string num2=num.substr(b+1, c-b);
                    string z=add(num1, num2);
                    if(num.substr(c+1, z.size()) != z) break;

                    a=b;
                    b=c;
                    c+=z.size();
                    if(c+1 == num.size()) return true;
                }

            }
        }

        return false;
    }
};


