309. 最佳买卖股票时机含冷冻期

给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]


--------------------------------- 0131/ 2021 / yxc 

// 状态机dp
// f[i][j] : 第i天处于状态j的最大利润 
// j : 0 处于冷冻期， 1处于已经买入， 2处于在今天卖出


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty()) return 0;

        int res =0;
        int n=prices.size();
        int inf=-1e8;
        vector<vector<int>> f(n, vector<int>(3, inf));
        f[0][0]=0;//刚开始处于冷冻期
        f[0][1]=-prices[0];//第0天处于已经买入的状态，只能买入的是p0

        for(int i=1;i<n;++i)
        {
            f[i][0]=max(f[i-1][0], f[i-1][2]);
            f[i][1]=max(f[i-1][1], f[i-1][0]-prices[i]);
            f[i][2]=f[i-1][1]+prices[i];
        }       

        res=max(f[n-1][0], max(f[n-1][1], f[n-1][2]));
        return res;
    }
};

-------------------------- 0301 


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        if(!n) return 0;

        vector<vector<int>> f(n+1, vector<int>(3));
        f[0][0]=0;
        f[0][1]=-prices[0];

        for(int i=1;i<=n;++i)
        {
            f[i][0]=max(f[i-1][0], f[i-1][2]); // 不加减价格
            f[i][1]=max(f[i-1][1], f[i-1][0]-prices[i-1]);
            f[i][2]=f[i-1][1]+prices[i-1];
        }

        return max(f[n][0], max(f[n][1], f[n][2]));
    }
};


