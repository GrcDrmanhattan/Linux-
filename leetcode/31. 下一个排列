31. 下一个排列

实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须 原地 修改，只允许使用额外常数空间。

 

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]
示例 4：

输入：nums = [1]
输出：[1]
 

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 100

------------------------------- 0217 / 2021/  yxc


// 每个元素被扫描三次 On

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int k=nums.size()-1;
        while(k>0 && nums[k-1]>=nums[k]) k--; // 找到第一个升序的位置
        if(k<=0){
            reverse(nums.begin(), nums.end());
        }else{ // 然后找到大于nums[k-1]的最小的数，swap，然后将后面逆序
            int t=k;
            while(t< nums.size() && nums[t]>nums[k-1]) t++;//t-1就是大于k-1的最小的数
            swap(nums[t-1], nums[k-1]);
            reverse(nums.begin() + k, nums.end());
        }
    }
};


-------------------------- 0217 / 2021  

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int k=nums.size()-1;
        while(k>0 && nums[k-1] >= nums[k]) k--; // >= 一直走， 找到严格升序的
        if(k<=0) reverse(nums.begin(), nums.end());
        else{
            int t=k;
            while(t<nums.size() && nums[t] > nums[k-1]) t++;
            swap(nums[t-1], nums[k-1]);
            reverse(nums.begin() + k, nums.end());
        }
    }
};



--------------- 0218 / 


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int k=nums.size()-1;
        while(k>0 && nums[k-1]>= nums[k]) k--;

        if(k==0) reverse(nums.begin(), nums.end());
        else{
            int t=k;
            while(t<nums.size() && nums[t] > nums[k-1]) t++;
            swap(nums[t-1], nums[k-1]);
            reverse(nums.begin() + k , nums.end());
        }
    }
};



---------------------------------- 0304  / 2021 


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int k=nums.size()-1;
        while(k>0 && nums[k-1] >= nums[k]) k--;
        if(k==0) reverse(nums.begin(), nums.end());
        else{
            int t=k;
            while(t< nums.size() && nums[t] > nums[k-1]) t++;
            swap(nums[t-1], nums[k-1]);
            reverse(nums.begin() + k, nums.end());
        }
    }
};




-------------------------------------- 0627 / 2021/  


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int k=nums.size()-1;
        while(k && nums[k-1]>=nums[k]) k--;
        if(k==0) reverse(nums.begin(), nums.end());
        else{
            int t=k;
            while(t<nums.size() && nums[t] > nums[k-1]) t++;
            swap(nums[k-1], nums[t-1]);
            reverse(nums.begin()+k, nums.end());
        }
    }
};


