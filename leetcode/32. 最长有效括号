32. 最长有效括号

给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。

 

示例 1：

输入：s = "(()"
输出：2
解释：最长有效括号子串是 "()"
示例 2：

输入：s = ")()())"
输出：4
解释：最长有效括号子串是 "()()"
示例 3：

输入：s = ""
输出：0
 

提示：

0 <= s.length <= 3 * 104
s[i] 为 '(' 或 ')'


----------------------------------- 0304 / 2021  / yxc

// 连续的括号


时间On， 每个位置遍历一次，，最多进站一次
空间On



class Solution {
public:
    int longestValidParentheses(string s) {
        int res=0;
        stack<int> st;

        for(int i=0, start = -1; i<s.size();++i)
        {
            if(s[i]=='(') st.push(i);
            else{//右括号
                if(st.size()){
                    st.pop(); // 匹配一个左括号
                    if(st.size()){
                        res=max(res, i-st.top());
                    }else{
                        res=max(res, i-start);
                    }

                }else{
                    start = i;
                }
            }
        }

        return res;
    }
};



---------------- 0306 /2021/ 

class Solution {
public:
    int longestValidParentheses(string s) {
        int res=0;
        stack<int> st;
        int start=-1;

        for(int i=0; i<s.size(); ++i)
        {
            if(s[i]=='(') st.push(i);
            else{
                if(st.size())
                {
                    st.pop();
                    if(st.size()) res=max(res, i-st.top());
                    else res=max(res, i-start);
                }
                else{
                    start= i;
                }
            }
        }

        return res;
    }
};



----------------------- 0628  /2021/  


两次线性扫描、贪心) O(n)
假设当前从前到后统计合法括号子串，令 ( 的权值为 1，) 的权值为 -1。
首先记录 start 为某个起点，则在 i 向后移动的过程中，若当前 [start,i] 区间和等于 0，该字符串是合法的，更新答案；
若区间和大于 0，则说明目前缺少右括号，可以不修改 start；若区间和小于 0，则说明区间已经不合法了，需要修正 start 为 i+1。初始时 start 从 0 开始即可。

可是对于 ...((((合法)((( 这种情况，以上算法不能够准确捕捉到最长的合法子串，
此时我们逆向考虑，将以上过程反向，从后向前统计，即可处理所有的情况。
时间复杂度
两次线性扫描，故时间复杂度为 O(n)。
空间复杂度
仅需要常数的额外空间。



class Solution {
public:
    int longestValidParentheses(string s) {
        int res=0;
        int v=0;
        int st=0;
        for(int i=0;i<s.size();++i){
            if(s[i]=='(') v++;
            else v--;
            if(v<0){
                v=0;
                st=i+1;
            }
            if(v==0) res=max(res, i-st+1);
        }

        st=s.size()-1;
        v=0;
        for(int i=s.size()-1;i>=0;--i){
            if(s[i]==')') v++;
            else v--;
            if(v<0){
                v=0;
                st=i-1;
            }

            if(v==0) res=max(res, st-i+1);
        }

        return res;
    }
};



---------------------- 0628 / 2021/  

class Solution {
public:
    int longestValidParentheses(string s) {
        int res=0;
        int st=0;
        stack<int> mp;

        for(int i=0;i<s.size();++i){
            if(s[i]=='(') mp.push(i);
            else{
                if(mp.size()){
                    mp.pop();
                    if(mp.empty()){
                        res=max(res, i-st+1);
                    }
                    else{
                        res=max(res, i-mp.top());
                    }
                }else st=i+1;
            }
        }

        return res;
    }
};



--------------------- 0630 / /2021
 
 
 class Solution {
public:
    int longestValidParentheses(string s) {
        int res=0;
        int start=0;
        stack<int> st;

        for(int i=0;i<s.size();++i){
            if(s[i]=='(') st.push(i);
            else{
                if(st.size()){
                    st.pop();
                    if(st.size()){
                        res=max(res, i-st.top());
                    }
                    else res=max(res, i-start+1);
                }
                else start=i+1;
            }
        }

        return res;
    }
};


