假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

==========================================

// 1 2 3 4 5 6 7 可以大致分为两类，
// 第一类 2 3 4 5 6 7 1 这种，也就是 nums[start] <= nums[mid]。此例子中就是 2 <= 5。
// 这种情况下，前半部分有序。因此如果 nums[start] <=target<nums[mid]，则在前半部分找，否则去后半部分找。
// 第二类 6 7 1 2 3 4 5 这种，也就是 nums[start] > nums[mid]。此例子中就是 6 > 2。
// 这种情况下，后半部分有序。因此如果 nums[mid] <target<=nums[end]，则在后半部分找，否则去前半部分找。


class Solution 
{
public:
    int search(vector<int>& nums, int target) 
    {
        int n=nums.size();
        int left= 0;
        int right = n-1;
        while(left<=right)//注意是小于等于
        {
            int mid=(left+right)>>1;
            if(nums[mid] == target) return mid;
            //前部分升序
            else if(nums[left]<= nums[mid])// l  mid   r
            {
                //如果在有序区间，好判断
                if(target<nums[mid] && target>= nums[left])//tar 在左区间[l,mid]就移动r
                {
                    right=mid-1;
                }
                else
                {
                    left=mid+1;
                }
            }
            //，后部分有序
            else//，降序区间   mid     r     l
            {
                if(target>nums[mid] && target<= nums[right])//在右区间[mid,r]就移动l
                {
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
        }

        return -1;
    }
};
