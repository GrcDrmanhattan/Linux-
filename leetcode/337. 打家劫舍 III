在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 
除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

示例 1:

输入: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

输出: 7 
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
示例 2:

输入: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

输出: 9
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.

######################################################


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */


/* 返回一个大小为 2 的数组 arr
arr[0] 表示不抢 root 的话，得到的最大钱数
arr[1] 表示抢 root 的话，得到的最大钱数 */

class Solution 
{
public:
    int rob(TreeNode* root) 
    {
        auto res=helper(root);
        return max(res[0],res[1]);
    }

    vector<int> helper(TreeNode* root)
    {
        if(root==NULL) return vector<int> {0,0};

        auto l=helper(root->left);
        auto r=helper(root->right);
        // 抢，下家就不能抢了
        // 不抢，下家可抢可不抢，取决于收益大小
        //分情况讨论
        return vector<int>{max(l[0],l[1])+max(r[0],r[1]),l[0]+r[0]+root->val};
    }
};




-------------------------- 0122 /2021 / yxc 树形dp


// 考虑某个节点和儿子的关系，去递归就可

class Solution {
public:
    int rob(TreeNode* root) {
        auto f=dfs(root) ;

        return max(f[0], f[1]);
    }

    vector<int> dfs(TreeNode* rt)
    {
        if(!rt) return {0,0};

        auto l=dfs(rt->left);
        auto r=dfs(rt->right);
        // 不选择rt， 选择rt
        return {max(l[0], l[1])+max(r[0], r[1]), rt->val + l[0]+r[0]};

    }
};


----------------------- 0410 / /2021/ 

class Solution {
public:
    int rob(TreeNode* root) {
        auto f=dfs(root);
        return max(f[0], f[1]);
    }

    vector<int> dfs(TreeNode* u)
    {
        if(!u) return {0, 0};

        auto l=dfs(u->left);
        auto r=dfs(u->right);

        return {max(l[0], l[1])+max(r[0], r[1]) , u->val + l[0]+r[0]};
    }

};



