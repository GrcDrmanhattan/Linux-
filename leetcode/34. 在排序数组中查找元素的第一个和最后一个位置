34. 在排序数组中查找元素的第一个和最后一个位置

给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]


############################## 算法笔记

class Solution 
{
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        vector<int> res;
        int low=lower_bound(nums,target);
        int upp=upper_bound(nums,target);
        if(low==upp) return {-1,-1};
        res.push_back(low);
        res.push_back(upp-1);
        return res;
    }

    int lower_bound(vector<int>& nums,int target)//找到第一个大于等于tar的位置
    {
        int n=nums.size();
        int l=0;
        int r=n;//数组取不到nums[n],因为下标从0开始，所以区间是左闭右开

        while(l<r)
        {
            int mid=l+r>>1;
            if(nums[mid]>=target)//大于等于
            {
                r=mid;
            }
            else
            {
                l=mid+1;
            }
        }
        
        return l;

    }

    int upper_bound(vector<int>&nums,int target)//找到第一个大于的元素的位置
    {
        int n=nums.size();
        int l=0;
        int r=n;

        while(l<r)
        {
            int mid=l+r>>1;
            if(nums[mid]>target)//大于
            {
                r=mid;
            }
            else
            {
                l=mid+1;
            }
        }
        
        return l;

    }
};



