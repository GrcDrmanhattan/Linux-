给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。

++++++++++++++++++++++++++++++++++++++

//0不是正整数，1不能拆分，都初始化为0

//因此，“动态规划”的思路是依次求出 dp[0]、dp[1]、dp[2]、……，这是外层循环，最后一个状态就是我们要求的。

// 而每一个 dp[i] 又和它之前的状态有关，因此还需要一层循环，即内层循环，内层循环的写法就是我们分析出的“状态转移方程”。
//分解为两个数 结果是 j*(i-j)
//分解为两个以上的结果，是 j*(dp[i-j])

//时间On2，对于每一个i从2到n，都要计算dp，计算dp又要遍历j，所以是On*On
//空间是On，创建一个dp数组，长度n+1

//两层循环的用处
//而这里的 n 是什么呢？我们说了dp是自底向下的思考方式，
// 那么在达到 n 之前是看不到整体的n 的。因此这里的 n 实际上是 1,2,3,4... n。
//自然地，我们用一层循环来生成上面一系列的 n 值。接着我们还要生成一系列的 i 值，
// 注意到 n - i 是要大于 0 的，因此 i 只需要循环到 n - 1 即可。


// class Solution 
// {
// public:
//     int integerBreak(int n) 
//     {
//         int res=0;
//         vector<int> dp(n+1,0);
//         //遍历i，当i>2，进行拆分
//         for(int i=2;i<=n;++i)
//         {
//             for(int j=1;j<i;++j)//j从1到i-1，j是拆出的第一个数，另外的是i-j，
//             {
//                 dp[i]=max(dp[i],max(j*dp[i-j],j*(i-j)));//选择对i-j是否拆分讨论
//             }
//         }

//         return dp[n];
//     }
// };


//参见官方题解数学

class Solution
{
public:
    int integerBreak(int n)
    {
        if(n<=3) return n-1;

        int a=n/3;
        int b=n%3;
        if(b==0)
        {
            return (int)pow(3,a);
        }
        else if(b==1)
        {
            return (int)pow(3,a-1)*4;//少乘一个3，变为3+1
        }
        else //余数2
        {
            return (int)pow(3,a) * 2;
        }
    }
};

