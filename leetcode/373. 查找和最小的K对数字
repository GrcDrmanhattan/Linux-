373. 查找和最小的K对数字

给定两个以 升序排列 的整数数组 nums1 和 nums2 , 以及一个整数 k 。

定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2 。

请找到和最小的 k 个数对 (u1,v1),  (u2,v2)  ...  (uk,vk) 。

 

示例 1:

输入: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
输出: [1,2],[1,4],[1,6]
解释: 返回序列中的前 3 对数：
     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
示例 2:

输入: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
输出: [1,1],[1,1]
解释: 返回序列中的前 2 对数：
     [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
示例 3:

输入: nums1 = [1,2], nums2 = [3], k = 3 
输出: [1,3],[2,3]
解释: 也可能序列中所有的数对都被返回:[1,3],[2,3]
 

提示:

1 <= nums1.length, nums2.length <= 105
-109 <= nums1[i], nums2[i] <= 109
nums1 和 nums2 均为升序排列
1 <= k <= 1000

------------------------- 2022 / 0114  

// 就相当于求m个递增序列的前k个数，多路归并
// klogn

class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& a, vector<int>& b, int k) {
        vector<vector<int>> res;
        if(a.empty() || b.empty()) return {};

        int n=a.size();
        int m=b.size();
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>> >hp;

        for(int i=0;i<m;++i) hp.push({a[0]+b[i], 0, i});

        while(k-- && hp.size()){
            auto t=hp.top();
            hp.pop();
            res.push_back({a[t[1]], b[t[2]]});

            if(t[1] + 1 <n){ // a数组还有元素, 继续放入堆
                hp.push({a[t[1]+1] + b[t[2]], t[1]+1, t[2]});
            }
        }
        return res;
    }
};



