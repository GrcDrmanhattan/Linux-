378. 有序矩阵中第 K 小的元素

给你一个 n x n 矩阵 matrix ，其中每行和每列元素均按升序排序，找到矩阵中第 k 小的元素。
请注意，它是 排序后 的第 k 小元素，而不是第 k 个 不同 的元素。

 

示例 1：

输入：matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
输出：13
解释：矩阵中的元素为 [1,5,9,10,11,12,13,13,15]，第 8 小元素是 13
示例 2：

输入：matrix = [[-5]], k = 1
输出：-5
 

提示：

n == matrix.length
n == matrix[i].length
1 <= n <= 300
-109 <= matrix[i][j] <= 109
题目数据 保证 matrix 中的所有行和列都按 非递减顺序 排列
1 <= k <= n2
--------------------------------------- 2022 / /0115   

class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int l=INT_MIN;
        int r=INT_MAX;
        while(l<r){
            int mid=(long long )l+r>>1;
            int j=matrix[0].size()-1; // j列
            int cnt=0;

            for(int i=0;i<matrix.size();++i){
                while(j >= 0 && matrix[i][j] > mid) j--;
                cnt += j+1;
            }

            if(cnt >= k) r=mid; // 如果小于等于mid的元素数目大于等于k， 说明答案在左半部分，更新右边界
            else l=mid+1;
        }

        return r;
    }
};


class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int l=INT_MIN;
        int r=INT_MAX; // 二分查找 答案区间
        while(l<r){
            int mid=(long long )l+r>>1;
            int j=matrix[0].size()-1; // j列
            int cnt=0;

            for(int i=0;i<matrix.size();++i){ // 在矩阵每一行搜索小于等于mid的元素
                while(j >= 0 && matrix[i][j] > mid) j--;
                cnt += j+1;
            }

            if(cnt >= k) r=mid; // 如果小于等于mid的元素数目大于等于k， 说明答案在左半部分，更新右边界
            else l=mid+1;
        }

        return r;
    }
};



