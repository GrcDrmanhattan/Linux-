39. 组合总和

给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1：

输入：candidates = [2,3,6,7], target = 7,
所求解集为：
[
  [7],
  [2,2,3]
]
示例 2：

输入：candidates = [2,3,5], target = 8,
所求解集为：
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
 

提示：

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
candidate 中的每个元素都是独一无二的。
1 <= target <= 500


------------------------------- 0304 / 2021/   yxc 

dfs爆搜

class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;

    vector<vector<int>> combinationSum(vector<int>& c, int target) {
        dfs(c, 0, target);
        return res;    
    }

    void dfs(vector<int>& c, int u , int target) // 搜索数组的第u个数可以选择几个
    {
        if(target == 0) {
            res.push_back(tmp);
            return;
        }

        if(u==c.size())  return;

        for(int i=0; c[u] * i <= target;++i)
        {
            dfs(c, u+1, target-c[u] * i);
            tmp.push_back(c[u]);
        }

        for(int i=0; c[u] * i <=target;++i)
        {
            tmp.pop_back();
        }
    }
};


----------------------- 0306 / 2021/ 

class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;

    vector<vector<int>> combinationSum(vector<int>&  c, int target) {
        dfs(c, 0 , target);
        return res;
    }

    void dfs(vector<int>& c, int u, int target)
    {
        if(target==0){
            res.push_back(tmp);
            return;
        }

        if(u==c.size()) return ;

        for(int i=0; i * c[u] <= target;++i)
        {
            dfs(c, u+1, target- i * c[u]);
            tmp.push_back(c[u]);
            
        }

        for(int i=0; i* c[u] <= target;++i)
            tmp.pop_back();
    }
};


------------------ 0308  /2021 

class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;

    vector<vector<int>> combinationSum(vector<int>& c, int target) {
        dfs(c, 0, target);
        return res;
    }

    void dfs(vector<int>& c, int u , int target)
    {
        if(target==0){
            res.push_back(tmp);
            return ;
        }

        if(u==c.size()) return ;

        for(int i=0; i * c[u] <= target;++i)
        {
            if(i)
                tmp.push_back(c[u]);
            dfs(c, u+1, target-i*c[u]);
            // tmp.push_back(c[u]);
        }

        for(int i=0; i * c[u] <= target;++i)
            if(i)
                tmp.pop_back();
    }
};



---------------------0701/ 2021/  

class Solution {
public:
    // 依次枚举每个数可以选多少个
    vector<vector<int>> res;
    vector<int> tmp;
    vector<vector<int>> combinationSum(vector<int>& c, int target) {
        dfs(c , 0, target);
        return res;
    }

    void dfs(vector<int>& c, int u, int target){
        if(target==0){
            res.push_back(tmp);
            return;
        }

        if(u==c.size()) return;

        for(int i=0;i * c[u] <= target;++i){
            dfs(c, u+1, target-c[u]*i);//刚开始i为0，直接进入下一个dfs
            tmp.push_back(c[u]);
        }

        for(int i=0;i*c[u] <= target;++i) tmp.pop_back();
    }
};


--------------- 0701 // 2021/  

// 递归枚举，依次以每个点为起点枚举，每个点可以有一个或者多个，直到和大于等于target返回

class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;
    vector<vector<int>> combinationSum(vector<int>& c, int target) {
        dfs(c, 0, target);
        return res;
    }

    void dfs(vector<int>&c ,int st, int target){
        if(target<0) return;
        if(target==0){
            res.push_back(tmp);
            return;
        }

        for(int i=st;i<c.size();++i){
            tmp.push_back(c[i]);
            dfs(c, i , target-c[i]); // i是枚举的起点
            tmp.pop_back();
        }
    }
};


