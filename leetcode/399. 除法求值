399. 除法求值

给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中 equations[i] = [Ai, Bi] 和 values[i] 共同表示等式 Ai / Bi = values[i] 。
每个 Ai 或 Bi 是一个表示单个变量的字符串。

另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j 个问题，请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。

返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0 替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用 -1.0 替代这个答案。

注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。

 

示例 1：

输入：equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]
解释：
条件：a / b = 2.0, b / c = 3.0
问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]
示例 2：

输入：equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
输出：[3.75000,0.40000,5.00000,0.20000]
示例 3：

输入：equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
输出：[0.50000,2.00000,-1.00000,-1.00000]
 

提示：

1 <= equations.length <= 20
equations[i].length == 2
1 <= Ai.length, Bi.length <= 5
values.length == equations.length
0.0 < values[i] <= 20.0
1 <= queries.length <= 20
queries[i].length == 2
1 <= Cj.length, Dj.length <= 5
Ai, Bi, Cj, Dj 由小写英文字母与数字组成

----------------------------- 0115 / 2021 / yxc



//  图论
//  求有向图任意两点之间的距离
//  每两个点距离唯一 是定值 <--方程组没有矛盾 
//  floyd n^3
//  变量最多40， 所以不超时


class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        vector<double> res;
        unordered_set<string> s;
        unordered_map<string, unordered_map<string, double>> d; // nb

        for(int i=0;i<equations.size();++i)
        {
            auto a=equations[i][0];
            auto b=equations[i][1];

            auto c=values[i];

            s.insert(a);
            s.insert(b);

            d[a][b]=c;
            d[b][a]=1/c;
        }

        for(auto k:s)
            for(auto i:s)
                for(auto j:s)
                    if(d[i][k] && d[j][k]) d[i][j]=d[i][k] * d[k][j]; //  if(d[i][k] && d[k][j]) d[i][j]=d[i][k] * d[k][j];

        for(int i=0;i<queries.size();++i)
        {
            auto a=queries[i][0];
            auto b=queries[i][1];

            if(d[a][b]) res.push_back(d[a][b]);
            else res.push_back(-1);
        }

        return res;
    }
};



-------------------------- 0407 / 2021/  

floyd求任意两点最短距离，因为题目距离唯一，所以最短距也就是所求



class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_set<string> s;
        unordered_map<string, unordered_map<string, double>> d;

        for(int i=0;i<equations.size();++i){
            auto a=equations[i][0];
            auto b=equations[i][1];
            auto c=values[i];

            s.insert(a);
            s.insert(b);
            d[a][b]=c;
            d[b][a]=1/c;
        }

        for(auto k:s)
            for(auto i:s)
                for(auto j:s)
                    if(d[i][k] && d[k][j]) d[i][j] = d[i][k] * d[k][j];

        vector<double> res;
        for(auto x:queries){
            auto a=x[0];
            auto b=x[1];
            if(d[a][b]) res.push_back(d[a][b]);
            else res.push_back(-1);
        }

        return res;
    }
};



----------------------- 0726  /2021 
 
 class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& e, vector<double>& v, vector<vector<string>>& q) {
        vector<double> res;
        unordered_set<string> st;
        unordered_map<string , map<string, double>> d;

        for(int i=0;i<e.size();++i){
            auto a=e[i][0];
            auto b=e[i][1];
            double c=v[i];
            st.insert(a);
            st.insert(b);
            d[a][b]=c;
            d[b][a]=1/c;
        }

        for(auto k:st)
            for(auto i:st)
                for(auto j:st)
                    if(d[i][k] && d[k][j]) d[i][j]=d[i][k] * d[k][j];

        for(int i=0;i<q.size();++i){
            auto a=q[i][0];
            auto b=q[i][1];
            if(d[a][b]) res.push_back(d[a][b]);
            else res.push_back(-1);
        }

        return res;
    }
};



--------------------- 0808  /2021 
 
 class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> res;
        unordered_map<string, unordered_map<string, double>> mp;
        unordered_set<string> st;

        for(int i=0;i<equations.size();++i){
            auto a=equations[i][0];
            auto b=equations[i][1];
            auto c=values[i];
            mp[a][b]=c;
            mp[b][a]=1/c;
            st.insert(a);
            st.insert(b);
        }

        for(auto k:st)
            for(auto i:st)
                for(auto j:st)
                    if(mp[i][k] && mp[k][j]) mp[i][j] = mp[i][k] * mp[k][j];

        for(auto x:queries){
            auto a=x[0];
            auto b=x[1];
            if(mp[a][b]) res.push_back(mp[a][b]);
            else res.push_back(-1);
        }

        return res;
    }
};


