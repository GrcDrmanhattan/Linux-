40. 组合总和 II

给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
所求解集为:
[
  [1,2,2],
  [5]
]
----------------------------- 0304 / 2021 /  yxc



class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;

    vector<vector<int>> combinationSum2(vector<int>& c, int target) {
        sort(c.begin(), c.end());
        dfs(c, 0, target);
        return res;
    }

    void dfs(vector<int>& c, int u ,int target)
    {
        if(target==0) {
            res.push_back(tmp);
            return ;
        }

        if(u==c.size()) return;

        int k=u+1;
        while(k<c.size() && c[k] == c[u]) k++;
        int cnt=k-u;

        for(int i=0;i * c[u] <= target && i <= cnt ;++i)
        {
            dfs(c, k, target - i* c[u]); // 从第k个开始
            tmp.push_back(c[u]);
        }

        for(int i=0;i * c[u]<=target && i<=cnt;++i) tmp.pop_back();
    }
};


------------------- 0308 / 2021.

class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;

    vector<vector<int>> combinationSum2(vector<int>& c, int target) {
        sort(c.begin() , c.end());
        dfs(c , 0, target);
        return res;
    }

    void dfs(vector<int>& c, int u ,int target)
    {
        if(target==0){
            res.push_back(tmp);
            return;
        }

        if(u==c.size()) return;

        int k=u+1;
        while(k<c.size() && c[k]==c[u]) k++;
        int cnt=k-u;

        for(int i=0 ; i <= cnt && i * c[u] <= target; ++i)
        {
            dfs(c, k, target-i*c[u]); // 如果满足条件，就在这个分支进行搜索，
            tmp.push_back(c[u]); // 将这个分支的数加上
        }

        for(int i=0; i<= cnt && i * c[u] <= target;++i)
            tmp.pop_back();
    }
};




