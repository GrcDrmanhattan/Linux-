41. 缺失的第一个正数
给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。

 

进阶：你可以实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案吗？

 

示例 1：

输入：nums = [1,2,0]
输出：3
示例 2：

输入：nums = [3,4,-1,1]
输出：2
示例 3：

输入：nums = [7,8,9,11,12]
输出：1
 

提示：

0 <= nums.length <= 300
-231 <= nums[i] <= 231 - 1


----------------------------------------------- 0129 / 2021 / yxc

插入所有元素 On
枚举也是On

时间为On
但空间不是O1


class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        unordered_set<int> s;
        for(auto x:nums) s.insert(x);

        int res=1;
        while(s.count(res)) res++;

        return res;
    }
};


--------------------------------- O1空间



//坐标是0到n-1，但要找到的数范围是1到n，所以要先把数字减少1


class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n=nums.size();
        if(!n) return 1;

        for(auto &x:nums) if(x != INT_MIN )x--;

        for(int i=0;i<n;++i)
        {
            while((nums[i]>=0 && nums[i]<n) && nums[i]!=i && nums[i] != nums[nums[i]] )
                swap(nums[i], nums[nums[i]]); // 把数字放到对应的位置上

        }

        for(int i=0;i<n;++i)
            if(nums[i] != i) return i+1;

        return n+1;
    }
};





----------------------------------- 0211 / 2021/ 


class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
       
        for(auto &x:nums) if(x!= INT_MIN) x--;

        for(int i=0;i<nums.size();++i)
        {
            while(nums[i]>=0 && nums[i]<nums.size() && nums[i] != i && nums[i] != nums[nums[i]])
                swap(nums[i] ,nums[nums[i]]);
        }

        for(int i=0;i<nums.size();++i)
            if(nums[i] != i) return i+1;

        return nums.size()+1;
    }
};




