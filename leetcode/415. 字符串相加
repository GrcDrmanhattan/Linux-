给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。

注意：

num1 和num2 的长度都小于 5100.
num1 和num2 都只包含数字 0-9.
num1 和num2 都不包含任何前导零。
你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。

##################################################


// class Solution 
// {
// public:
//     string addStrings(string num1, string num2) 
//     {
//         int len1=num1.size();
//         int len2=num2.size();
//         string res="";
//         int flag=0;

//         for(int i=1;i<=min(len1,len2);++i)//小于等于
//         {
//             int sum=flag+num1[len1-i]-'0'+num2[len2-i]-'0';//最后一位开始相加
//             if(sum>=10)
//             {
//                 flag=1;
//                 sum-=10;

//             }
//             else
//             {
//                 flag=0;
//             }

//             char c=sum+'0';
//             res=c+res;
//         }

//         if(len1>len2)
//         {
//             for(int i=len2+1;i<=len1;++i)//小于等于
//             {
//                 int sum=flag+num1[len1-i]-'0';

//                 if(sum>=10)
//                 {
//                     flag=1;
//                     sum-=10;
//                 }
//                 else
//                 {
//                     flag=0;
//                 }

//                 char c=sum+'0';
//                 res =c+res;
//             }
//         }
//         else
//         {
//             for(int i=len1+1;i<=len2;++i)
//             {
//                 int sum=flag+num2[len2-i]-'0';

//                 if(sum>=10)
//                 {
//                     flag=1;
//                     sum-=10;
//                 }
//                 else
//                 {
//                     flag=0;
//                 }

//                 char c=sum+'0';
//                 res=c+res;
//             }
//         }

//         if(flag) res="1" + res;
//         return res;
//     }
// };

//0812 

// class Solution
// {
// public:
//     string addStrings(string num1, string num2) 
//     {
//         string res="";
//         int len1=num1.size();
//         int len2=num2.size();

//         int flag=0;
//         int sum=0;

//         for(int i=0;i<min(len1,len2);++i)
//         {
//             sum=flag+num1[len1-i-1]-'0'+num2[len2-i-1]-'0';
//             flag=sum/10;

//             sum%=10;
//             res=to_string(sum)+res;
//         }

//         if(len1>len2)
//         {
//             for(int i=len2+1;i<=len1;++i)
//             {
//                 sum=flag+num1[len1-i]-'0';//[len1-i] 拿笔算一下，就知道是最后一位了
//                 flag=sum/10;

//                 sum%=10;
//                 res=to_string(sum)+res;
//             }
//         }
//         else
//         {
//             for(int i=len1+1;i<=len2;++i)
//             {
//                 sum=flag+num2[len2-i]-'0';
//                 flag=sum/10;

//                 sum%=10;
//                 res=to_string(sum)+res;

//             }

//         }

//         if(flag)
//         {
//             res="1"+res;
//         }

//         return res;
//     }
// };


class Solution 
{
public:
    string addStrings(string num1, string num2) 
    {
        int i = num1.size()-1, j =  num2.size() -1;//双指针指向末尾
        string ans = "";
        int carry =0;
        while(i >=0 || j >= 0 || carry != 0)
        {
            int x = i >= 0? num1[i]-'0' :0;
            int y = j >= 0? num2[j]-'0' :0;
            int result = x +y + carry;
            ans.push_back('0' + result % 10);
            carry = result/10;
            i--;
            j--;
        }  
        reverse(ans.begin(),ans.end());
        return ans;
    }
};




---------------------------------------------------- 0126 / 2021 / yxc


// 高精度加法模版


class Solution {
public:
    string addStrings(string a, string b) {
        string c;
        vector<int> A, B;

        for(int i=a.size()-1;i>=0;--i) A.push_back(a[i]-'0');
        for(int i=b.size()-1;i>=0;--i) B.push_back(b[i]-'0');

        auto C=add(A, B);
        for(int i=C.size()-1;i>=0;--i) c+=to_string(C[i]);

        return c;
    }

    vector<int> add(vector<int> a, vector<int> b)
    {
        vector<int> c;

        int t=0;

        for(int i=0;i<a.size()||i<b.size()||t;++i)
        {
            if(i<a.size()) t+=a[i];
            if(i<b.size()) t+= b[i];

            c.push_back(t%10);
            t/=10;
        }
        return c;
    }
};


