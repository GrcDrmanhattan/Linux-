42. 接雨水

给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

 

示例 1：



输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]
输出：6
解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 
示例 2：

输入：height = [4,2,0,3,2,5]
输出：9
 

提示：

n == height.length
0 <= n <= 3 * 104
0 <= height[i] <= 105



----------------------  1228/ 2020 / yxc 还是看视频


class Solution {
public:
    int trap(vector<int>& height) {
        int res=0;
        stack<int> st;

        for(int i = 0;i < height.size();++i)
        {
            int last=0;

            while(st.size() && height[st.top()] <= height[i]) // 比前面的高度小，可以与前面形成凹槽
            {
                res += (i-st.top()-1) * (height[st.top()] - last);
                last = height[st.top()]; // 将last更新为栈顶坐标
                
                // 在弹出之前先计算面积
                st.pop();
            }


            // 当剩下栈内的高度比当前高度大时
            if(st.size()) res += (i-st.top()-1) * (height[i] - last);
            
            // 最后push当前i坐标
            st.push(i);
        }
        
        return res;
    }
};


--------------------- 0308 / 2021 


class Solution {
public:
    int trap(vector<int>& height) {
        int res=0;
        int last=0;
        stack<int> st;

        for(int i=0; i<height.size();++i)
        {
            while(st.size() && height[st.top()] <= height[i])
            {
                res +=(i-st.top()-1) * (height[st.top()] - last);
                last=height[st.top()];
                st.pop();
            }

            if(st.size()) res += (i-st.top()-1) * (height[i]-last);
            st.push(i);
        }

        return res;
    }
};



----------------- 0911 / 2021 

class Solution {
public:
    int trap(vector<int>& height) {
        int res=0;
        int n=height.size();
        if(n==0) return 0;
        vector<int> ll(n);
        vector<int> rr(n);

        ll[0]=height[0];
        for(int i=1;i<n;++i){
            ll[i]=max(ll[i-1] , height[i]);
        }

        rr[n-1]=height[n-1];
        for(int i=n-2;i>=0;--i){
            rr[i]=max(rr[i+1], height[i]);
        }

        for(int i=0;i<n;++i){
            res+=min(rr[i],ll[i])-height[i];
        }

        return res;
    }
};

