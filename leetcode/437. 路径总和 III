437. 路径总和 III

给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11

#######################################################


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution 
// {
// public:
//     int pathSum(TreeNode* root, int sum) 
//     {
//         int res=0;
//         if(!root) return 0;
//         //先序遍历
//         return helper(root,sum)+pathSum(root->left,sum)+pathSum(root->right,sum);
//     }

//     int helper(TreeNode* root,int sum)
//     {
//         if(root==nullptr) return 0;
        
//         int cnt=0;
//         if(root->val==sum)
//         {
//             cnt++;
//         }

//         cnt+=helper(root->left,sum-root->val);
//         cnt+=helper(root->right,sum-root->val);

//         return cnt;
//     }
// };


//0818 参考题解

//①先序递归遍历每个节点
//②以每个节点作为起始节点DFS寻找满足条件的路径

class Solution 
{
public:
    int ans = 0;

    void dfs(TreeNode* root, int sum)
    {
        if(root == nullptr)
            return;
        sum -= root->val;
        if(sum == 0)
            ans++;
        dfs(root->left, sum);
        dfs(root->right, sum);
    }

    int pathSum(TreeNode* root, int sum) 
    {
        if(root == nullptr)
            return ans;
        dfs(root, sum);
        pathSum(root->left, sum);
        pathSum(root->right, sum);
        return ans;
    }
};


