438. 找到字符串中所有字母异位词

给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。

字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。

说明：

字母异位词指字母相同，但排列不同的字符串。
不考虑答案输出的顺序。
示例 1:

输入:
s: "cbaebabacd" p: "abc"

输出:
[0, 6]

解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的字母异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的字母异位词。
 示例 2:

输入:
s: "abab" p: "ab"

输出:
[0, 1, 2]

解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的字母异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的字母异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的字母异位词。


-------------------------------------------------  0405 / 2021/  yxc 



class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        unordered_map<char ,int > cnt; // 通过一个哈希表就可以，先存储p的次数，然后遍历s， 每当出现一个p中的字符就将次数减少，当减少为0满足要求
        for(auto x:p) cnt[x]++;
        int t=cnt.size();

        int tmp=0;
        for(int i=0, j=0; i<s.size();++i){
            cnt[s[i]]--;
            if(cnt[s[i]] ==0) tmp++;

            while(i-j+1 > p.size()){ // 长度过长要缩短窗口
                if(cnt[s[j]] == 0) tmp--; // 如果缩减之前已经满足了，说明窗口减小之后，就不满足了，tmp要减少
                cnt[s[j]] ++ ;
                j++;
            }

            if(tmp == t) res.push_back(j);
        }

        return res;
    }
};




----------------- 0729  /2021 

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        unordered_map<char,int> cnt;
        for(auto x:p) cnt[x]++;

        int t=cnt.size();
        int succ=0;
        for(int i=0, j=0;i<s.size();++i){
            cnt[s[i]]--;
            if(cnt[s[i]] ==0) succ++;

            while(i-j+1 > p.size()){
                if(cnt[s[j]] ==0 ) succ--;
                cnt[s[j]]++;
                j++;
            }

            if(succ == t) res.push_back(j); // 满足要求的种数恰好和cnt相同
        }

        return res;
    }
};


---------------------- 0731  /2021 

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        unordered_map<char, int> cnt;
        for(auto x:p) cnt[x]++;

        int t=cnt.size();
        int succ=0;
        for(int i=0, j=0;i<s.size();++i){
            cnt[s[i]]--;
            if(cnt[s[i]] == 0) succ++;

            while(i-j+1>p.size()){
                if(cnt[s[j]] ==0) succ--;
                cnt[s[j]]++;
                j++;
            }

            if(succ == t) res.push_back(j);
        }
        return res;
    }
};


