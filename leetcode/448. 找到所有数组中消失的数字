448. 找到所有数组中消失的数字

给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。

找到所有在 [1, n] 范围之间没有出现在数组中的数字。

您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

示例:

输入:
[4,3,2,7,8,2,3,1]

输出:
[5,6]
------------------------  0405 / 2021/  self

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        int n=nums.size();

        // 1 2 2 3 3 4 7 8
        // 0 1 2 3 4 5 6 7      

        // 1 2 3 4 5 6 7 8

        unordered_set<int> s;
        for(auto x:nums) s.insert(x);

        for(int i=1;i<=n;++i)
            if(!s.count(i)) res.push_back(i);

        return res;

    }
};



-------------------------------   0405 / 2021/  yxc

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        // 将出现过的数标记为负数, 比如8出现，就将数组a[7]标记负数，因为8应该在数组的下标7位置

        for(auto x:nums) {
            x=abs(x);
            if(nums[x-1] > 0) nums[x-1] *= -1;
        }

        for(int i=0;i<nums.size();++i){
            if(nums[i] > 0) res.push_back(i+1);
        }

        return res;
    }
};




