给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。

为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。

例如:

输入:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

输出:
2

解释:
两个元组如下:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0


========================================

// 建立一个哈希映射，一个记录AB数组的组合和，和为key，出现的次数为value
// 计算CD数组的组合和，得到相反数，若该数存在于key中，即符合要求，将答案加上AB组合和中该数出现的次数(value)

class Solution 
{
public:
    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) 
    {

        int res=0;
        unordered_map<int,int> mp;
        for(auto a:A)
        {
            for(auto b:B)
            {
                mp[a+b]+=1;//统计ab出现的和的次数，
            }
        }

        for(auto c:C)
        {
            for(auto d:D)
            {
                int tmp=-(c+d);
                if(mp.count(tmp))
                {
                    res+=mp[tmp];
                }
            }
        }

        return res;
    }
};


