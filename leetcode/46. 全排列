46. 全排列

给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

-------------------------------------  0217 / 2021/ 


class Solution {
public:
    vector<vector<int>> res;
    vector<int>tmp;
    vector<bool> st;

    vector<vector<int>> permute(vector<int>& nums) {
        tmp=vector<int>(nums.size());
        st=vector<bool>(nums.size());
        dfs(nums, 0);
        return res;
    }

    void dfs(vector<int>& nums, int u)
    {
        if(u==nums.size())
        {
            res.push_back(tmp);
            return;
        }

        for(int i=0;i<nums.size();++i)
        {
            if(!st[i])
            {
                st[i]=true;
                tmp[u]=nums[i];
                dfs(nums, u+1);
                st[i]=false;
            }
        }
    }
};

--------------------- 0308 / 2021 


class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;
    vector<bool> st;

    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        tmp.resize(n);
        st.resize(n);
        dfs(nums, 0, tmp);
        return res;
    }

    void dfs(vector<int>& nums, int u, vector<int>& tmp)
    {
        if(u==nums.size()){
            res.push_back(tmp);
            return ;
        }

        for(int i=0; i<nums.size();++i)
        {
            if(!st[i])
            {
                st[i]=true;
                tmp[u]=nums[i];
                dfs(nums, u+1, tmp);
                st[i]=false;
                // tmp.pop_back();
            }
        }
    }
};



---------------------- 0701  / 2021/  

class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;
    bool st[10];
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        tmp.resize(n);
        dfs(nums, 0);
        return res;
    }

    void dfs(vector<int>& nums, int u){ // 枚举每个位置放的数，
        if(u==nums.size()){
            res.push_back(tmp);
            return ;
        }

        for(int i=0;i<nums.size();++i){
            if(!st[i]){
                st[i]=true;
                tmp[u]=nums[i];
                dfs(nums, u+1);//枚举下一个位置dfs下一层
                st[i]=false;
            }
        }
    }
};

