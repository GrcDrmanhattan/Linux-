460. LFU缓存


请你为 最不经常使用（LFU）缓存算法设计并实现数据结构。它应该支持以下操作：get 和 put。

get(key) - 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。
put(key, value) - 如果键已存在，则变更其值；如果键不存在，请插入键值对。
当缓存达到其容量时，则应该在插入新项之前，使最不经常使用的项无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除最久未使用的键。
「项的使用次数」就是自插入该项以来对其调用 get 和 put 函数的次数之和。使用次数会在对应项被移除后置为 0 。

 

进阶：
你是否可以在 O(1) 时间复杂度内执行两项操作？



######################################33 

Olgn

//0820 

struct Node
{
    int cnt;//频率
    int time;//访问时间
    int key;
    int val;
    Node(int _cnt,int _time,int _key,int _val):cnt(_cnt),time(_time),key(_key),val(_val){}

    bool operator<(const Node& rhs) const  //node类型的排序，频率小的在前，频率相等就最少访问的在前
    {
        if(rhs.cnt==cnt)
        {
            return time<rhs.time;
        }
        else
        {
            return cnt<rhs.cnt;
        }
    }

};

class LFUCache 
{
public:

    int cp;
    int time;
    unordered_map<int,Node> mp;
    set<Node> st;

    LFUCache(int capacity) 
    {
        cp=capacity;
        time=0;
        mp.clear();
        st.clear();
    }
    
    int get(int key) 
    {
        if(cp==0) return -1;
        auto it=mp.find(key);
        if(it!=mp.end())
        {
            Node tmp=it->second;
            
            st.erase(tmp);//从树中删除原来的节点
            //更新 节点
            tmp.cnt++;
            time++;
            tmp.time+=time;
            // 将新缓存重新放入哈希表和平衡二叉树中
            st.insert(tmp);
            it->second=tmp;
            
            return tmp.val;
        }
        else
        {
            return -1;
        }
    }
    
    void put(int key, int value) //插入元素
    {
        if(cp==0) return;
        auto it=mp.find(key);
        if(it!=mp.end())//已经存在进行更新
        {
            Node tmp=it->second;
            
            st.erase(tmp);

            tmp.cnt++;
            time++;
            tmp.time+=time;
            tmp.val=value;

            st.insert(tmp);
            it->second=tmp;
        }
        else //没有找到节点
        {
            if(mp.size()==cp)//已经满了，删除最近没有使用的
            {
                mp.erase(st.begin()->key);
                st.erase(st.begin());//
            }
            //下面的不需要else ，因为if结束后，都要执行的插入节点，
            Node newnode=Node(1,++time,key,value);
            st.insert(newnode);
            mp.insert(make_pair(key,newnode));
            
        }
    }
};


/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */





--------------------------------------------- 0126 / 2021  / yxc

两个双链表， 一个维护调用次数，一个维护多久使用


// 双链表维护使用(次数频率，调用次数)block节点的有序序列
// 在每一个block里有含有双链表存储，node节点，最近使用在队头，未使用在尾部


class LFUCache {
public:
    struct Node{ // blcok里面的双链表节点，链表头部是最近使用，尾部是最久使用
        int key,val;
        Node* left;
        Node* right;

        Node(int k, int v)
        {
            key=k, val=v;
            right=nullptr;
            left=nullptr;
        }
    };


    struct Block{ // 调用次数的双链表的节点
        int cnt;
        Node* head;
        Node* tail;

        Block* left;// block 双链表的左指针，右指针,哨兵，左右边界
        Block* right;

        Block(int c)
        {
            cnt=c;
            head=new Node(-1,-1);
            tail=new Node(-1, -1);

            head->right= tail;
            tail->left=head;

            left=right=nullptr;
        }

        ~Block()
        {
            delete head;
            delete tail;
        }

        void remove(Node* p)
        {
            p->right->left = p->left;
            p->left->right = p->right;
            
        }

        void insert(Node* p)
        {
            p->right = head->right;
            p->left = head;

            head->right->left = p;
            head->right = p;

        }

        bool empty()
        {
            return head->right == tail;
        }

    }*LB, *RB; // block双链表的哨兵
    
    void remove(Block* p)
    {
        p->right->left = p->left;
        p->left->right = p->right;
    }

    void insert(Block* p) // 在p的右侧插入一个新块
    {
        auto cur=new Block(p->cnt + 1);

        cur->right = p->right;
        cur->left = p;

        p->right->left = cur;
        p->right = cur;
    }

    int n;
    unordered_map<int, Block*> hash_b;
    unordered_map<int, Node*> hash_n;


    LFUCache(int capacity) {
        n=capacity;

        LB=new Block(0);
        RB=new Block(INT_MAX);
        LB->right = RB;
        RB->left = LB;
    }
    
    int get(int key) {
        if(hash_b.count(key) == 0) return -1;

        auto block=hash_b[key];
        auto node=hash_n[key];

        block->remove(node);
        // if(block->empty()) remove(block);

        if(block->right->cnt != block->cnt+1) insert(block);
        block->right->insert(node);

        hash_b[key]=block->right;

        if(block->empty()) remove(block);
        hash_n[key]=node;

        return node->val;
    }
    
    void put(int key, int value) {
        if(!n) return ;
        if(hash_b.count(key)==0)
        {
            if(hash_b.size()==n)
            {
                auto p=LB->right->tail->left;//第一个块里的双链表的最后一个节点
                LB->right->remove(p);

                if(LB->right->empty()) remove(LB->right);

                hash_b.erase(p->key);
                hash_n.erase(p->key);
                delete p;
            }

            auto p=new Node(key, value);
            if(LB->right->cnt >1) insert(LB); // 第一个块的次数大于1，说明没有使用次数为1的块，要新建一个块
            LB->right->insert(p);
            hash_n[key]=p;
            hash_b[key]=LB->right;
        }
        else
        {
            hash_n[key]->val=value;
            get(key);
        }
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
 
 


---------------------------------------- 0126 


class LFUCache {
public:
    struct Node{
        int key ;
        int val;
        Node* left;
        Node* right;

        Node(int k, int v)
        {
            key=k;
            val=v;
            left=right=nullptr;
        }
    };

    struct Block{
        int cnt;
        Block* left ;
        Block* right;

        Node* head;
        Node* tail;

        Block(int c)
        {
            cnt=c;
            left=right=nullptr;

            head=new Node(-1, -1);
            tail=new Node(-1, -1);

            head->right=tail;
            tail->left=head;
        }

        ~Block()
        {
            delete head;
            delete tail;
        }

        void insert(Node* p)
        {
            p->right=head->right;
            p->left=head;

            head->right->left=p;
            head->right=p;
        }

        void remove(Node* p)
        {
            p->left->right=p->right;
            p->right->left=p->left;
        }

        bool empty()
        {
            return head->right==tail;
        }

    }*Lb, *Rb;

    void insert(Block* p)
    {
        auto cur=new Block(p->cnt+1);

        cur->right=p->right;
        cur->left=p;

        p->right->left=cur;
        p->right=cur;
    }

    void remove(Block* p)
    {
        p->left->right=p->right;
        p->right->left=p->left;
    }
    

    int n;
    unordered_map<int ,Node*> hash_n;
    unordered_map<int, Block*> hash_b;


    LFUCache(int capacity) {
        n=capacity;
        Lb=new Block(0);
        Rb=new Block(INT_MAX);

        Lb->right=Rb;
        Rb->left=Lb;
    }
    
    int get(int key) {
        if(hash_b.count(key)==0) return -1;

        auto block=hash_b[key];
        auto node = hash_n[key];

        block->remove(node);

        if(block->right->cnt != block->cnt+1) insert(block);
        block->right->insert(node);

        hash_n[key]=node;
        hash_b[key]=block->right;

        if(block->empty()) remove(block);
        return node->val;
    }
    
    void put(int key, int value) {
        if(!n) return ;
        if(hash_b.count(key)==0)
        {
            if(hash_b.size()==n)
            {
                auto p=Lb->right->tail->left;
                Lb->right->remove(p);

                if(Lb->right->empty()) remove(Lb->right);

                hash_n.erase(p->key);
                hash_b.erase(p->key);
            }

            auto p=new Node(key, value);
            if(Lb->right->cnt>1) insert(Lb);
            Lb->right->insert(p);
            hash_b[key]=Lb->right;
            hash_n[key]=p;
        }
        else
        {
            hash_n[key]->val=value;
            get(key); // 在访问一次，频率就++
        }

    }
};



--------------------------------- 0226 / 2021 /  


class LFUCache {
public:
    struct Node{
        int key;
        int val;
        Node* left;
        Node* right;

        Node(int k , int v)
            :key(k), val(v), left(nullptr), right(nullptr){}
    };

    struct Block{
        int cnt;
        Block* left;
        Block* right;

        Node* head;
        Node* tail;

        Block(int c)
            :cnt(c), left(nullptr), right(nullptr)
            {
                head=new Node(-1, -1);
                tail=new Node(-1, -1);
                head->right=tail;
                tail->left=head;
            }

        ~Block(){
            delete head;
            delete tail;
        }

        void insert(Node* p)
        {
            p->right=head->right;
            p->left=head;

            head->right->left=p;
            head->right=p;
        }

        void remove(Node* p)
        {
            p->left->right=p->right;
            p->right->left=p->left;
        }

        bool empty()
        {
            return head->right==tail;
        }

    }*Lb, *Rb;

    void remove(Block *p)
    {
        p->left->right=p->right;
        p->right->left=p->left;
    }

    void insert(Block* p)
    {
        auto q=new Block(p->cnt+1);

        q->right=p->right;
        q->left=p;

        p->right->left=q;
        p->right=q;

    }

    int n;
    unordered_map<int ,Node*> hashnode;
    unordered_map<int, Block*> hashblock;

    LFUCache(int capacity) {
        n=capacity;
        Lb=new Block(0);
        Rb=new Block(INT_MAX);

        Lb->right=Rb;
        Rb->left=Lb;
    }
    
    int get(int key) {
        if(hashblock.count(key)==0) return -1;

        auto node=hashnode[key];
        auto block=hashblock[key];

        block->remove(node);

        if(block->right->cnt != block->cnt + 1) insert(block);
        block->right->insert(node);

        hashblock[key]=block->right;


        if(block->empty()) remove(block);
        return node->val;
    }
    
    void put(int key, int value) {
        if(!n) return ;
        if(hashblock.count(key)==0)
        {
            if(n==hashblock.size())
            {
                auto p=Lb->right->tail->left;
                Lb->right->remove(p);

                hashblock.erase(p->key);
                hashnode.erase(p->key);
            }

            auto p=new Node(key, value);
            if(Lb->right->cnt > 1) insert(Lb);
            Lb->right->insert(p);

            hashnode[key]=p;
            hashblock[key]=Lb->right;
        }
        else
        {
            hashnode[key]->val=value;
            get(key);
        }
    }
};


