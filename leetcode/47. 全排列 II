47. 全排列 II

给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。

 

示例 1：

输入：nums = [1,1,2]
输出：
[[1,1,2],
 [1,2,1],
 [2,1,1]]
示例 2：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

提示：

1 <= nums.length <= 8
-10 <= nums[i] <= 10


---------------------------------- 0217 / 2021/  


class Solution {
public:
    vector<vector<int>> res;
    vector<int> tmp;
    bool st[10];

    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        tmp=vector<int>(nums.size());
        dfs(nums, 0);
        return res;
    }

    void dfs(vector<int>& nums , int u) // dfs 看第u个位置可以放什么数字 ，搜索顺序，枚举每个位置可以哪个数
    {
        if(u==nums.size())
        {
            res.push_back(tmp);
            return;
        }

        for(int i=0;i<nums.size();++i)
        {
            if(i && nums[i]==nums[i-1] && !st[i-1]) continue; // nums[i-1]没有被用过，说明nums[i]不是第一个没有被用过的数，就跳过n[i]
            if(!st[i])
            {
                st[i]=true;
                tmp[u]=nums[i];
                dfs(nums, u+1);
                st[i]=false;
            }
        }
    }
};

