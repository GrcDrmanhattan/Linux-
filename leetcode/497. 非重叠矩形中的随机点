497. 非重叠矩形中的随机点
给定一个非重叠轴对齐矩形的列表 rects，写一个函数 pick 随机均匀地选取矩形覆盖的空间中的整数点。

提示：

整数点是具有整数坐标的点。
矩形周边上的点包含在矩形覆盖的空间中。
第 i 个矩形 rects [i] = [x1，y1，x2，y2]，其中 [x1，y1] 是左下角的整数坐标，[x2，y2] 是右上角的整数坐标。
每个矩形的长度和宽度不超过 2000。
1 <= rects.length <= 100
pick 以整数坐标数组 [p_x, p_y] 的形式返回一个点。
pick 最多被调用10000次。
 

示例 1：

输入: 
["Solution","pick","pick","pick"]
[[[[1,1,5,5]]],[],[],[]]
输出: 
[null,[4,1],[4,1],[3,3]]
示例 2：

输入: 
["Solution","pick","pick","pick","pick","pick"]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
输出: 
[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]
 

输入语法的说明：

输入是两个列表：调用的子例程及其参数。Solution 的构造函数有一个参数，即矩形数组 rects。pick 没有参数。参数总是用列表包装的，即使没有也是如此。
============================  2022 / / 0118  


// s随机的点要和矩形面积成正比，在数轴上长度表示面积，先随机在哪个矩形，然后随机在矩形中抽取点


class Solution {
public:
    int n;
    vector<vector<int>> rects;
    vector<int> s;

    Solution(vector<vector<int>>& _rects) {
        rects=_rects;
        n=rects.size();
        s.push_back(0);
        for(auto &x:rects){
            int dx=x[2]-x[0]+1;
            int dy=x[3]-x[1]+1;
            s.push_back(s.back() + dx * dy); // 存储面积的前缀和
        }

    }
    
    vector<int> pick() {
        int k = rand() % s.back() + 1;
        int l=0;
        int r=n;
        while(l<r){
            int mid=l+r>>1;
            if(s[mid] >= k) r=mid;
            else l=mid+1;
        }

        auto &x=rects[r-1]; // 矩形从0开始所以-1、
        int dx=x[2]-x[0]+1;
        int dy=x[3]-x[1]+1;
        return {rand() % dx + x[0], rand() % dy + x[1]};
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(rects);
 * vector<int> param_1 = obj->pick();
 */
 
 
