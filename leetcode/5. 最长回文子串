给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"

#####################################

// class Solution 
// {
// public:
//     string longestPalindrome(string s) //超出时间
//     {
//         int len=s.size();
//         if(len<2) return s;

//         string res=s.substr(0,1);
//         int maxlen=1;

//         for(int i=0;i<len;++i)
//         {
//             for(int j=i+1;j<len;++j)
//             {
//                 if(j-i+1>maxlen && helper(s,i,j))
//                 {
//                     maxlen=j-i+1;
//                     res=s.substr(i,maxlen);//从i开始截取maxlen长度的字符
//                 }
//             }
//         }

//         return res;
//     }

//     bool helper(string s,int l,int r)
//     {
//         while(l<r)
//         {
//             if(s[l]!=s[r])
//             {
//                 return false;
//             }
//             ++l;
//             --r;
//         }

//         return true;
//     }
// };


// class Solution
// {
// public:
//     string longestPalindrome(string s)
//     {
//         int n=s.size();
//         string res;
//         vector<vector<int>> dp(n,vector<int>(n));

//         for(int l=0;l<n;++l)//或者l=1 l<=n;然后下面的判断改为l==1,l==2
//         {
//             for(int i=0;i+l<n;++i)
//             {
//                 int j=i+l;

//                 if(l==0)
//                 {
//                     dp[i][j]=1;
//                 }
//                 else if(l==1)
//                 {
//                     if(s[i]==s[j])
//                     {
//                         dp[i][j]=1;
//                     }
//                 }
//                 else
//                 {
//                     if(s[i]==s[j] && dp[i+1][j-1]==1)
//                     {
//                         dp[i][j]=1;
//                     }
//                 }

//                 if(dp[i][j] && l+1 >res.size())
//                 {
//                     res=s.substr(i,l+1);
//                 }
//             }
//         }

//         return res;
//     }
// };


//0815 中心扩散 参考题解
//https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-fa-he-dong-tai-gui-hua-by-reedfa/


//没有理解，半懂

class Solution
{
public:
    string longestPalindrome(string s)
    {
        string res;
        int maxlen=0;
        int len=1;
        int n=s.size();
        if(n==0) return "";
        int maxstart=0;

        for(int i=0;i<n;++i)
        {
            int l=i-1;
            int r=i+1;

            while(l>=0 && s[l]==s[i])
            {
                len++;
                l--;
            }

            while(r<n && s[r]==s[i])
            {
                len++;
                r++;
            }

            while(l>=0 && r<n && s[l]==s[r])
            {
                len+=2;
                l--;
                r++;
            }

            if(len>maxlen)
            {
                maxlen=len;
                maxstart=l;
            }

            len=1;
        }

        res=s.substr(maxstart+1,maxlen);//cpp和java的substr函数不一样
        return res;
    }

};



------------------------------------- 0128 / 2021/ yxc 



// On^2
// 枚举


当长度是奇数时， l从i-1， r从i+1
当长度是偶数时， l从i，r从i+1





class Solution {
public:
    string longestPalindrome(string s) {
        string res;

        for(int i=0;i<s.size();++i)
        {
            int l=i-1;
            int r=i+1; 
            while(l>=0 && r<s.size() && s[l]==s[r]) l--,r++;
            if(res.size() < r-l-1) res=s.substr(l+1, r-l-1);

            l=i;
            r=i+1;
            while(l>=0 && r<s.size() && s[l]==s[r]) l--, r++;
            if(res.size() < r-l-1) res=s.substr(l+1, r-l-1);
        }

        return res;
    }
};



----------------------------- 0302/ 2021/  

On^2

class Solution {
public:
    string longestPalindrome(string s) {
        string res;

        for(int i=0;i<s.size();++i) // 枚举中心点i
        {
            int l=i-1;
            int r=i+1;
            while(l>=0 && r<s.size() && s[l]==s[r]) l--, r++;
            if(res.size() <  r-l-1) res=s.substr(l+1 ,r-l-1);

            l=i;
            r=i+1;
            while(l>=0 && r<s.size() && s[l]==s[r]) l--, r++;
            if(res.size() < r-l-1) res=s.substr(l+1, r-l-1);
        }

        return res;
    }
};



---------------------------- 0303 /2021/ 

// l+1, r-1 之间是回文
// 长度 r-1-(l+1)+1



class Solution {
public:
    string longestPalindrome(string s) {
        string res;
        for(int i=0;i<s.size();++i)
        {
            int l=i-1;
            int r=i+1;
            while(l>=0 && r<s.size() && s[l]==s[r]) l--, r++;
            if(res.size()<r-l-1) res=s.substr(l+1, r-l-1);

            l=i;
            r=i+1;
            while(l>=0 && r<s.size() && s[l]==s[r]) l--, r++;
            if(res.size() < r-l-1) res=s.substr(l+1, r-l-1);
        }

        return res;
    }
};


--------------- 0624 / /2021/  

5. 最长回文子串
class Solution {
public:
    string longestPalindrome(string s) {
        string res;
        for(int i=0;i<s.size();++i){
            int l=i-1;
            int r=i+1; // 枚举奇数
            while(l>=0 && r<s.size() && s[l]==s[r]) l--, r++;
            if(res.empty() || res.size() < r-l-1) res=s.substr(l+1, r-l-1);

            l=i;
            r=i+1; // 偶数情况
            while(l>=0 && r<s.size() && s[l]==s[r]) l--, r++;
            if(res.empty() || res.size() < r-l-1) res=s.substr(l+1, r-l-1);
        }
        return res;
    }
};


---------- 1024   /  
class Solution {
public:
    string longestPalindrome(string s) {
        string res;
        for(int i=0;i<s.size();++i){
            int l=i-1;
            int r=i+1;
            while(l>=0 && r<s.size() && s[l] == s[r]) {
                l--;
                r++;
            }
            if(res.empty() || res.size() < r-l-1) res=s.substr(l+1, r-l-1);

            l=i;
            r=i+1;
            while(l>=0 && r<s.size() && s[l] == s[r]) {
                l--;
                r++;
            }
            if(res.empty() || res.size() < r-l-1) res=s.substr(l+1, r-l-1);

        }

        return res;
    }
};

