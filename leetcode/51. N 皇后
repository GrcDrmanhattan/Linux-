51. N 皇后
 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。



上图为 8 皇后问题的一种解法。

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

 

示例：

输入：4
输出：[
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。

########################################################################

const int N=20;

char g[N][N];
bool col[N];
bool udg[N];
bool dg[N];

vector<vector<string>> res;
int t;

//0911 yxc

class Solution 
{
public:

    void dfs(int u)
    {
        if(u == t)//遍历到第n层，满足结果，
        {
            vector<string> tmp;
            for(int i = 0; i < t; i ++)
            {
                string l;
                for(int j = 0; j < t; j ++)
                {
                    l += g[i][j];
                }

                tmp.push_back(l);
            }

            res.push_back(tmp);
        }

        for(int i=0;i<t;++i)//未满足结果
        {
            if(!col[i] && !dg[u+i] && !udg[i-u+t])
            {
                g[u][i]='Q';
                col[i]=dg[u+i]=udg[i-u+t]=true;
                dfs(u+1);
                col[i]=dg[u+i]=udg[i-u+t]=false;//出dfs要回溯
                g[u][i]='.';

            }
        }

    }

    vector<vector<string>> solveNQueens(int n) 
    {
        res.clear();
        t=n;
        for(int i=0;i<n;++i)
        {
            for(int j=0;j<n;++j)
            {
                g[i][j]='.';
            }
        }

        dfs(0);
        return res;
    }
};





---------------------------------- 0128 / 2021/  

class Solution {
public:
    bool col[20],d[20],ud[20];
    char g[10][10] ;
    vector<vector<string>> res;
    int sz;

    vector<vector<string>> solveNQueens(int n) {
        sz=n;

        for(int i=0;i<n;++i)
            for(int j=0;j<n;++j) g[i][j]='.';

        dfs(0);
        return res;
    }

    void dfs(int u)
    {
        if(u==sz)
        {
            vector<string> tmp;
            
            for(int i=0;i<sz;++i)
            {
                string  t;
                for(int j=0;j<sz;++j) t+=g[i][j];
                tmp.push_back(t);
            }

            res.push_back(tmp);
        }

        for(int i=0;i<sz;++i)
        {
            if( !col[i] && !d[u+i] && !ud[u-i+sz])
            {
                g[u][i]='Q';
                col[i]=d[u+i]=ud[u-i+sz]=true;
                dfs(u+1);
                g[u][i]='.';
                col[i]=d[u+i]=ud[u-i+sz]=false;
            }
        }
    }
};


------------------------------ 0128 / yxc


class Solution {
public:
    bool col[20],d[20],ud[20];
  
    vector<vector<string>> res;
    vector<string> path;
    int sz;

    vector<vector<string>> solveNQueens(int n) {
        sz=n;

        path=vector<string>(n, string(n, '.'));

        dfs(0);
        return res;
    }

    void dfs(int u)
    {
        if(u==sz)
        {
           res.push_back(path);
           return ;
        }

        for(int i=0;i<sz;++i)
        {
            if( !col[i] && !d[u+i] && !ud[u-i+sz])
            {
                path[u][i]='Q';
                col[i]=d[u+i]=ud[u-i+sz]=true;
                dfs(u+1);
                path[u][i]='.';
                col[i]=d[u+i]=ud[u-i+sz]=false;
            }
        }
    }
};


