513. 找树左下角的值

给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:

输入:

    2
   / \
  1   3

输出:
1
 

示例 2:

输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

输出:
7
 

注意: 您可以假设树（即给定的根节点）不为 NULL。

---------------------------------- 0119 /2021 self   bfs

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        vector<vector<int>> res;

        while(q.size())
        {
            int n=q.size();
            vector<int> tmp; // 当队列不空，就用tmp填入队列中的元素 也就是为树的一层

            while(n--)
            {
                auto t= q.front();
                q.pop();
                tmp.push_back(t->val);

                if(t->left) q.push(t->left);
                if(t->right) q.push(t->right);
            }

            res.push_back(tmp);
        }

        return res.back()[0];
    }
};



------------ yxc  dfs / 2021 / 0119 


深度最大的一层中
先搜索左子树再右子树




class Solution {
public:
    int res;
    int maxd;

    int findBottomLeftValue(TreeNode* root) {
        dfs(root, 1);
        return res;
    }

    void dfs(TreeNode* rt, int d)
    {
        if(!rt) return ;
        if(d>maxd)
        {
            maxd=d;
            res=rt->val;
        }

        dfs(rt->left, d+1);// 对于每一个点先搜左子树，在dfs右子树，保证先搜到的就是每一行第一个节点
        dfs(rt->right, d+1);
    }
};





--------------------- 0121 / 2021 / self 



class Solution {
public:
    int maxd=0;
    int res=0;

    int findBottomLeftValue(TreeNode* root) {
        dfs(root, 1);
        return res;
    }

    void dfs(TreeNode* rt, int d)
    {
        if(!rt) return;

        if(d>maxd)
        {
            maxd=d;
            res=rt->val;
        }

        dfs(rt->left, d+1);
        dfs(rt->right, d+1);
    }
};



