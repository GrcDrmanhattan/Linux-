514. 自由之路

电子游戏“辐射4”中，任务“通向自由”要求玩家到达名为“Freedom Trail Ring”的金属表盘，并使用表盘拼写特定关键词才能开门。

给定一个字符串 ring，表示刻在外环上的编码；给定另一个字符串 key，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的最少步数。

最初，ring 的第一个字符与12:00方向对齐。您需要顺时针或逆时针旋转 ring 以使 key 的一个字符在 12:00 方向对齐，然后按下中心按钮，以此逐个拼写完 key 中的所有字符。

旋转 ring 拼出 key 字符 key[i] 的阶段中：

您可以将 ring 顺时针或逆时针旋转一个位置，计为1步。旋转的最终目的是将字符串 ring 的一个字符与 12:00 方向对齐，并且这个字符必须等于字符 key[i] 。
如果字符 key[i] 已经对齐到12:00方向，您需要按下中心按钮进行拼写，这也将算作 1 步。按完之后，您可以开始拼写 key 的下一个字符（下一阶段）, 直至完成所有拼写。
示例：

 


 
输入: ring = "godding", key = "gd"
输出: 4
解释:
 对于 key 的第一个字符 'g'，已经在正确的位置, 我们只需要1步来拼写这个字符。 
 对于 key 的第二个字符 'd'，我们需要逆时针旋转 ring "godding" 2步使它变成 "ddinggo"。
 当然, 我们还需要1步进行拼写。
 因此最终的输出是 4。
提示：

ring 和 key 的字符串长度取值范围均为 1 至 100；
两个字符串中都只有小写字符，并且均可能存在重复字符；
字符串 key 一定可以由字符串 ring 旋转拼出。


-------------------------- 0119 / 2021 / yxc  dp


// 可看成移动指针
// f[i][j] 表示已经输出了key前i个字母， 并且输出最后一个字母key[i]时，指针位于ring[j]的所有方案数最小值


// 状态数n^2, 转移是On， 时间n^3,
// 计算 最后一步是在ring[j]位置，以倒数第二步的位置为分界，分成不同的部分 
// f[i-1, k] + 1 + min(顺时针k到j， 逆时针k到j) 



class Solution {
public:
    int findRotateSteps(string ring, string key) {
        int n=ring.size();
        int m=key.size();
        ring = ' '+ring; // 坐标从1开始更方便，所以添加第0个字符设置为空
        key = ' ' + key;

        vector<vector<int>> f(m+1, vector<int>(n+1, 1e8));
        f[0][1] = 0;// 刚开始指针j位于ring的第一个字母 ，// 输出key的前0个字符，指针j位于ring的第一个字符，方案数为0，初始状态

        for(int i=1;i<=m;++i) // key
            for(int j=1;j<=n;++j) // ring
            {
                if(ring[j]==key[i])
                {
                    for(int k=1;k<=n;++k) // 枚举倒数第二个字母，从这个字母到j的位置
                    {
                        int t = abs(k-j);
                        f[i][j] = min(f[i][j] ,f[i-1][k] + 1 + min(t, n-t));
                    }
                }
            }

        int res=1e8;
        for(int i=1;i<=n;++i) res=min(res, f[m][i]);

        return res;
    }
};







 
