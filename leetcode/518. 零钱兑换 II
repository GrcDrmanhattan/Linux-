给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 

 

示例 1:

输入: amount = 5, coins = [1, 2, 5]
输出: 4
解释: 有四种方式可以凑成总金额:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

_________________________________完全背包问题

class Solution 
{
public:
    int change(int amount, vector<int>& coins) 
    {
        //最后要求的结果dp[n][amount]，其中 n 为 coins 数组的大小。
        //这里就是和01背包的不同点，这里是加的dp[i][j-coin[i]]，而01背包加的是dp[i-1][j-coin[i]]，一定要记着这一点
        //
        int n=coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1,0));
        for(int i=0;i<=n;++i) //<=
        {
            dp[i][0]=1;//初始化
        }

        for(int i=1;i<=n;++i)
        {
            for(int j=1;j<=amount;++j)
            {
                if(j-coins[i-1]<0)
                {
                    dp[i][j]=dp[i-1][j];
                }
                else
                {
                    dp[i][j]=dp[i-1][j]+dp[i][j-coins[i-1]];//就是不选和选相加，注意选时的硬币下标仍为i，
                    //因为硬币个数无限，这个硬币上次仍然可以选----==也是完全背包和01背包的唯一不同之处==）
                }
            }
        }

        return dp[n][amount];
    }
};
