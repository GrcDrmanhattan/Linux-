给你一个整数数组 arr 和一个整数 k ，其中数组长度是偶数，值为 n 。

现在需要把数组恰好分成 n / 2 对，以使每对数字的和都能够被 k 整除。

如果存在这样的分法，请返回 True ；否则，返回 False 。

 

示例 1：

输入：arr = [1,2,3,4,5,10,6,7,8,9], k = 5
输出：true
解释：划分后的数字对为 (1,9),(2,8),(3,7),(4,6) 以及 (5,10) 。
示例 2：

输入：arr = [1,2,3,4,5,6], k = 7
输出：true
解释：划分后的数字对为 (1,6),(2,5) 以及 (3,4) 。

===============================================================

//k=5 
//模运算：0，1，2，3，4，：0自己配对，1-4，2-3配对
//要配对，所以余数0的次数要偶数次，其余的次数要相等
const int maxn=1e5+40;
int cnt[maxn];
class Solution {
public:
    bool canArrange(vector<int>& arr, int k) 
    {
        int n=arr.size();
        for(int i=0;i<k;++i) cnt[i]=0;
        for(auto x:arr) cnt[(x % k + k) % k]++;
        
        if(cnt[0]%2==1) return false;//判断余数是0
        for(int i=1;i<k;++i)//判断余数是1-》k-1
        {
            if(cnt[i] != cnt[k-i])
                return false;
        }
        //当k是偶数，k/2配对k/2，也要偶数次，但如果不符合该情况，上面的两种判断也会判断出来
        return true;
    }
};
