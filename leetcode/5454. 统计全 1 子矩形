给你一个只包含 0 和 1 的 rows * columns 矩阵 mat ，请你返回有多少个 子矩形 的元素全部都是 1 。

 

示例 1：

输入：mat = [[1,0,1],
            [1,1,0],
            [1,1,0]]
输出：13
解释：
有 6 个 1x1 的矩形。
有 2 个 1x2 的矩形。
有 3 个 2x1 的矩形。
有 1 个 2x2 的矩形。
有 1 个 3x1 的矩形。
矩形数目总共 = 6 + 2 + 3 + 1 + 1 = 13 。

=====================================================

const int MAXN = 150+50;
int sum[MAXN];

class Solution 
{
public:
    //列和等于枚举的行数，表示这一列全为1
    // j-i+1
    //cnt 连续列为1的数目
    int numSubmat(vector<vector<int>>& mat) 
    {
        int res=0;
        int n=mat.size();
        int m=mat[0].size();
        for(int i=0;i<n;++i)// 枚举上边界
        {
            for(int k=0;k<m;++k) 
            {
                sum[k]=0;
            }
            for(int j=i;j<n;++j)//枚举行下边界
            {
                for(int k=0;k<m;++k)
                {
                    sum[k]+=mat[j][k];
                }
                int cur=j-i+1;
                int cnt=0;
                for(int k=0;k<m;++k)
                {
                    if(sum[k]==cur)
                    {
                        ++cnt;
                        res+=cnt;
                    }
                    else 
                    {
                        cnt=0;
                    }
                }
            }
        }
        
        return res;
    }
};

