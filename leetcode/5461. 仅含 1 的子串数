给你一个二进制字符串 s（仅由 '0' 和 '1' 组成的字符串）。

返回所有字符都为 1 的子字符串的数目。

由于答案可能很大，请你将它对 10^9 + 7 取模后返回。

 

示例 1：

输入：s = "0110111"
输出：9
解释：共有 9 个子字符串仅由 '1' 组成
"1" -> 5 次
"11" -> 3 次
"111" -> 1 次
示例 2：

输入：s = "101"
输出：2
解释：子字符串 "1" 在 s 中共出现 2 次
示例 3：

输入：s = "111111"
输出：21
解释：每个子字符串都仅由 '1' 组成

====================================================
像这种求连续包含1的数目的题，表面是人类的思考方式，先找单个的，在找2个的，在找3个的，。。。。。。。
其实可以求连续的数目是多少，累加到结果，就是所求了

const int mod=1e9+7;
//连续的1是多少个就加入答案中，就对答案贡献多少，就是所求的了，相当于分别求有几个连续是1的子字符串的数目
//cnt连续的1的个数
//到这位，连续的1的数是多少，对答案贡献就多少，已经包含了连续的子字符串的数目
class Solution 
{
public:
    int numSub(string s) 
    {
        int res=0;
        int n=s.size();
        //子字符串是连续的
        int cnt=0;
        for(int i=0;i<n;++i)
        {
            if(s[i]=='1')
            {
                cnt++;//统计连续的1的个数，加入结果
                res=(res+cnt)%mod;//避免数过大
            }
            else
            {
                cnt=0;
            }            
        }
        
        return res;
    }
};


