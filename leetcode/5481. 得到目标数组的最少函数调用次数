5481. 得到目标数组的最少函数调用次数

给你一个与 nums 大小相同且初始值全为 0 的数组 arr ，请你调用以上函数得到整数数组 nums 。

请你返回将 arr 变成 nums 的最少函数调用次数。

答案保证在 32 位有符号整数以内。

 

示例 1：

输入：nums = [1,5]
输出：5
解释：给第二个数加 1 ：[0, 0] 变成 [0, 1] （1 次操作）。
将所有数字乘以 2 ：[0, 1] -> [0, 2] -> [0, 4] （2 次操作）。
给两个数字都加 1 ：[0, 4] -> [1, 4] -> [1, 5] （2 次操作）。
总操作次数为：1 + 2 + 2 = 5 。
示例 2：

输入：nums = [2,2]
输出：3
解释：给两个数字都加 1 ：[0, 0] -> [0, 1] -> [1, 1] （2 次操作）。
将所有数字乘以 2 ： [1, 1] -> [2, 2] （1 次操作）。
总操作次数为： 2 + 1 = 3 。
示例 3：

输入：nums = [4,2,5]
输出：6
解释：（初始）[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5] （nums 数组）。
示例 4：

输入：nums = [3,2,2,4]
输出：7

####################################


//反操作：二进制
// -1 ：最末尾的1变成0，也就是二进制数中1的个素
// /2 ： 去掉最末尾的1，nums最大的数/2的次数、和数组·最大数有关
//也就是✖️2 操作可以一起做

class Solution 
{
public:
    int minOperations(vector<int>& nums) 
    {
        int cnt=0;//对大乘2 的数目
        int cnt1=0;//加1的次数

        for(auto x: nums)
        {
            int tmp=0;
            while(x>0)
            {
                if(x%2==1) 
                {
                    cnt1++;//奇数 加一的次数增加
                    x-=1;
                }
                else
                {
                    tmp++;
                    x/=2;
                } 
            }
    
            cnt=max(cnt,tmp);//记录最大的数 需要乘2的次数
        }
        
        return cnt+cnt1;
    }
};

