给你两个正整数 n 和 k，二进制字符串  Sn 的形成规则如下：

S1 = "0"
当 i > 1 时，Si = Si-1 + "1" + reverse(invert(Si-1))
其中 + 表示串联操作，reverse(x) 返回反转 x 后得到的字符串，而 invert(x) 则会翻转 x 中的每一位（0 变为 1，而 1 变为 0）

例如，符合上述描述的序列的前 4 个字符串依次是：

S1 = "0"
S2 = "011"
S3 = "0111001"
S4 = "011100110110001"
请你返回  Sn 的 第 k 位字符 ，题目数据保证 k 一定在 Sn 长度范围以内。

 

示例 1：

输入：n = 3, k = 1
输出："0"
解释：S3 为 "0111001"，其第 1 位为 "0" 。
示例 2：

输入：n = 4, k = 11
输出："1"
解释：S4 为 "011100110110001"，其第 11 位为 "1" 。
示例 3：

输入：n = 1, k = 1
输出："0"
#######################################

class Solution {
public:
    char findKthBit(int n, int k) 
    {
        if(n==1) return '0';
        
        string res[22];
        res[1]="0";
        
       for(int i=2;i<=20;++i)
       {
           res[i]=res[i-1]+"1";
         
           string tmp=res[i-1];
           for (auto& c : tmp) 
           {
               if (c == '0') c = '1'; else c = '0';
           }
           reverse(tmp.begin(), tmp.end());
           
           res[i]+=tmp;
       }
        
        
       return res[n][k-1]; 
    }

};
