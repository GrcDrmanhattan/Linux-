56. 合并区间

给出一个区间的集合，请合并所有重叠的区间。

 

示例 1:

输入: intervals = [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: intervals = [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

########################

// class Solution 
// {
// public:
//     vector<vector<int>> merge(vector<vector<int>>& intervals) 
//     {
//         if(intervals.size()==0 || intervals.size()==1) return intervals;
//         sort(intervals.begin(),intervals.end());

//         vector<vector<int>> res;
//         for(int i=0;i<intervals.size();++i)
//         {
//             int l=intervals[i][0];
//             int r=intervals[i][1];//左右边界当前的

//             if(!res.size() || l>res.back()[1]) res.push_back({l,r});//当前的左边界大于res末尾数组的右边界，没有重合，加入结果
//             else
//             {   //有重合，更新末尾数组的右边界
//                 res.back()[1]=max(res.back()[1],r);
//             }

//         }
//         return res;

//     }
// };

//  0817 

class Solution
{
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals)
    {
        int n=intervals.size();
        if(n==0 || n==1) return intervals;
        vector<vector<int>> res;
        sort(intervals.begin(),intervals.end());

        for(int i=0;i<n;++i)
        {
            int l=intervals[i][0];
            int r=intervals[i][1];

            if(res.size()==0 || l>res.back()[1])
            {
                res.push_back({l,r});
            }
            else
            {
                res.back()[1]=max(res.back()[1],r);//重合了，需要更新右坐标
            }
        }

        return res;
    }
};

