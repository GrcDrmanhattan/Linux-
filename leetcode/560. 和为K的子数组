560. 和为K的子数组

给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。

------------------------- 0405 / 2021/ yxc 


// 前缀和
// 枚举终点i， 有多少个起点j使得j+1到i之间满足和为k

// 也就是s[i] - s[j] = k
// 转换为求 s[j] = s[i] -k, j从0到i-1，看有多少个前缀和是si-k的

// 时间On



class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> s(n+1); // 前缀和数组
        for(int i=1;i<=n;++i) s[i]=s[i-1] + nums[i-1];

        unordered_map<int ,int > hash;

        hash[0]=1;// 和为0出现一次
        int res=0;

        for(int i=1;i<=n;++i){
            res += hash[s[i] - k];
            hash[s[i]]++;
        }

        return res;
    }
};


----------------- 0731 / 2021 

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        vector<int> s(n+1);//前缀和数组，si表示前i个数的和
        for(int i=1;i<=n;++i) s[i] = s[i-1] + nums[i-1];//前i个数和等于前i-1个数和加上当前的数
        unordered_map<int, int> cnt;
        cnt[0]=1;
        int res=0;
        for(int i=1;i<=n;++i){
            res += cnt[s[i]-k];
            cnt[s[i]]++;
        } 

        return res;
    }
};


