5763. 哪种连续子字符串更长

给你一个二进制字符串 s 。如果字符串中由 1 组成的 最长 连续子字符串 严格长于 由 0 组成的 最长 连续子字符串，返回 true ；否则，返回 false 。

例如，s = "110100010" 中，由 1 组成的最长连续子字符串的长度是 2 ，由 0 组成的最长连续子字符串的长度是 3 。
注意，如果字符串中不存在 0 ，此时认为由 0 组成的最长连续子字符串的长度是 0 。字符串中不存在 1 的情况也适用此规则。

 

示例 1：

输入：s = "1101"
输出：true
解释：
由 1 组成的最长连续子字符串的长度是 2："1101"
由 0 组成的最长连续子字符串的长度是 1："1101"
由 1 组成的子字符串更长，故返回 true 。
示例 2：

输入：s = "111000"
输出：false
解释：
由 1 组成的最长连续子字符串的长度是 3："111000"
由 0 组成的最长连续子字符串的长度是 3："111000"
由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。
示例 3：

输入：s = "110100010"
输出：false
解释：
由 1 组成的最长连续子字符串的长度是 2："110100010"
由 0 组成的最长连续子字符串的长度是 3："110100010"
由 1 组成的子字符串不比由 0 组成的子字符串长，故返回 false 。
 

提示：

1 <= s.length <= 100
s[i] 不是 '0' 就是 '1'


---------------------- 0523 /  2021/  self 242 周赛 1 

class Solution {
public:
    bool checkZeroOnes(string s) {
        
        int l1=0;
        int l2=0;
        for(int i=0;i<s.size();++i){
            if(s[i] != '1') continue;
            int j=i;
            while(j<s.size() && s[j] == '1') j++;
            l1=max(l1, j-i);
        }
        
        for(int i=0;i<s.size();++i){
            if(s[i] != '0') continue;
            int j=i;
            while(j<s.size() && s[j] == '0') j++;
            l2=max(l2, j-i);
        }
        
        return l1 > l2;
    }
};


------------------------- yxc

class Solution {
public:
    bool checkZeroOnes(string s) {
        int one=0;
        int zero =0 ;
        int s1=0;
        int s0=0;
        
        for(auto x:s){
            if(x=='0') s0++, s1=0;
            else s1++, s0=0;
            
            one=max(one, s1);
            zero=max(zero, s0);
        }
        
        return one > zero;
    }
};


