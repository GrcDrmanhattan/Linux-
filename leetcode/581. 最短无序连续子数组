581. 最短无序连续子数组

给你一个整数数组 nums ，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。

请你找出符合题意的 最短 子数组，并输出它的长度。

 

示例 1：

输入：nums = [2,6,4,8,10,9,15]
输出：5
解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。
示例 2：

输入：nums = [1,2,3,4]
输出：0
示例 3：

输入：nums = [1]
输出：0
 

提示：

1 <= nums.length <= 104
-105 <= nums[i] <= 105
 

进阶：你可以设计一个时间复杂度为 O(n) 的解决方案吗？

-------------------------- 0404 / 2021/  yxc 

时间On




class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n=nums.size();
        int l=0;
        int r=n-1;
        while(l+1<n && nums[l+1] >= nums[l]) l++;
        if(l==r) return 0;

        while(r-1>=0 && nums[r-1] <= nums[r]) r--;

        for(int i=l+1;i<n;++i)
            while(l>=0 && nums[i] < nums[l]) l--;
        
        for(int i=r-1;i>=0;--i)
            while(r<n && nums[i] > nums[r]) r++;
        
        return r-l-1;
    }
};

-------------------- 0731 / 2021  

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n=nums.size();
        int l=0;
        int r=n-1;
        while(l+1< n && nums[l] <= nums[l+1]) l++;
        if(l==r) return 0;
        while(r>=0 && nums[r] >= nums[r-1]) r--;

        for(int i=l+1;i<n;++i)
            while(l>=0 && nums[i] < nums[l]) l--;

        for(int i=r-1;i>=0;--i)
            while(r<n && nums[i] > nums[r]) r++;

        return r-l-1;
    }
};



----------------- 0801 / 2021 



class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n=nums.size();
        int l=0;
        int r=n-1;
        while(l+1<n && nums[l] <= nums[l+1]) l++;
        if(l==r) return 0;
        while(r>=0 && nums[r] >= nums[r-1]) r--;

        for(int i=l+1;i<n;++i)
            while(l>=0 && nums[i] < nums[l]) l--; //nums[l]要小于右侧的最小值，也就是小于右侧的所有值，所以只要找到一个不满足的，就l--

        for(int i=r-1;i>=0;--i)
            while(r<n && nums[i] > nums[r]) r++;//n[r]要大于左侧的最大值，相当于大于左侧所有的数，所以找到一个不满足的就移动r

        return r-l-1;
    }
};


--------------------------

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        const int n=nums.size();
        int l=0;
        int r=n-1;
        while(l+1<n && nums[l] <= nums[l+1]) l++;
        if(l==r) return 0;
        while(r>=0 && nums[r-1] <= nums[r]) r--;

        for(int i=l+1;i<n;++i)
            while(l>=0 && nums[l] > nums[i]) l--;

        for(int i=r-1;i>=0;--i)
            while(r<n && nums[r] < nums[i]) r++;

        return r-l-1;//长度在l+1，到r-1之间 r-1-（l+1）+1
    }
};



---------------- 0801  / 2021  

//中段数组虽是无序的，但满足最小值大于左段的最大值，最大值小于右段的最小值。 

// 要使得左边最大值小于右边最小值，这样排序后才可以保证左边不变

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        const int n=nums.size();
        int l=0;
        int r=n-1;
        while(l+1<n && nums[l] <= nums[l+1]) l++;
        if(l==r) return 0;

        while(r>=0 && nums[r] >= nums[r-1]) r--;
        // 找到中间的左右边界
        for(int i=l+1;i<n;++i)
            while(l>=0 && nums[l] > nums[i]) l--;
        
        for(int i=r-1;i>=0;--i)
            while(r<n && nums[r] < nums[i]) r++;

        return r-l-1;
    }
};


