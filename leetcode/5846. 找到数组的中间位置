5846. 找到数组的中间位置

给你一个下标从 0 开始的整数数组 nums ，请你找到 最左边 的中间位置 middleIndex （也就是所有可能中间位置下标最小的一个）。

中间位置 middleIndex 是满足 nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1] 的数组下标。

如果 middleIndex == 0 ，左边部分的和定义为 0 。类似的，如果 middleIndex == nums.length - 1 ，右边部分的和定义为 0 。

请你返回满足上述条件 最左边 的 middleIndex ，如果不存在这样的中间位置，请你返回 -1 。

 

示例 1：

输入：nums = [2,3,-1,8,4]
输出：3
解释：
下标 3 之前的数字和为：2 + 3 + -1 = 4
下标 3 之后的数字和为：4 = 4
示例 2：

输入：nums = [1,-1,4]
输出：2
解释：
下标 2 之前的数字和为：1 + -1 = 0
下标 2 之后的数字和为：0
示例 3：

输入：nums = [2,5]
输出：-1
解释：
不存在符合要求的 middleIndex 。
示例 4：

输入：nums = [1]
输出：0
解释：
下标 0 之前的数字和为：0
下标 0 之后的数字和为：0
 

提示：

1 <= nums.length <= 100
-1000 <= nums[i] <= 1000


--------------- 0905 / 2021  sf 60 lc 双周赛  1

class Solution {
public:
    int findMiddleIndex(vector<int>& nums) {
        const int n=nums.size();
        vector<int> w(n+1);
    
        for(int i=1;i<=n;++i) w[i] = w[i-1] + nums[i-1]; // 前缀和就是对应下标从0到n-1，
        
        vector<int> s(n+1);
        
        for(int i=n-2;i>=0;--i) s[i] += s[i+1] + nums[i+1]; // 后缀和 对应下标从n-1到0，
        
        for(int i=0;i<n;++i){
            if(w[i] == s[i] ) return i;
        }
        
        return -1;
    }
};


------------ yxc

class Solution {
public:
    int findMiddleIndex(vector<int>& nums) {
        int n = nums.size();
        vector<int> s(n + 2);
        for (int i = 1; i <= n; i ++ ) s[i] = s[i - 1] + nums[i - 1];
        s[n + 1] = s[n];
        for (int i = 1; i <= n; i ++ )
            if (s[i - 1] == s[n] - s[i])
                return i - 1;
        return -1;
    }
};




