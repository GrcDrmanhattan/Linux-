589. N 叉树的前序遍历

给定一个 N 叉树，返回其节点值的 前序遍历 。

N 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 null 分隔（请参见示例）。

 

进阶：

递归法很简单，你可以使用迭代法完成此题吗?

 

示例 1：



输入：root = [1,null,3,2,4,null,5,6]
输出：[1,3,5,6,2,4]
示例 2：


输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出：[1,2,3,6,7,11,14,4,8,12,5,9,13,10]
 

提示：

N 叉树的高度小于或等于 1000
节点总数在范围 [0, 10^4] 内

--------------------- 0305  / 2021  // 

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<int>res;

    vector<int> preorder(Node* root) {
        dfs(root);
        return res;    
    }

    void dfs(Node* u)
    {
        if(!u) return ;
        res.push_back(u->val);
        for(auto c:u->children) dfs(c);
    }
};

------------------------ 0305 / 2021  


// 时间空间ON


class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> res;
        if(!root) return res;
        stack<pair<Node*, int>> st;
        st.push({root, 0});

        while(st.size())
        {
            auto t=st.top();
            st.pop();
            
            if(t.second==0)
                res.push_back(t.first->val);

            if(t.second < t.first->children.size())
            {
                st.push({t.first, t.second+1});
                st.push({t.first->children[t.second], 0});
            }
        }

        return res;
    }
};

--------- yxc

class Solution {
public:
    vector<int> res;
    vector<int> preorder(Node* root) {
        dfs(root);
        return res;
    }

    void dfs(Node* p){
        if(!p) return ;
        res.push_back(p->val);
        for(auto x:p->children) dfs(x);
    }
};



