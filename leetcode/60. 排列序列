60. 排列序列

给出集合 [1,2,3,...,n]，其所有元素共有 n! 种排列。

按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：

"123"
"132"
"213"
"231"
"312"
"321"
给定 n 和 k，返回第 k 个排列。

 

示例 1：

输入：n = 3, k = 3
输出："213"
示例 2：

输入：n = 4, k = 9
输出："2314"
示例 3：

输入：n = 3, k = 1
输出："123"
 

提示：

1 <= n <= 9
1 <= k <= n!

------------------------- 0217 / 2021/  yxc 


时间O(n! * k )

class Solution {
public:
    string getPermutation(int n, int k) {
        string res;
        for(int i=1;i<=n;++i) res+=to_string(i); // 初始的第一个排列

        for(int i=0;i<k-1;++i) // 从初始向后k-1个就是第k个全排列
        {
            next_permutation(res.begin(), res.end());
        }
        
        return res;
    }
};



------------------------- 0218 / 


// 有n位，最坏要在每一位上遍历所有的n个数， 时间On^2

class Solution {
public:
    
    string getPermutation(int n, int k) {
        
        string res; 
        vector<bool>st(10);

        for(int i=0;i<n;++i)// 枚举每一位
        {
            int fact=1;
            for(int j=1;j<= n-i-1; ++j) fact *= j; // 当前位填好数后，余下的位还有fact种可能

            for(int j=1;j<=n;++j) // 枚举当前i位可以放哪个数
            {
                if(!st[j]){
                    if(fact < k) k -= fact; // 当前位填好数后，余下的位还有fact种可能的数目不满足k， 
                    else{
                        res += to_string(j);
                        st[j]=true;
                        break;
                    }
                }
            }
        }

        return res;
    }
};




