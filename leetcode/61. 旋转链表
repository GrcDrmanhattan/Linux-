给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

==========================================================

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
// class Solution 
// {
// public:
//     ListNode* rotateRight(ListNode* head, int k) 
//     {       //官方题解
//         // if(k==0) return head;
//         if(!head || !head->next) return head;
//         int n;
//         //求长度套路步骤
//         ListNode* oldtail=head; //未进入循环，oldtail指向第一个元素(head)
//         for(n=1;oldtail->next!=NULL;++n )
//         {
//             oldtail=oldtail->next; //for结束，找到了oldtail的位置，n就是长度，进入循环后，n=1，指针在第2个元素，所以在最后时，n时长度
//         }
//         oldtail->next=head; // 形成闭合

//         ListNode* newtail=head; //未进入循环head是第一个元素，进入后i=0时，newtail指向第二个，到循环结束，newtail指向新的尾部，
//         for(int i=0;i<n-k%n-1;++i)
//         {
//             newtail=newtail->next;  //找到新的尾，i从0开始结束时，位置就是n-k%n-1，
//         }
//         ListNode* newhead=newtail->next; //新的尾的下一个是新的head
 
//         newtail->next=NULL; //尾后链接空节点

//         return newhead;
//     }
// };

class Solution
{
public:
    ListNode* rotateRight(ListNode* head, int k)
    {
        if(!head || !head->next) return head;

        ListNode* oldtail=head;
        int len=1;//len是表长度
        while(oldtail->next)
        {
            ++len;
            oldtail=oldtail->next;
        }

        oldtail->next=head;//形成环

        ListNode* newtail=head;
        for(int i=0;i<len-k%len-1;++i)
        {
            newtail=newtail->next;//找到了新的表尾是newtail
        }

        ListNode* newhead=newtail->next;//新的表头在新表尾后
        newtail->next=NULL;

        return newhead;
    }
};


------------------------  1226/2020 /yxc

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


//   也就是将后面的k个节点移动到左边
//   需要改变三个节点 
//   原链表的尾节点、head、前面第n-k个节点的指针



class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head) return head;

        int l=0;
        ListNode* tail;

        for(auto p=head;p;p=p->next)
        {
            tail=p;
            l++;
        }

        k%=l;
        if(!k) return head;

        auto p=head;
        for(int i=0;i<l-k-1;++i) // 倒数第k个节点第前一个节点，也就是前面第n-k个
        {
            p=p->next;
        }

        tail->next= head;
        head=p->next;
        p->next=nullptr;

        return head;
    }
};



