一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？

输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右


=================================== 动态规划，相当于填充一个表格，依据原来的图，填充一个新的表格


//未补充边界，相当于填和原来一样的表格

class Solution
{
public:
    int uniquePaths(int m, int n)
    {
        vector<vector<int>> dp(n,vector<int>(m,1));//相当于已经把第一个位置初始化为1了
        // for(int i=0;i<n;++i) dp[i][0]=1;
        // for(int i=0;i<m;++i) dp[0][i]=1;
        for(int i=1;i<n;++i)
        {
            for(int j=1;j<m;++j)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }

        return dp[n-1][m-1];//未补充边界返回的是前一个
    }
};

=============================补充边界相当于填充多一行一列的表格，符合人类从0开始的计数

class Solution
{
public:
    int uniquePaths(int m, int n)
    {
        //先多补充一行一列，保证后面遍历ij从1开始时，可以遍历到nm，符合规律
        //第ij就是第ij个，而不是i-1，j-1个，避免了，数组从0开始的问题
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
        for(int i=1;i<=n;++i)
        {
            for(int j=1;j<=m;++j)
            {
                if(i==1&&j==1) dp[i][j]=1;//首先把相当于原图第一行第一列的位置写1
                else//然后填表格
                {
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
               
            }
        }

        return dp[n][m];//补充边界后，返回的就是正常的顺序了
    }
};


------------------------------------ 0202 /2021 / yxc


class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> f(m, vector<int>(n));

        for(int i=0;i<m;++i)
            for(int j=0;j<n;++j)
                if(i==0 && j==0) f[i][j]=1;
                else
                {
                    if(i) f[i][j] += f[i-1][j]; // 只要i不为0，就可以从上面过来
                    if(j) f[i][j] += f[i][j-1]; // 只要j不为0，就可以从左边过来
                }

        return f[m-1][n-1];

    }
};


---------------------------- 0310 / 2021/ 


class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> f(m, vector<int>(n));
        for(int i=0;i <m;++i)
            for(int j=0; j<n;++j)
            {
                if(!i && !j) f[i][j]=1;
                else{
                    if(i) f[i][j] += f[i-1][j];
                    if(j) f[i][j] += f[i][j-1];
                }
            }

        return f[m-1][n-1];
    }
};


------------------------ 0311 / 2021 
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> f(m, vector<int>(n));

        for(int i=0;i<m;++i)
            for(int j=0;j<n;++j)
            {
                if(!i && !j) f[i][j]=1;
                else{
                    if(i) f[i][j] +=f[i-1][j];
                    if(j) f[i][j] += f[i][j-1];
                }
            }
        
        return f[m-1][n-1];
    }
};


