622. 设计循环队列

设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。

循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。
但是使用循环队列，我们能使用这些空间去存储新的值// 空 hh==tt
// 满 tt==h-1
// 其余从h到t-1的存储数字，t不存数字，因此多开一个长度

class MyCircularQueue {
public:
    int hh=0;
    int tt=0;
    vector<int> q;

    MyCircularQueue(int k) {
        q.resize(k+1);
    }
    
    bool enQueue(int value) {
        if(isFull()) return false;
        q[tt++]=value;
        if(tt==q.size()) tt=0;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()) return false;
        hh++;
        if(hh==q.size()) hh=0;
        return true;
    }
    
    int Front() {
        if(isEmpty()) return -1;
        return q[hh];
    }
    
    int Rear() {
        if(isEmpty()) return -1;
        int t=tt-1;
        if(t<0) t+=q.size();
        return q[t];
    }
    
    bool isEmpty() {
        return hh==tt;
    }
    
    bool isFull() {
        return(tt+1+q.size()) % q.size() == hh;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
 
 

--------------- 1027  

class MyCircularQueue {
public:
    int hh=0;
    int tt=0;
    vector<int> q;

    MyCircularQueue(int k) {
        q.resize(k+1);
    }
    
    int get(int x){
        return (x+q.size()) % q.size();
    }

    bool enQueue(int value) {
        if(isFull()) return false;
        q[tt]=value;
        tt=get(tt+1);
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()) return false;
        hh=get(hh+1);
        return true;
    }
    
    int Front() {
        if(isEmpty()) return -1;
        return q[hh];
    }
    
    int Rear() {
        if(isEmpty()) return -1;
        return q[get(tt-1)];
    }
    
    bool isEmpty() {
        return hh==tt;
    }
    
    bool isFull() {
        return get(hh-1) == tt;
    }
};


