628. 三个数的最大乘积

给你一个整型数组 nums ，在数组中找出由三个数组成的最大乘积，并输出这个乘积。

 

示例 1：

输入：nums = [1,2,3]
输出：6
示例 2：

输入：nums = [1,2,3,4]
输出：24
示例 3：

输入：nums = [-1,-2,-3]
输出：-6
 

提示：

3 <= nums.length <= 104
-1000 <= nums[i] <= 1000

------------------------------ 0319  / 2021/  yxc 

先排序，要么是最大的三个数乘积，
要么就是两个最小的负数，和最大的正数乘积


线性扫描的时间复杂度是 O(n)；排序的时间复杂度是 O(nlogn)


三个数，要么
正 正正 ：最大的三个数
正正负： 说明只有三个数，也可以看成选择最大的三个数

正负负：最大正数，最小的两个负数
负负负：说明也就数组全部都是负数， 乘积绝对值越小的数越大，排序后也就是选择最大的三个数，

所以可以归为两种情况
如果数组中有0，也被包含在上面两个情况里


class Solution {
public:
    int maximumProduct(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n=nums.size();

        return max(nums[n-1] * nums[n-2] * nums[n-3], nums[0] * nums[1] * nums[n-1]);
    }
};


