一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？



网格中的障碍物和空位置分别用 1 和 0 来表示。

说明：m 和 n 的值均不超过 100。

示例 1:

输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2
解释:
3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右


=======================填表格问题 

===============填充边界

//相当于根据原来的3x3 的图 ，填表4x4 ，多补充一行一列，这样就可以从1开始的顺序遍历图了，第一行第一列相当于原来的0行0列
//先判断原来地图第一个是否是障碍，
//然后初始化，ij从1开始
//把i=1，j=1位置路线数添为1
//然后判断和ij位置对应的原来图上的i-1，j-1位置是否是障碍
//递归就可以

class Solution 
{
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        if (obstacleGrid[0][0] == 1) return 0;
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();

        vector<vector<int>> dp(m+1,vector<int>(n+1,0));//初始化0，第0行0列单独初始化
        for(int i=1;i<=m;++i)//第1行到第m行
        {
            for(int j=1;j<=n;++j)//第1列到第n列
            {
                if(i==1 && j==1)
                {
                    dp[i][j]=1;
                }
                else if(obstacleGrid[i-1][j-1]==1)//如果对应原来的图上的位置是障碍，路线就为0
                {
                    dp[i][j]=0;
                }
                else
                {
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        
        return dp[m][n];
    }
};

==========================// 未填充边界
class Solution
{
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid)
    {
        if(obstacleGrid[0][0]==1) return 0;
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();

        vector<vector<int>> dp(m,vector<int>(n,0));//初始化0，第0行0列单独初始化
        for(int i=0;i<m && obstacleGrid[i][0]==0;++i) dp[i][0]=1;//因为后面循环从0开始出错，所以要先初始化0hang和0列
        for(int i=0;i<n && obstacleGrid[0][i]==0;++i) dp[0][i]=1;
        dp[0][0]=1;//初始化新建表格的第一个

        for(int i=1;i<m;++i)
        {
            for(int j=1;j<n;++j)
            {
                
                if(obstacleGrid[i][j]==1)
                {
                    dp[i][j]=0;
                }
                else{
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];//循环i如果从0开始，dp[i-1]会出错
                }
            }
        }

        return dp[m-1][n-1];
    }
};



-------------------------------------- 0202 /2021 / yxc 


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& g) {
        int n=g.size();
        int m=g[0].size();

        vector<vector<int>> f(n ,vector<int>(m,0));

        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                if(g[i][j]==1) f[i][j]=0;
                else 
                {
                    if (!i && !j) f[i][j]=1;
                    else
                    {
                        if(i) f[i][j] += f[i-1][j];
                        if(j) f[i][j] += f[i][j-1];
                    }
                }
            }

        return f[n-1][m-1];
    }
};

