64. 最小路径和

给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

 

示例 1：


输入：grid = [[1,3,1],[1,5,1],[4,2,1]]
输出：7
解释：因为路径 1→3→1→1→1 的总和最小。
示例 2：

输入：grid = [[1,2,3],[4,5,6]]
输出：12
 

提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100


---------------------- 0310 / 2021 

时间O(n * m )

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        if(n==0) return 0;
        int m=grid[0].size();
        vector<vector<int>> f(n, vector<int>(m, INT_MAX));

        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                if(!i && !j) f[i][j]=grid[i][j];
                else{
                    if(i) f[i][j] = min(f[i][j], f[i-1][j] + grid[i][j]);
                    if(j) f[i][j] = min(f[i][j], f[i][j-1] + grid[i][j]);
                }
            }

        return f[n-1][m-1];
    }
};


------------------- 0310 / 


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> f(n, vector<int>(m, INT_MAX));

        for(int i=0; i< n;++i)
            for(int j=0;j<m;++j)
            {
                if(!i && !j) f[i][j]=grid[i][j];
                else{
                    if(i) f[i][j]=min(f[i][j], f[i-1][j]+grid[i][j]);
                    if(j) f[i][j]=min(f[i][j], f[i][j-1]+grid[i][j]);
                }
            }

        return f[n-1][m-1];
    }
};

--------------------- 0311 / 2021/ 


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> f(n, vector<int>(m, INT_MAX));

        for(int i=0;i<n;++i)   
            for(int j=0;j<m;++j)
            {
                if(!i && !j) f[i][j]=grid[i][j];
                else{
                    if(i) f[i][j]=min(f[i][j], f[i-1][j] + grid[i][j]);
                    if(j) f[i][j]=min(f[i][j], f[i][j-1] + grid[i][j]);
                }
            }

        return f[n-1][m-1];
    }
};



