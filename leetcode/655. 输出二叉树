655. 输出二叉树

在一个 m*n 的二维字符串数组中输出二叉树，并遵守以下规则：

行数 m 应当等于给定二叉树的高度。
列数 n 应当总是奇数。
根节点的值（以字符串格式给出）应当放在可放置的第一行正中间。根节点所在的行与列会将剩余空间划分为两部分（左下部分和右下部分）。你应该将左子树输出在左下部分，右子树输出在右下部分。左下和右下部分应当有相同的大小。即使一个子树为空而另一个非空，你不需要为空的子树输出任何东西，但仍需要为另一个子树留出足够的空间。然而，如果两个子树都为空则不需要为它们留出任何空间。
每个未使用的空间应包含一个空的字符串""。
使用相同的规则输出子树。
示例 1:

输入:
     1
    /
   2
输出:
[["", "1", ""],
 ["2", "", ""]]
示例 2:

输入:
     1
    / \
   2   3
    \
     4
输出:
[["", "", "", "1", "", "", ""],
 ["", "2", "", "", "", "3", ""],
 ["", "", "4", "", "", "", ""]]
示例 3:

输入:
      1
     / \
    2   5
   / 
  3 
 / 
4 
输出:
[["",  "",  "", "",  "", "", "", "1", "",  "",  "",  "",  "", "", ""]
 ["",  "",  "", "2", "", "", "", "",  "",  "",  "",  "5", "", "", ""]
 ["",  "3", "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]
 ["4", "",  "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]]
注意: 二叉树的高度在范围 [1, 10] 中。



--------------------------------------- 0227 / 2021/  yxc 


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<string>> res;

    vector<int> dfs(TreeNode* u) // {h, w}
    {
        if(!u) return {0 ,0};
        auto l=dfs(u->left);
        auto r=dfs(u->right);

        return {max(l[0] , r[0]) + 1, max(l[1], r[1]) * 2 + 1};
    }

    void print(TreeNode* u, int h , int l ,int r)
    {
        if(!u) return ;
        int mid=l+r>>1;

        res[h][mid]=to_string(u->val);
        print(u->left, h+1, l, mid-1);
        print(u->right, h+1 , mid+1, r);

    }

    vector<vector<string>> printTree(TreeNode* root) {
        auto t=dfs(root);
        int h=t[0];
        int w=t[1];
        res=vector<vector<string>>(h, vector<string>(w));
        print(root, 0, 0 ,w-1);
        return res;
    }
};

