662. 二叉树最大宽度

给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与满二叉树（full binary tree）结构相同，但一些节点为空。

每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度。

示例 1:

输入: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

输出: 4
解释: 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。
示例 2:

输入: 

          1
         /  
        3    
       / \       
      5   3     

输出: 2
解释: 最大值出现在树的第 3 层，宽度为 2 (5,3)。

####################################


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

// 将二叉树的下标存储到数组中，根节点下标为 1，左子树结点为 2 * i，右子树下标为 2 * i+1
// 每层的宽度为队尾pos-队首pos+1

// class Solution 
// {
// public:
//     int widthOfBinaryTree(TreeNode* root) 
//     {
//         if(!root) return 0;
//         //如果左右都有节点，就是2^(层数-1)，从1开始，根第一层
//         queue<pair<TreeNode*,unsigned long long >>q;
//         int res=1;
//         q.push({root,1});

//         while(!q.empty())
//         {
//             int sz=q.size();
//             res=max(int(q.back().second-q.front().second+1),res);
//             for(int i=0;i<sz;++i)
//             {
//                 TreeNode* node=q.front().first;
//                 unsigned long long pos=q.front().second;
//                 q.pop();
//                 if(node->left) q.push({node->left,pos*2}); //   根是1，左节点是2*pos，右节点是2*pos+1，每一层宽度是队列尾-队列头+1，
//                 if(node->right) q.push({node->right,pos*2+1});

//             }
//         }
        
//         return res;
//     }
// };

// 0819 参考题解

class Solution
{
public:
    int widthOfBinaryTree(TreeNode* root)
    {
        int res=1;
        if(!root) return 0;
        queue<pair<TreeNode*,unsigned long long>> q;
        q.push({root,1});

        while(!q.empty())
        {
            int n=q.size();

            res=max(res,int(q.back().second-q.front().second+1));

            while(n--)
            {
                TreeNode* tmp=q.front().first;
                auto pos=q.front().second;

                q.pop();

                if(tmp->left) q.push({tmp->left,pos*2});
                if(tmp->right) q.push({tmp->right,pos*2+1});

            }
        }

        return res;
    }
};


---------------- 0928  / 2021  yxc

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root) return 0;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 1});

        int res=1;

        while(q.size()){
            int n=q.size();
            int l=q.front().second;//每层的最左边的边界
            int r;//每层的最右边的边界

            for(int i=0;i<n;++i){ // 更新每层的每个节点编号
                auto t=q.front();
                q.pop();
                auto k=t.first;
                auto v=t.second;
                v=v-l+1;// 当前节点编号等于减去最左的编号+1
                r=t.second;
                if(k->left) q.push({k->left, v*2}); // 放入左儿子编号
                if(k->right) q.push({k->right, v*2+1}); // 放入右儿子编号
            }

            res=max(res, r-l+1);
        }
        return res;
    }
};



