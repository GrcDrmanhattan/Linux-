你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过 *，/，+，-，(，) 的运算得到 24。

示例 1:

输入: [4, 1, 8, 7]
输出: True
解释: (8-4) * (7-1) = 24
示例 2:

输入: [1, 2, 1, 2]
输出: False
注意:

除法运算符 / 表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。
每个运算符对两个数进行运算。特别是我们不能用 - 作为一元运算符。例如，[1, 1, 1, 1] 作为输入时，表达式 -1 - 1 - 1 - 1 是不允许的。
你不能将数字连接在一起。例如，输入为 [1, 2, 1, 2] 时，不能写成 12 + 12 。

===================================================

// class Solution {
// public:
// 	bool judgePoint24(vector<int>& nums) {
// 		double a = nums[0], b = nums[1], c = nums[2], d = nums[3];
// 		return judgePoint24_4(a, b, c, d);
// 	}

// 	bool judgePoint24_1(double a) {
// 		return abs(a - 24) < 1e-6;
// 	}

// 	bool judgePoint24_2(double a, double& b) {
// 		return
// 			judgePoint24_1(a + b) ||
// 			judgePoint24_1(a - b) ||
// 			judgePoint24_1(b - a) ||
// 			judgePoint24_1(a * b) ||
// 			judgePoint24_1(a / b) ||
// 			judgePoint24_1(b / a);
// 	}

// 	bool judgePoint24_3(double a, double& b, double& c) {
// 		return
// 			judgePoint24_2(b + c, a) ||
// 			judgePoint24_2(b - c, a) ||
// 			judgePoint24_2(c - b, a) ||
// 			judgePoint24_2(b * c, a) ||
// 			judgePoint24_2(b / c, a) ||
// 			judgePoint24_2(c / b, a) ||
// 			judgePoint24_2(a + c, b) ||
// 			judgePoint24_2(a - c, b) ||
// 			judgePoint24_2(c - a, b) ||
// 			judgePoint24_2(a * c, b) ||
// 			judgePoint24_2(a / c, b) ||
// 			judgePoint24_2(c / a, b) ||
// 			judgePoint24_2(a + b, c) ||
// 			judgePoint24_2(a - b, c) ||
// 			judgePoint24_2(b - a, c) ||
// 			judgePoint24_2(a * b, c) ||
// 			judgePoint24_2(a / b, c) ||
// 			judgePoint24_2(b / a, c);
// 	}

// 	bool judgePoint24_4(double& a, double& b, double& c, double& d) {
// 		return
// 			judgePoint24_3(c + d, a, b) ||
// 			judgePoint24_3(c - d, a, b) ||
// 			judgePoint24_3(d - c, a, b) ||
// 			judgePoint24_3(d * c, a, b) ||
// 			judgePoint24_3(c / d, a, b) ||
// 			judgePoint24_3(d / c, a, b) ||
// 			judgePoint24_3(b + d, a, c) ||
// 			judgePoint24_3(b - d, a, c) ||
// 			judgePoint24_3(d - b, a, c) ||
// 			judgePoint24_3(b * d, a, c) ||
// 			judgePoint24_3(b / d, a, c) ||
// 			judgePoint24_3(d / b, a, c) ||
// 			judgePoint24_3(b + c, a, d) ||
// 			judgePoint24_3(b - c, a, d) ||
// 			judgePoint24_3(c - b, a, d) ||
// 			judgePoint24_3(b * c, a, d) ||
// 			judgePoint24_3(b / c, a, d) ||
// 			judgePoint24_3(c / b, a, d) ||
// 			judgePoint24_3(a + d, b, c) ||
// 			judgePoint24_3(a - d, b, c) ||
// 			judgePoint24_3(d - a, b, c) ||
// 			judgePoint24_3(a * d, b, c) ||
// 			judgePoint24_3(a / d, b, c) ||
// 			judgePoint24_3(d / a, b, c) ||
// 			judgePoint24_3(a + c, b, d) ||
// 			judgePoint24_3(a - c, b, d) ||
// 			judgePoint24_3(c - a, b, d) ||
// 			judgePoint24_3(a * c, b, d) ||
// 			judgePoint24_3(a / c, b, d) ||
// 			judgePoint24_3(c / a, b, d) ||
// 			judgePoint24_3(a + b, c, d) ||
// 			judgePoint24_3(a - b, c, d) ||
// 			judgePoint24_3(b - a, c, d) ||
// 			judgePoint24_3(a * b, c, d) ||
// 			judgePoint24_3(a / b, c, d) ||
// 			judgePoint24_3(b / a, c, d);
// 	}
// };

=============================== dfs 

class Solution
{
public:
    bool is24(double a)
    {
        return abs(24-a)<1e-6;
    }
    vector<double> cal(double a, double b) 
    {
        vector<double> res = {a * b, a + b, a - b, b - a};
        if (b) res.push_back(a / b);
        if (a) res.push_back(b / a);
        return res;
    }

    bool judgePoint24(vector<int>& nums)
    {
        sort(nums.begin(),nums.end());
        do
        {
            int n1=nums[0];
            int n2=nums[1];
            int n3=nums[2];
            int n4=nums[3];

            // auto res1=cal(n1,n2);
            // auto res2=cal(n3,n4);

            for(auto v1:cal(n1,n2))
            {
                for(auto v2:cal(n3,n4))
                {
                    for(auto r:cal(v1,v2))
                    {
                        if(is24(r)) return true;
                    }
                }
            }

            for(auto v12:cal(n1,n2))
            {
                for(auto v123:cal(v12,n3))
                {
                    for(auto r:cal(v123,n4))
                    {
                        if(is24(r)) return true;
                    }
                }
            }

        }while(next_permutation(nums.begin(),nums.end()));
        
        return false;        
    }
};
