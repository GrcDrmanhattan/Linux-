695. 岛屿的最大面积

给定一个包含了一些 0 和 1 的非空二维数组 grid 。

一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。

找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)

 

示例 1:

[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是 11 ，因为岛屿只能包含水平或垂直的四个方向的 1 。

示例 2:

[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。

 

注意: 给定的矩阵grid 的长度和宽度都不超过 50。

----------------------------- 0301/ 2021/  


// 时间On * m 
// 空间 On * m， 最大可能需要整个网格大小的栈空间

class Solution {
public:
    vector<vector<int>> g;
    int n, m;
    int res;
    bool st[50][50];

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        g=grid;
        n=g.size();
        m=g[0].size();

        memset(st, 0 ,sizeof st);

        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                if(!st[i][j] && g[i][j]==1) res=max(res, dfs(i, j));
            }

        return res;
    }

    int dfs(int x, int y)
    {
        int cnt=1;
       
        st[x][y]=true;

        int dx[]={0, 1, 0, -1};
        int dy[]={1, 0, -1, 0};

        for(int i=0;i<4;++i)
        {
            int a=x+dx[i];
            int b=y+dy[i];
            if(a>=0 && a<n && b>=0 && b<m && !st[a][b] && g[a][b] == 1)
            {
               cnt += dfs(a, b);
            }
        }
        return cnt;
    }
};


------------------------- 1003 / 2021  


https://www.xigua.cm/vodplay/21452-1-1.html

class Solution {
public:
    vector<vector<int>> g;
    int n,m;
    int dx[4]={0, 1, 0, -1};
    int dy[4]={1, 0, -1,0};
    bool st[55][55];

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        g=grid;
        n=g.size();
        m=g[0].size();

        int res=0;
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                if(!st[i][j] && g[i][j]) res=max(res, dfs(i,j));
            }
        }
        return res;
    }

    int dfs(int x, int y){
        int res=1;
        st[x][y]=true;
        for(int i=0;i<4;++i){
            int a=x+dx[i];
            int b=y+dy[i];
            if(a>=0 && a<n && b>=0 && b<m && !st[a][b] && g[a][b]){
                res += dfs(a, b);
            }
        }

        return res;
    }
};




