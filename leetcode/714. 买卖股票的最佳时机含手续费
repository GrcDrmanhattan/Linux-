714. 买卖股票的最佳时机含手续费

给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。

你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。

返回获得利润的最大值。

注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

示例 1:

输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
输出: 8
解释: 能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
注意:

0 < prices.length <= 50000.
0 < prices[i] < 50000.
0 <= fee < 50000.


------------------------------------- 0201 / 2021/  yxc 

时间On，遍历数组一次，


class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        vector<int> f(n+1); // 第i天不持有股票的最大收益
        vector<int> g(n+1); // 第i天持有股票第最大收益

        f[0]=0;
        g[0]=-1e8;

        for(int i=1;i<=n;++i)
        {
            f[i]=max(f[i-1], g[i-1]+prices[i-1]-fee);
            g[i]=max(g[i-1], f[i-1]-prices[i-1]);
        }

        return f[n];
    }
};



--------------------------------- 0201 

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n=prices.size();
        vector<int> f(n+1);
        vector<int> g(n+1);

        f[0]=0;
        g[0]=-1e8;

        for(int i=1;i<=n;++i)
        {
            f[i]=max(f[i-1], g[i-1]+prices[i-1]);
            g[i]=max(g[i-1], f[i-1]-prices[i-1]-fee); // 要么买入时付手续费，要么卖出付手续费 都可以
        }

        return f[n];
    }
};

