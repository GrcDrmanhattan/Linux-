719. 找出第 k 小的距离对

给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。

示例 1:

输入：
nums = [1,3,1]
k = 1
输出：0 
解释：
所有数对如下：
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。
提示:

2 <= len(nums) <= 10000.
0 <= nums[i] < 1000000.
1 <= k <= len(nums) * (len(nums) - 1) / 2.

-------------- 2022 / 0115  

// 一般要求满足条件的第k个， 都是二分

nlogn

class Solution {
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());

        int l=0;
        int r=1e6; // 二分最小的距离是多少，然后用距离去判断个数是否满足
        while(l<r){
            int mid=l+r>>1;
            if(get(nums, mid) >= k) r=mid; // 看满足小于等于答案的数目 是否大于等于k个，如果是，就在左半部分继续二分，否则在右半部分二分
            else l=mid+1;
        }
        return r;
    }

    int get(vector<int>& nums, int mid){ // 求出距离小于等于mid的个数
        int res=0;
        for(int i=0, j=0; i<nums.size();++i){ //  双指针， ON
            while(nums[i]- nums[j] > mid) j++; // 直到距离小于等于二分出的值时，停止
            res += i-j;
        }

        return res;
    }
};

