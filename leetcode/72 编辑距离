给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。

你可以对一个单词进行如下三种操作：

插入一个字符
删除一个字符
替换一个字符
 

示例 1：

输入：word1 = "horse", word2 = "ros"
输出：3
解释：
horse -> rorse (将 'h' 替换为 'r')
rorse -> rose (删除 'r')
rose -> ros (删除 'e')

————————————————————————————————————————————

//dp[i][j]表示从第一个单词i转换到第二个单词j需要的最少步数
//dp[i-1][j-1]表示替换操作：相当于已经用第一个单词的前i-1个表示了第二个单词的前j-1个，
//所以只需要将第一个单词的最后一个替换为第二个单词的最后一个就可以了
//dp[i][j-1]表示增加：相当于已经用第一个单词前i个表示了第二个单词的前j-1个，只差第二个单词的最后一个没有表示因为第一个单词已经用完了，所以需要增加
//dp[i-1][j]表示删除：已经用第一个单词的前i-1个表示了第二个的全部j个，那么剩下的就需要删除了
class Solution 
{
public:
    int minDistance(string word1, string word2) 
    {
        
        int len1=word1.size();
        int len2=word2.size();
        if(len1 * len2==0 ) return len2+len1;
        
        vector<vector<int>> dp(len1+1,vector<int>(len2+1,0));//多开一行一列是为了保存边界条件，即字符长度为 0 的情况
        for(int i=1;i<=len1;++i)
        {
            dp[i][0]=i;//初始化dp表格的第0列
        }
        for(int i=1;i<=len2;++i)
        {
            dp[0][i]=i;//初始化dp的第0行
        }

        for(int i=1;i<=len1;++i)
        {
            for(int j=1;j<=len2;++j)
            {
                if(word1[i-1]==word2[j-1]) //i-1,j-1表示数组第ij个，因为数组从0开始
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;
                }
            }
        }

        return dp[len1][len2];
    }
};



-------------------------- 0310 / 2021/  yxc



// 状态n^2, 转移O3
// 总3 * n^2 
// 只需考虑小部分，没有多余操作，固定操作顺序的集合



class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();

        word1 = ' ' + word1;
        word2 = ' ' + word2;

        vector<vector<int>> f(n+1, vector<int>(m+1));

        for(int i=0;i<=n;++i) f[i][0]=i;
        for(int i=0;i<=m;++i) f[0][i]=i;

        for(int i=1;i<=n;++i)
            for(int j=1;j<=m;++j)
            {
                f[i][j]=min(f[i-1][j], f[i][j-1]) + 1; // 增加或删除的
                int t= word1[i] != word2[j]; // 字符不等需要替换
                f[i][j]=min(f[i][j], f[i-1][j-1]+t);
            }

        return f[n][m];
    }
};


