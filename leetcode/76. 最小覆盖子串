76. 最小覆盖子串
给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。

注意：如果 s 中存在这样的子串，我们保证它是唯一的答案。

 

示例 1：

输入：s = "ADOBECODEBANC", t = "ABC"
输出："BANC"
示例 2：

输入：s = "a", t = "a"
输出："a"
 

提示：

1 <= s.length, t.length <= 105
s 和 t 由英文字母组成

-------------------------------------------   1225 /2020 yxc

时间复杂度 On

经典的双指针算法， 维护窗口可以包含t中的所有字符



class Solution {
public:
    string minWindow(string s, string t) {
        string res;
        unordered_map<char,int > ht,hs;//ht t里面字符出现的次数，hs窗口里面每个字符的次数
        for(auto x:t) ht[x]++;

        int cnt=0;
        for(int i=0,j=0;i<s.size();++i)
        {
            hs[s[i]]++;

            if(hs[s[i]] <= ht[s[i]]) cnt++;// 窗口内s[i]字符的次数小于等于t[i]字符的次数，cnt++
            
            while(hs[s[j]] > ht[s[j]]) {// 如果是次数过多，无效字符，就j右移动，减小窗口
                hs[s[j]]--;
                j++;
            }

            if(cnt == t.size())
            {
                if(res.empty() || i-j+1<res.size())
                    res=s.substr(j, i-j+1);
            }    
        }

        return res;
    }
};





-------------------------- 0310 / 2021/ 




class Solution {
public:
    string minWindow(string s, string t) {
        string res;
        unordered_map<char, int> ht, hs;
        for(auto x:t) ht[x]++;

        int cnt=0;
        for(int i=0, j=0; i<s.size();++i)
        {
            
            hs[s[i]]++;

            if(hs[s[i]] <= ht[s[i]]) cnt++;

            while(hs[s[j]] > ht[s[j]])
            {
                hs[s[j]]--;
                j++;
            }

            if(cnt==t.size()){
                if(res.empty() || res.size() > i-j+1)
                    res=s.substr(j, i-j+1);
            }
        }

        return res;
    }
};


--------------------- 0705 /2021/  

class Solution {
public:
    string minWindow(string s, string t) {
        string res;
        unordered_map<char, int> hs, ht;

        for(auto x:t) ht[x]++;
        int cnt=0;
        for(int i=0, j=0;i<s.size();++i){
            hs[s[i]]++;
            if(hs[s[i]] <= ht[s[i]]) cnt++;

            while(hs[s[j]] > ht[s[j]]){
                hs[s[j]]--;
                j++;
            }

            if(cnt == t.size())
                if(res.empty() || res.size() > i-j+1) res=s.substr(j , i-j+1);
        }

        return res;
    }
};


------------------- 0825  2021 

class Solution {
public:
    string minWindow(string s, string t) {
        string res;
        unordered_map<char, int > hs, ht;
        for(auto x:t) ht[x]++;

        int cnt=0;
        for(int i=0, j=0;i<s.size();++i){
            hs[s[i]]++;
            if(hs[s[i]] <= ht[s[i]]) cnt++;
            while(hs[s[j]] > ht[s[j]]){
                hs[s[j]]--;
                j++;
            }

            if(cnt == t.size())
                if(res.empty()||i-j+1<res.size())
                    res=s.substr(j, i-j+1);
        }
        return res;
    }
};


---------------------- 1029  

class Solution {
public:
    string minWindow(string s, string t) {
        string res;
        int cnt=0;//s的双指针中符合要求的字母种类数
        unordered_map<char, int> hs, ht;
        for(auto x:t) ht[x]++;

        for(int i=0, j=0; i<s.size();++i){
            hs[s[i]]++;
            if(hs[s[i]] <= ht[s[i]]) cnt++;

            while(hs[s[j]] > ht[s[j]]){
                hs[s[j]]--;
                j++;
            }

            if(cnt == t.size())
                if(res.empty() || res.size() > i-j+1) 
                    res=s.substr(j, i-j+1);
        }

        return res;
    }
};

       


