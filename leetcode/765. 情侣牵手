765. 情侣牵手

N 对情侣坐在连续排列的 2N 个座位上，想要牵到对方的手。 计算最少交换座位的次数，以便每对情侣可以并肩坐在一起。 一次交换可选择任意两人，让他们站起来交换座位。

人和座位用 0 到 2N-1 的整数表示，情侣们按顺序编号，第一对是 (0, 1)，第二对是 (2, 3)，以此类推，最后一对是 (2N-2, 2N-1)。

这些情侣的初始座位  row[i] 是由最初始坐在第 i 个座位上的人决定的。

示例 1:

输入: row = [0, 2, 1, 3]
输出: 1
解释: 我们只需要交换row[1]和row[2]的位置即可。
示例 2:

输入: row = [3, 2, 0, 1]
输出: 0
解释: 无需交换座位，所有的情侣都已经可以手牵手了。
说明:

len(row) 是偶数且数值在 [4, 60]范围内。
可以保证row 是序列 0...len(row)-1 的一个全排列。
-------------- 1011 /  / 2021   yxc 


// 将每对情侣看作一个点
// 将沙发看作边，不同情侣坐在一个沙发上，就连接一条边
// 目的是将环状图，变成每个点的自环图
// 初始cnt个环，目的n个环，次数=n-cnt
// 无向图里连通块点数目等于环的数目

class Solution {
public:
    vector<int> p;
    int find(int x){
        if(p[x] != x) p[x]=find(p[x]);
        return p[x];
    }

    int minSwapsCouples(vector<int>& row) {
        int n=row.size()/2;
        for(int i=0;i<n;++i) p.push_back(i);

        int cnt=n;
        for(int i=0; i < n*2 ;i+=2){
            int a=row[i]/2;
            int b=row[i+1]/2;
            if(find(a) != find(b)){
                p[find(a)] = find(b);
                cnt--;
            }
        }

        return n-cnt;
    }
};


