778. 水位上升的泳池中游泳

在一个 N x N 的坐标方格 grid 中，每一个方格的值 grid[i][j] 表示在位置 (i,j) 的平台高度。

现在开始下雨了。当时间为 t 时，此时雨水导致水池中任意位置的水位为 t 。你可以从一个平台游向四周相邻的任意一个平台，但是前提是此时水位必须同时淹没这两个平台。
假定你可以瞬间移动无限距离，也就是默认在方格内部游动是不耗时的。当然，在你游泳的时候你必须待在坐标方格里面。

你从坐标方格的左上平台 (0，0) 出发。最少耗时多久你才能到达坐标方格的右下平台 (N-1, N-1)？

 

示例 1:

输入: [[0,2],[1,3]]
输出: 3
解释:
时间为0时，你位于坐标方格的位置为 (0, 0)。
此时你不能游向任意方向，因为四个相邻方向平台的高度都大于当前时间为 0 时的水位。

等时间到达 3 时，你才可以游向平台 (1, 1). 因为此时的水位是 3，坐标方格中的平台没有比水位 3 更高的，所以你可以游向坐标方格中的任意位置
示例2:

输入: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
输出: 16
解释:
 0  1  2  3  4
24 23 22 21  5
12 13 14 15 16
11 17 18 19 20
10  9  8  7  6

最终的路线用加粗进行了标记。
我们必须等到时间为 16，此时才能保证平台 (0, 0) 和 (4, 4) 是连通的
 

提示:

2 <= N <= 50.
grid[i][j] 是 [0, ..., N*N - 1] 的排列。

--------------- 1013  / 2021  / yxc


// 二分 floodfill
// 时间 logn * n^2

class Solution {
public:
    int n;
    vector<vector<int>> g;
    vector<vector<bool>> st;
    int dx[4]={0, 1, 0, -1};
    int dy[4]={1, 0, -1, 0};

    int swimInWater(vector<vector<int>>& grid) {
        g=grid;
        n=g.size();
       
        int l=0;
        int r=n*n-1;
        while(l<r){
            int mid=l+r>>1;
            if(check(mid)) r=mid;
            else l=mid+1;
        }
        return l;
    }

    bool check(int mid){ // 检查是否可以从起点走到终点
        if(g[0][0]>mid) return false;
        st=vector<vector<bool>>(n, vector<bool>(n));
        return dfs(0, 0, mid);
    }

    bool dfs(int x, int y, int mid){
        if(x== n-1 && y==n-1) return true;
        st[x][y]=true;
    
        for(int i=0;i<4;++i){
            int a=x+dx[i];
            int b=y+dy[i];
            if(a>=0 && a<n && b>=0 && b<n && !st[a][b] && g[a][b] <= mid){
                if(dfs(a, b, mid)) return true;
            }
        }

        return false;
    }
};



-------------- 1015  /2021   


class Solution {
public:
    vector<vector<int>> g;
    int n;
    int dx[4]={0, 1, 0, -1};
    int dy[4]={1, 0, -1, 0};
    vector<vector<bool>> st;

    int swimInWater(vector<vector<int>>& grid) {
        g=grid;
        n=g.size();

        int l=0;
        int r=n*n-1;
        while(l<r){
            int mid=l+r>>1;
            if(check(mid)) r=mid;
            else l=mid+1;
        }
        return l;
    }   

    bool check(int mid){
        if(g[0][0] > mid) return false;
        st=vector<vector<bool>>(n, vector<bool>(n));
        return dfs(0, 0, mid);
    }

    bool dfs(int x, int y, int mid){ // 检查当前水位mid时，是否可以走到终点
        st[x][y]=true;
        if(x==n-1 && y==n-1) return true;
        for(int i=0;i<4;++i){
            int a=x+dx[i];
            int b=y+dy[i];
            if(a>=0 && a<n && b>=0 && b<n && !st[a][b] && g[a][b] <= mid)
                if(dfs(a, b, mid)) return true;
        }
        return false;
    }
};



