78. 子集

给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

 

示例 1：

输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
示例 2：

输入：nums = [0]
输出：[[],[0]]
 

提示：

1 <= nums.length <= 10
-10 <= nums[i] <= 10
nums 中的所有元素 互不相同



----------------- 0310  / 2021  / yxc 


n个数，一共2^n 个子集。用2^n 个数表示，每个数代表一个集合，每个数的二进制表示哪位是1，代表集合包含第i个个数，否则不含

时间 ，一共枚举2^n 个数，每个数枚举n位， 2^n * n





class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        int n=nums.size();

        for(int i=0; i<(1 << n) ;++i)
        {
            vector<int> tmp;
            for(int j=0;j<n;++j)
                if(i>>j&1) tmp.push_back(nums[j]);

            res.push_back(tmp);
        }

        return res;
    }
};



----------------- 0705 / 2021/  



class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> res;
        

        for(int i=0;i< 1<<n;++i){
            vector<int> tmp;
            for(int j=0;j<n;++j){
                if(i>>j&1){
                    tmp.push_back(nums[j]);
                }
            }
            res.push_back(tmp);
        }
        return res;
    }
};



--------------------- 0825  /2021  

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        const int n=nums.size();
        for(int i=0;i<(1<<n);++i){
            vector<int>tmp;
            for(int j=0;j<n;++j){
                if(i>>j&1) tmp.push_back(nums[j]);
            }
            res.push_back(tmp);
        }

        return res;
    }
};

