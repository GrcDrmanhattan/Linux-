801. 使序列递增的最小交换次数

我们有两个长度相等且不为空的整型数组 A 和 B 。

我们可以交换 A[i] 和 B[i] 的元素。注意这两个元素在各自的序列中应该处于相同的位置。

在交换过一些元素之后，数组 A 和 B 都应该是严格递增的（数组严格递增的条件仅为A[0] < A[1] < A[2] < ... < A[A.length - 1]）。

给定数组 A 和 B ，请返回使得两个数组均保持严格递增状态的最小交换次数。假设给定的输入总是有效的。

示例:
输入: A = [1,3,5,4], B = [1,2,3,7]
输出: 1
解释: 
交换 A[3] 和 B[3] 后，两个数组如下:
A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]
两个数组均为严格递增的。
注意:

A, B 两个数组的长度总是相等的，且长度的范围为 [1, 1000]。
A[i], B[i] 均为 [0, 2000]区间内的整数。

-------------- 1017  / 2021   yxc

// 动态规划
// f[i][0] 表示最后第i个字母不交换使得前i个字母有序的最小次数
// f[i][1] 表示最后第i个字母交换，使得前i个字母有序的最小次数

class Solution {
public:
    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        const int n=nums1.size();
        const int inf=1e8;
        vector<vector<int>> f(n, vector<int>(2, inf));

        f[0][0]=0;
        f[0][1]=1;

        for(int i=1;i<n;++i){
            if(nums1[i-1] < nums1[i] && nums2[i-1] < nums2[i]){
                f[i][0]=min(f[i][0], f[i-1][0]);
                f[i][1]=min(f[i][1], f[i-1][1]+1); // 前面i-1交换，最后一个交换，两次交换就相当于没换，还是比较同一个数组
            }

            if(nums2[i-1] < nums1[i] && nums1[i-1] < nums2[i]){
                f[i][0]=min(f[i][0], f[i-1][1]);
                f[i][1]=min(f[i][1] , f[i-1][0]+1); // 前面i-1不换，最后一个交换，交换了所以比较两个数组的
            }
        }

        return min(f[n-1][0], f[n-1][1]);
    }
};


