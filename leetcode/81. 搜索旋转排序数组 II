81. 搜索旋转排序数组 II
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。

编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。

示例 1:

输入: nums = [2,5,6,0,0,1,2], target = 0
输出: true
示例 2:

输入: nums = [2,5,6,0,0,1,2], target = 3
输出: false
进阶:

这是 搜索旋转排序数组 的延伸题目，本题中的 nums  可能包含重复元素。
这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？


-------------------------------------------- 0325 / 2021/  self

二分最坏时间是On
和扫描一遍数组是等价的On


class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int l=0;
        int r=nums.size()-1;
        while(l<r && nums[r]==nums[0]) r--; // 最坏情况下执行n次

        while(l<r)
        {
            int mid=l+r+1>>1;
            if(nums[mid] >= nums[0]) l=mid;
            else r=mid-1;
        }

        if(target>=nums[0]) l=0;
        else l=r+1 , r=nums.size()-1;

        while(l<r){
            int mid=l+r>>1;
            if(nums[mid] >= target) r=mid;
            else l=mid+1;
        }

        if(nums[r]!=target) return false;
        return true;
    }
};

