84. 柱状图中最大的矩形

给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。

求在该柱状图中，能够勾勒出来的矩形的最大面积。

 



以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。

 



图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。

 

示例:

输入: [2,1,5,6,2,3]
输出: 10

------------------------------  0118 / 2021 /




class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int res;
        int n=heights.size();
        stack<int> st;
        vector<int> l(n), r(n);

        for(int i=0;i<n;++i)
        {
            while(st.size() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) l[i]=-1; // 如果不需要弹出元素， 则说明可以到左边界 -1
            else l[i]=st.top();
            st.push(i);
        }

        st=stack<int>();

        for(int i=n-1;i>=0;--i)
        {
            while(st.size() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) r[i]=n; // 可以到右边界为n，达不到n
            else r[i]=st.top();
            st.push(i);
        }

        for(int i=0;i<n;++i)
        {
            res=max(res, heights[i] * (r[i]-l[i]-1));
        }

        return res;
    }
};


--------------------------------- 0311/ 2021/ 


时间On

// 枚举每个顶部，找到左边第一个小的边界，右边第一个小的边界

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        vector<int> l(n), r(n);
        stack<int> st;

        for(int i=0;i<n;++i)
        {
            while(st.size() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) l[i]=-1;
            else l[i]=st.top();
            st.push(i);
        }

        st=stack<int>();

        for(int i=n-1;i>=0;--i)
        {
            while(st.size() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) r[i]=n;
            else r[i]=st.top();
            st.push(i);
        }

        int res=0;
        for(int i=0;i<n;++i)
            res=max(res, heights[i] * (r[i]-l[i]-1));

        return res;
    }
};



----------------------- 0706/ 2021

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        vector<int> ll(n);
        vector<int> rr(n);
        stack<int> st;

        for(int i=0;i<n;++i) // 从左到右找到左边第一个比当前栈顶小的元素,当前元素是最新插入的，之前的栈顶比他大的当然不会作为答案输出
        {
            while(st.size() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) ll[i]=-1;
            else ll[i] = st.top();
            st.push(i);
        }

        st=stack<int>();

        for(int i=n-1;i>=0;--i){ // 从右到左找到右边第一个小的元素，当前元素是最新插入的，栈顶是之前的
            while(st.size() && heights[st.top()] >= heights[i]) st.pop();
            if(st.empty()) rr[i]=n;
            else rr[i]=st.top();
            st.push(i);
        }

        int res=0;
        for(int i=0;i<n;++i)
            res=max(res, heights[i] * (rr[i]-ll[i]-1));

        return res;
    }
};



-------------------  0909  / 2021  

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        const int n=heights.size();
        int res=0;
        vector<int> ll(n);
        vector<int> rr(n);
        stack<int> st;

        for(int i=0;i<n;++i){
            while(st.size() && heights[i] <= heights[st.top()]) st.pop();
            if(st.size()) ll[i]=st.top();
            else ll[i]=-1;//可以防止数组只有一个元素的情况
            st.push(i);
        }

        // for(auto x:ll) cout<<x<<endl;

        st=stack<int>();
        for(int i=n-1;i>=0;--i){
            while(st.size() && heights[i] <= heights[st.top()]) st.pop();
            if(st.size()) rr[i]=st.top();
            else rr[i]=n;
            st.push(i);
        }
        // for(auto x:rr) cout<<"--"<<x<<endl;
        for(int i=0;i<n;++i)
            res=max(res, heights[i] * (rr[i]-ll[i]-1));
        
        return res;
    }
};


