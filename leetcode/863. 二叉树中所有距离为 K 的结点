863. 二叉树中所有距离为 K 的结点

给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。

返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。

 

示例 1：

输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
输出：[7,4,1]
解释：
所求结点为与目标结点（值为 5）距离为 2 的结点，
值分别为 7，4，以及 1



注意，输入的 "root" 和 "target" 实际上是树上的结点。
上面的输入仅仅是对这些对象进行了序列化描述。
 

提示：

给定的树是非空的。
树上的每个结点都具有唯一的值 0 <= node.val <= 500 。
目标结点 target 是树上的结点。
0 <= K <= 1000.

------------------------0824 / 2021


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    unordered_map<TreeNode*, vector<TreeNode*>> mp;

    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        dfs1(root);
        dfs2(target, NULL, k);
        return res;    
    }

    void dfs1(TreeNode* u){
        if(!u) return ;
        if(u->left){
            mp[u].push_back(u->left);
            mp[u->left].push_back(u);
            dfs1(u->left);
        }
        if(u->right){
            mp[u].push_back(u->right);
            mp[u->right].push_back(u);
            dfs1(u->right);
        }

    }

    void dfs2(TreeNode* target, TreeNode* fa, int k){
        if(!k) res.push_back(target->val);
        for(auto s:mp[target]){
            if(s!=fa){
                dfs2(s, target, k-1);
            }
        }
    }
};


