876. 链表的中间结点

给定一个带有头结点 head 的非空单链表，返回链表的中间结点。

如果有两个中间结点，则返回第二个中间结点。

 

示例 1：

输入：[1,2,3,4,5]
输出：此列表中的结点 3 (序列化形式：[3,4,5])
返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。
注意，我们返回了一个 ListNode 类型的对象 ans，这样：
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.
示例 2：

输入：[1,2,3,4,5,6]
输出：此列表中的结点 4 (序列化形式：[4,5,6])
由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。

##########################################

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution 
{
public:
    ListNode* middleNode(ListNode* head) 
    {
        ListNode* slow=head;
        ListNode* fast=head;
        while( fast !=NULL && fast->next!=NULL)  //这个条件返回是中间两个的第二个
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        //while(fast->next!=null && fa->next->nex!=null) 返回中间两个的第一个
        return slow;

    }

};


------------------------------------------ 0127 / 2021  / self

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        auto d=new ListNode(-1);
        d->next=head;
        int l=0;
        for(auto p=head;p;p=p->next) l++;

        int k=l/2+1;
        auto p=d;
        for(int i=0;i<k;++i) p=p->next;

        return p;
    }
};



--------------------------------- 0211 /2021/ 



class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        int n=0;
        for(auto p=head;p;p=p->next) n++;

        auto p=head;
        for(int i=0;i<n/2;++i) p=p->next; // 奇数返回中间， 偶数返回第二个节点

        return p;
    }
};


