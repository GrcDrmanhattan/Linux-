887. 鸡蛋掉落

给你 k 枚相同的鸡蛋，并可以使用一栋从第 1 层到第 n 层共有 n 层楼的建筑。

已知存在楼层 f ，满足 0 <= f <= n ，任何从 高于 f 的楼层落下的鸡蛋都会碎，从 f 楼层或比它低的楼层落下的鸡蛋都不会破。

每次操作，你可以取一枚没有碎的鸡蛋并把它从任一楼层 x 扔下（满足 1 <= x <= n）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 重复使用 这枚鸡蛋。

请你计算并返回要确定 f 确切的值 的 最小操作次数 是多少？

 
示例 1：

输入：k = 1, n = 2
输出：2
解释：
鸡蛋从 1 楼掉落。如果它碎了，肯定能得出 f = 0 。 
否则，鸡蛋从 2 楼掉落。如果它碎了，肯定能得出 f = 1 。 
如果它没碎，那么肯定能得出 f = 2 。 
因此，在最坏的情况下我们需要移动 2 次以确定 f 是多少。 
示例 2：

输入：k = 2, n = 6
输出：3
示例 3：

输入：k = 3, n = 14
输出：4
 

提示：

1 <= k <= 100
1 <= n <= 104

------------------------  0422/  2021/  yxc 


超时， O n * n * m ，n是楼层，m是鸡蛋数


// 可以控制的情况取最好的，不可控的取最坏的
// 也就是鸡蛋是否碎不可控取max， 是否选择最后一个鸡蛋可控，取min
// f[i][j] 高度是i，最多用j个鸡蛋的最小操作次数

class Solution {
public:
    int superEggDrop(int m, int n) { // m个鸡蛋，n层楼
        vector<vector<int>> f(n+2,vector<int>(m+2));

        for(int i=1;i<=n;++i) f[i][1]=i;
        for(int i=1;i<=m;++i) f[1][i]=1;

        for(int i=2;i<=n;++i)
            for(int j=2;j<=m;++j)
            {
                f[i][j]=f[i][j-1];
                for(int k=1;k<=i;++k){
                    f[i][j]=min(f[i][j], max(f[k-1][j-1], f[i-k][j]) + 1);// 第k层碎了，则需要试1到k-1层高度k-1，第k不碎，k+1到i，高度i-k
                }
            }

        return f[n][m];
    }
};


------------------ 0422 / 2021 
 
 // f[i][j] j个鸡蛋测量i次的方案数中最多的高度是多少

class Solution {
public:
    int superEggDrop(int k, int n) {
        vector<vector<int>> f(n+1, vector<int>(k+1));
        int res=0;

        for(int i=1;i<=n;++i)
        { // n层
            for(int j=1;j<=k;++j) // k个鸡蛋
            {
                f[i][j] = f[i-1][j-1] + f[i-1][j] + 1; // 在某层碎了+在某层没碎 + 1 
                
            }
            if(f[i][k] >= n) 
            {
                res= i;
                break;
            }
        }
        return res;
    }
};


