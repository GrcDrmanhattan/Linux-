判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。


===================================反转后是否相等，字符串双指针，判断一半后的数字

// class Solution 
// {
// public:
        //计算反转后的数是否相等
//     bool isPalindrome(int x) 
//     {
//         if(x<0) return false;    //负数返回false
//         int tmp=x;
        
//         long long res=0;
//         while(tmp)
//         {
//             res=res*10+tmp%10;
//             tmp/=10;
//         }

//         if(res==x) return true;
//         else return false;

//     }
// };

// class Solution
// {
// public: 
//     bool isPalindrome(int x)
//     {
//         string s=to_string(x);
//         int len=s.size();
//         int l=0;
//         int r=len-1;
//         while(l<r) //双指针
//         {
//             if(s[l]==s[r])
//             {
//                 l++;
//                 --r;
//             }
//             else return false;
//         }

//         return true;
//     }
// };

class Solution
{
public:
    bool isPalindrome(int x)
    {
        if(x<0) return false;
        if(x!=0 && x%10==0) return false;//个位是0，但是肯定不以0开头啊

        int res=0;//取一半后的数字
        while(x>res)
        {
            res=res*10 + x%10;
            x/=10;
        }

        return x==res || x==res/10;//偶数判断x==res，奇数就/10后判断
    }
};
