93. 复原 IP 地址

给定一个只包含数字的字符串，用以表示一个 IP 地址，返回所有可能从 s 获得的 有效 IP 地址 。你可以按任何顺序返回答案。

有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。

例如："0.1.2.201" 和 "192.168.1.1" 是 有效 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效 IP 地址。

 

示例 1：

输入：s = "25525511135"
输出：["255.255.11.135","255.255.111.35"]
示例 2：

输入：s = "0000"
输出：["0.0.0.0"]
示例 3：

输入：s = "1111"
输出：["1.1.1.1"]
示例 4：

输入：s = "010010"
输出：["0.10.0.10","0.100.1.0"]
示例 5：

输入：s = "101023"
输出：["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
 

提示：

0 <= s.length <= 3000
s 仅由数字组成

-------------------0912 /  2021  yxc 


class Solution {
public:
    vector<string> res;

    vector<string> restoreIpAddresses(string s) {
        dfs(s, 0, 0, "");
        return res;
    }

    void dfs(string&s, int u ,int k, string tmp){//k当前准备搜索第k个数
        if(u==s.size()){
            if(k==4) {
                tmp.pop_back();
                res.push_back(tmp);
            }
            return;
        }

        if(k==4) return ;//没有搜索到结尾，但是已经够了4个数
        int x=0;
        for(int i=u;i<s.size();++i){
            if(i>u && s[u] == '0') break;//至少有两位，但是有前导0
            x=x*10 + s[i]-'0';
            if(x<=255) dfs(s, i+1, k+1, tmp+to_string(x) + '.');
            else break;
        }
    }
};


-----------------

class Solution {
public:
    vector<string> res;

    vector<string> restoreIpAddresses(string s) {
        dfs(s ,0, 0, "");
        return res;
    }

    void dfs(string&s, int u ,int k , string tmp){
        if(u==s.size()){
            if(k==4){
                tmp.pop_back();
                res.push_back(tmp);
            }
            return ;
        }

        if(k==4) return ;

        int x=0;
        for(int i=u;i<s.size();++i){
            if(i>u && s[u]=='0') break;
            x=x*10 + s[i]-'0';
            if(x<=255) dfs(s , i+1, k+1, tmp+to_string(x)+'.');
            else break;
        }
    }
};


------------ 0923  / 2021   

class Solution {
public:
    vector<string> res;

    vector<string> restoreIpAddresses(string s) {
        dfs(s, 0, 0, "");
        return res;
    }

    void dfs(string&s , int u ,int k, string tmp){
        if(u==s.size()){
            if(k==4){
                tmp.pop_back();
                res.push_back(tmp);
            }
            return;
        }

        if(k==4) return ;

        int x=0;
        for(int i=u;i<s.size();++i){
            if(i>u && s[u] == '0') break; // i不是第一个，并且su是0
            x= x*10+s[i]-'0';
            if(x<=255) dfs(s, i+1, k+1, tmp+to_string(x)+'.');
            else break;
        }
    }
};


------------------ 1105 / 2021  

class Solution {
public:
    vector<string> res;
    
    vector<string> restoreIpAddresses(string s) {
        dfs(s, 0, 0, "");
        return res;
    }

    void dfs(string& s, int u ,int k, string tmp){
        if(u==s.size()){
            if(k==4){
                tmp.pop_back();
                res.push_back(tmp);
            }
            return ;
        }

        if(k==4) return ;

        int x=0;
        for(int i=u;i<s.size();++i){
            if(s[u]=='0' && i>u) break;
            x=x*10+s[i]-'0';
            if(x<=255) dfs(s, i+1, k+1, tmp+to_string(x)+'.');
            else break;
        }
    }
};

