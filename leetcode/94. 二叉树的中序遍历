94. 二叉树的中序遍历

给定一个二叉树，返回它的中序 遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]

########################


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

 // 递归解法
// class Solution {
// public:
//     vector<int> res;
//     vector<int> inorderTraversal(TreeNode* root) {
//         if(!root) return {};
//         if(root->left) inorderTraversal(root->left);
//         res.push_back(root->val);
//         if(root->right) inorderTraversal(root->right);
//         return res;
//     }
// };

// 迭代解法
//1、不断寻找当前节点的左节点，并将当前节点压入栈中
// 2、到达叶节点后回溯，将根节点存入答案数组中，如果当前节点存在右节点，则进入右节点，重复1

// class Solution
// {
// public:
//     vector<int> res;  //jieguo
//     vector<TreeNode*> st;// 模拟栈
//     vector<int> inorderTraversal(TreeNode* root)
//     {
//         if(!root) return res;
//         st.push_back(root);

//         while(root->left)
//         {
//             root=root->left;
//             st.push_back(root);  //不断压入左节点
//         }

//         while(st.size()>0)  //栈不空 
//         {
//             root=st[st.size()-1];
//             res.push_back(root->val);
//             st.pop_back();
//             if(root->right)
//             {
//                 root=root->right;
//                 st.push_back(root);
//                 while(root->left)
//                 {
//                     root=root->left;
//                     st.push_back(root);
//                 }
//             }
            
//         }
//         return res;
//     }
// };


// 0824 左成云题解 非递归写法

class Solution
{
public:
    vector<int> inorderTraversal(TreeNode* root)
    {
        if(!root) return {};
        vector<int> res;
        stack<TreeNode*> st;
        TreeNode* cur=root;

        while(!st.empty()||cur)
        {
            if(cur)
            {
                st.push(cur);
                cur=cur->left;
            }
            else//直到左子树为空，弹出顶元素，打印，cur指向顶右子树，cur不为空，就压入栈，然后cur指向左子树，。。。继续循环
            {
                auto tmp=st.top();
                //弹出栈顶元素 并打印
                st.pop();
                res.push_back(tmp->val);

                cur=tmp->right;
            }
        }

        return res;
    }
};

----------------- 0117 / 2021  / yxc


class Solution {
public:
    vector<int> res;
    stack<TreeNode*> st;
    vector<int> inorderTraversal(TreeNode* root) {
        if(!root) return res;

        while(root || st.size())
        {
            while(root)
            {
                st.push(root);
                root=root->left;
            }

            root=st.top();
            st.pop();
            res.push_back(root->val);
            root=root->right;
        }

        return res;
    }
};


class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> st;
        auto cur=root;

        while(cur || st.size())
        {
            if(cur)
            {
                st.push(cur);
                cur=cur->left;
            }
            else
            {
                auto tmp=st.top();
                st.pop();
                res.push_back(tmp->val);
                cur=tmp->right;
            }
        }

        return res;
    }
};


------------------------- 0224 / 2021/  

时间On

空间On，最坏链表


class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> s;

        auto cur=root;
        while(s.size() || cur)
        {
            if(cur)
            {
                s.push(cur);
                cur=cur->left;
            }
            else{
                auto t=s.top();
                s.pop();
                res.push_back(t->val);

                cur=t->right;
            }
        }

        return res;
    }
};


---------------------- 0311 / 2021 
 
 class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> st;
        auto cur=root;

        while(st.size() || cur)
        {
            if(cur)
            {
                st.push(cur);
                cur=cur->left;
            }
            else{
                cur=st.top()->right;
                res.push_back(st.top()->val);
                st.pop();
            }
        }

        return res;
    }
};



------------------------------------- 0706 / 2021 

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> st;

        auto cur=root;
        while(st.size() || cur){
            if(cur){
                st.push(cur);
                cur=cur->left;
            }
            else{
                res.push_back(st.top()->val);
                cur=st.top()->right;
                st.pop();
            }
        }

        return res;
    }
};


