给定一个二叉树，确定它是否是一个完全二叉树。

百度百科中对完全二叉树的定义如下：

若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~ 2h 个节点。）

 

示例 1：



输入：[1,2,3,4,5,6]
输出：true
解释：最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。
示例 2：



输入：[1,2,3,4,5,null,7]
输出：false
解释：值为 7 的结点没有尽可能靠向左侧。


#############################  判断是否是完全二叉树 层次遍历


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//0814
//层次遍历后null节点之后必须全部是null节点。否则，就不是完全二叉树。

class Solution 
{
public:
    bool isCompleteTree(TreeNode* root) 
    {
        if(root==NULL) return true;
        queue<TreeNode*> q;
        q.push(root);

        bool flag=false;//节点为空是true，不为空false
        while(!q.empty())
        {
            auto t= q.front();
            q.pop();

            if(t->left)
            {
                if(flag)//判断之前是否出现null过，如果出现就不是完全二叉树
                {
                    return false;
                }
                else
                {
                    q.push(t->left);
                }


                //q.push(t->left);//可以把else 去掉 ，相当于if语句是不是要执行，
                // q.push(t->left)还是要执行的，可以省略else
            }
            else
            {
                flag=true;
            }

            if(t->right)
            {
                if(flag) 
                {
                    return false;
                }
                else
                {
                    q.push(t->right);
                }
                
            }
            else
            {
                flag=true;
            }
        }

        return true;
    }
};


class Solution
{
public:
    bool isCompleteTree(TreeNode* root)
    {
        if(root==NULL) return true;
        bool flag=false;

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode* tmp=q.front();q.pop();

            if(tmp)
            {
                if(flag) return false;
                q.push(tmp->left);
                q.push(tmp->right);
            }
            else
            {
                flag=true;
            }
        }

        return true;
    }
};



