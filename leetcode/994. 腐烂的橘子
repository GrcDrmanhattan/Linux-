994. 腐烂的橘子

在给定的网格中，每个单元格可以有以下三个值之一：

值 0 代表空单元格；
值 1 代表新鲜橘子；
值 2 代表腐烂的橘子。
每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。

返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。

 

示例 1：



输入：[[2,1,1],[1,1,0],[0,1,1]]
输出：4
示例 2：

输入：[[2,1,1],[0,1,1],[1,0,1]]
输出：-1
解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。
示例 3：

输入：[[0,2]]
输出：0
解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。
 

提示：

1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] 仅为 0、1 或 2


----------------------------- 2010 /2021 self

class Solution {
public:
    bool st[15][15];
    int dis[15][15];

    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();

        int dx[]={0, 1, 0, -1};
        int dy[]={1 , 0, -1, 0};

        queue<pair<int ,int>> q;
        int t=0;

        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                if(grid[i][j]==2  && !st[i][j] )  // 加不加st判断都可以
                {
                    q.push({i ,j});
                    st[i][j]=true;
                }else if(grid[i][j]==1 )
                {
                    t++;
                }
            }


        int cnt=0;
        while(q.size())
        {
            auto t=q.front();
            q.pop();
            int x=t.first;
            int y=t.second;

            for(int i=0;i<4;++i)
            {
                int a=x+dx[i];
                int b=y+dy[i];
                if(a>=0 && a<n && b>=0 && b<m && !st[a][b] && dis[a][b]==0 && grid[a][b]==1)
                {
                    st[a][b]=true;
                    dis[a][b]=dis[x][y]+1;
                    q.push({a, b});
                    cnt++;
                }
            }
        }


        int res=0;

        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                res=max(res, dis[i][j]);
            }


        // cout<<t<<"--"<<cnt;
        if(cnt!=t) return -1;
        else return res;
    }
};




------------------- 0829  /2021 

class Solution {
public:
    int dx[4]={0, 1, 0, -1};
    int dy[4]={1, 0, -1, 0};
    bool st[15][15];
    int n,m;
    int dis[15][15];

    int orangesRotting(vector<vector<int>>& grid) {
        n=grid.size();
        m=grid[0].size();

        queue<pair<int, int>> q;
        int cnt=0;
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                if(grid[i][j]==2 && !st[i][j]){
                    q.push({i, j});
                    st[i][j]=true;
                }else if(grid[i][j]==1) cnt++;
            }
        }

        int tmp=0;
        while(q.size()){
            auto t=q.front();
            q.pop();
            int x=t.first;
            int y=t.second;

            for(int i=0;i<4;++i){
                int a=x+dx[i];
                int b=y+dy[i];
                if(a>=0 && a<n && b>=0 && b<m && !st[a][b] && grid[a][b]==1){
                    tmp++;
                    st[a][b]=true;
                    q.push({a, b});
                    dis[a][b]=dis[x][y]+1;
                }
            }
        }

        int res=0;
        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
                res=max(res, dis[i][j]);

        if(tmp != cnt) return -1;
        else return res;

    }
};



