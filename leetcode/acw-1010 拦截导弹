
题目描述
某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。

但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。

某天，雷达捕捉到敌国的导弹来袭。

由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。

输入导弹依次飞来的高度（雷达给出的高度数据是不大于30000的正整数，导弹数不超过1000），
计算这套系统最多能拦截多少导弹？如果要拦截所有导弹最少要配备多少套这种导弹拦截系统？

第一行输出：包含一个整数，表示最多能拦截的导弹数。
第二行输出：包含一个整数，表示要拦截所有导弹最少要配备的系统数。

样例
输入:
389 207 155 300 299 170 158 65

输出：
6
2

解释：
最少可以配2个系统，其中最长的序列长度是6
389 300 299 170 158 65
207 155

------------------------------------------------------

#include<iostream>
#include<algorithm>

using namespace std;

const int N=1010;

int n;
int res;
int a[N];
int f[N],g[N];//g表示已经完成的序列的最后一个数

// 一个序列最少用多少个非上升子序列覆盖整个序列 == 最长上升子序列的方案数

int main()
{
    while(cin>>a[n]) n++;
   
    int res=0;
   
    for(int i=0;i<n;++i)//因为a数组从0开始存数，n初始为0
    {
        f[i]=1;
        for(int j=0;j<i;++j)
        {
           if(a[j]>=a[i]) f[i]=max(f[i],f[j]+1);//最长下降子序列
        }
       
        res=max(res,f[i]);
    }
   
    cout<<res<<endl;
    
    int cnt=0;//当前子序列个数
    
    //贪心从前到后遍历每个数
    
    for(int i=0;i<n;++i)
    {
      int k=0;//每次找的序列
      while(k<cnt && g[k]<a[i]) k++;
      g[k]=a[i];//找到结尾>= a[i],并且最小的序列
       
      if(k>=cnt) cnt++;//开新数组
    }
   
    cout<<cnt<<endl; 
    return 0;
}


----------------------------#####**********************************************

#include<iostream>
#include<algorithm>

using namespace std;

const int N=1010;

int n;

int f[N],g[N];
int a[N];

int main()
{
    while(cin>>a[n]) n++;
    
    int res=0;
    for(int i=0;i<n;++i)
    {
        f[i]=1;
        for(int j=0;j<i;++j)
        {
            if(a[j]>=a[i]) f[i]=max(f[i],f[j]+1);
        }
        
        res=max(res,f[i]);
    }
    cout<<res<<endl;
    
    // 给定一个序列，求至少包含多少个下降子序列数目  等价于   给定一个序列，求至多包含多少个上升子序列数目
    // 第二问：问题转化为求解最长上升子序列的长度
    
    int cnt=0;
    for(int i=0;i<n;++i)
    {
        g[i]=1;
        for(int j=0;j<i;++j)
        {
            if(a[j]<a[i]) g[i]=max(g[i],g[j]+1);
        }
        cnt=max(cnt,g[i]);
    }
    
    cout<<cnt<<endl;
    return 0;
}



