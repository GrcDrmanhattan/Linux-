1076. 迷宫问题
给定一个 n×n 的二维数组，如下所示：

int maze[5][5] = {

0, 1, 0, 0, 0,

0, 1, 0, 1, 0,

0, 0, 0, 0, 0,

0, 1, 1, 1, 0,

0, 0, 0, 1, 0,

};
它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。

数据保证至少存在一条从左上角走到右下角的路径。

输入格式
第一行包含整数 n。
接下来 n 行，每行包含 n 个整数 0 或 1，表示迷宫。

输出格式
输出从左上角到右下角的最短路线，如果答案不唯一，输出任意一条路径均可。

按顺序，每行输出一个路径中经过的单元格的坐标，左上角坐标为 (0,0)，右下角坐标为 (n−1,n−1)。

数据范围
0≤n≤1000

样例
输入样例：
5
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
输出样例：
0 0
1 0
2 0
2 1
2 2
2 3
2 4
3 4
4 4

##################################################################

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;
typedef pair<int,int> PII;
#define x first
#define y second

const int N=1010,M=N*N;

PII q[M];
int n;
int g[N][N];
PII pre[N][N];

int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};

void bfs(int sx,int sy)
{
    int hh=0;
    int tt=0;
    q[0]={sx,sy};
    
    memset(pre,-1,sizeof(pre));//  用pre表示是否遍历过，-1表示未被遍历过
    pre[sx][sy]={9,9};//随便一个值初始,标记被遍历过
    
    while(hh<=tt)
    {
        PII t=q[hh++];
        
        for(int i=0;i<4;++i)
        {
            int a=t.x+dx[i];
            int b=t.y+dy[i];
            
            if(a<0 || a>=n || b<0 || b>=n) continue;
            if(g[a][b]) continue;
            if(pre[a][b].x !=-1) continue;//之前被遍历过
            
            q[++tt]={a,b};
            pre[a][b]=t;//从t走到（a,b）
        }
    }
}

int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;++i)
        for(int j=0;j<n;++j)
            scanf("%d",&g[i][j]);
            
    bfs(n-1,n-1);//从结尾搜索使得每个点的pre存储下一个点，这样从头遍历就是输出的路径
    
    PII end(0,0);//初始为左上角点(0,0)
    
    while(true)
    {
        printf("%d %d\n",end.x,end.y);//输出当前点
        if(end.x==n-1 && end.y==n-1) break;//如果到终点break，否则就等于终点的前一个点
        end=pre[end.x][end.y];
    }
    
    return 0;
}


#########################################################  1107

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

const int N=1010,M=N*N;

typedef pair<int,int> PII;
#define x first
#define y second

int n;
int g[N][N];
bool st[N][N];

PII q[M];

PII pre[N][N];

int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};

void bfs(int x,int y)
{
    int hh=0;int tt=0;
    q[0]={x,y};
    st[x][y]=true;
    
    while(hh<=tt)
    {
        auto t=q[hh++];
        for(int i=0;i<4;++i)
        {
            int a=t.x+dx[i];
            int b=t.y+dy[i];
            
            if(a>=0 && a<n &&b>=0 &&b<n && g[a][b]==0 && !st[a][b])
            {
                st[a][b]=true;
                pre[a][b]=t;
                q[++tt]={a,b};
            }
        }
    }
}

int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;++i)
        for(int j=0;j<n;++j)
            scanf("%d",&g[i][j]);
    
    bfs(n-1,n-1);
    PII end(0,0);
    
    while(1)
    {
        printf("%d %d\n",end.x,end.y);
        if(end.x==n-1 && end.y==n-1) break;
        end=pre[end.x][end.y];
        
    }
    
    return 0;
}



