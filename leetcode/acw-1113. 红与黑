1113. 红与黑
有一间长方形的房子，地上铺了红色、黑色两种颜色的正方形瓷砖。
你站在其中一块黑色的瓷砖上，只能向相邻（上下左右四个方向）的黑色瓷砖移动。
请写一个程序，计算你总共能够到达多少块黑色的瓷砖。

输入格式
输入包括多个数据集合。
每个数据集合的第一行是两个整数 W 和 H，分别表示 x 方向和 y 方向瓷砖的数量。
在接下来的 H 行中，每行包括 W 个字符。每个字符表示一块瓷砖的颜色，规则如下
1）‘.’：黑色的瓷砖；
2）‘#’：白色的瓷砖；
3）‘@’：黑色的瓷砖，并且你站在这块瓷砖上。该字符在每个数据集合中唯一出现一次。
当在一行中读入的是两个零时，表示输入结束。

输出格式
对每个数据集合，分别输出一行，显示你从初始位置出发能到达的瓷砖数(记数时包括初始位置的瓷砖)。

数据范围
1≤W,H≤20

样例
输入样例：
6 9 
....#. 
.....# 
...... 
...... 
...... 
...... 
...... 
#@...# 
.#..#. 
0 0
输出样例：
45

#################################################################. 内部搜索 dfs

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

const int N=25;

int n,m;
char g[N][N];
bool st[N][N];

int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};

int dfs(int x,int y)
{
    st[x][y]=true;
    int cnt=1; // 当前格子可以搜
    
    for(int i=0;i<4;++i)
    {
        int a=x+dx[i];
        int b=y+dy[i];
        
        if(a>=0 && a<n && b>=0 && b<m && g[a][b]=='.' && !st[a][b])
        {
            
            st[a][b]=true;
            cnt+=dfs(a,b); // 加上相邻的格子可以搜的数
        }
    }
    return cnt;
}


int main()
{
    while(cin>>m>>n,n||m)
    {
        for(int i=0;i<n;++i) cin>>g[i];
        
        int x,y;
        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                                 //在内部搜索不用恢复现场，保证每个点只能搜索一次，
                if(g[i][j]=='@') // 把整个棋盘当做整体时，要恢复现场，回溯
                {
                    x=i;
                    y=j;
                }
            }
            
            
        memset(st,0,sizeof(st));
        
        cout<<dfs(x,y)<<endl;
        
    }
    return 0;
}


##############################################################33   1107

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

const int N=25;

int n,m;
char g[N][N];
bool st[N][N];

int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};

int dfs(int x,int y)
{
    int cnt=1;
    st[x][y]=true;
    
    for(int i=0;i<4;++i)
    {
        int a=x+dx[i];
        int b=y+dy[i];
        if(a>=0 && a<n && b>=0 &&b<m &&g[a][b]=='.' && !st[a][b])
        {
            st[a][b]=true;
            cnt+=dfs(a,b);  // cnt 加上递归下一次的结果
        }
    }
    
    return cnt;
}

int main()
{
    while(cin>>m>>n,n||m)
    {
        int x,y;
        
        for(int i=0;i<n;++i)
        {
            for(int j=0;j<m;++j)
            {
                cin>>g[i][j];
                if(g[i][j]=='@')
                {
                    x=i;
                    y=j;
                }
            }
        }
        
        memset(st,0,sizeof(st));
        cout<<dfs(x,y)<<endl;
    }
    
    return 0;
}

--------------------- 0113 /2021 / yxc   BFS


#include<iostream>
#include<queue>

using namespace std;

const int N=25;

typedef pair<int ,int > pii;

#define x first
#define y second

int m,n;

char g[N][N];

int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};

int bfs(int x, int y)
{
    queue<pii> q;
    q.push({x, y});
    g[x][y]='#';
    int res=0;
    
    while(q.size())
    {
        auto t=q.front();
        q.pop();
        res++;
        
        for(int i=0;i<4;++i)
        {
            int a=t.x+dx[i];
            int b=t.y+dy[i];
            
            if(a<0 || a>= n || b< 0 || b>= m || g[a][b] != '.') continue;
            
            g[a][b]='#';
            q.push({a, b});
        }
    }
    
    return res;
}


int main()
{
    while(cin>>m>>n, m||n)
    {
        
        int x ,y;
        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                cin>>g[i][j];
                if(g[i][j]=='@')
                {
                    x=i;
                    y=j;
                }
            }
            
        cout<<bfs(x, y)<<endl;
    }
    
    return 0;
}

---------------------   bfs

#include<iostream>
#include<queue>
#include<cstring>

using namespace std;

const int N=25;

typedef pair<int ,int > pii;

#define x first
#define y second

int m,n;

char g[N][N];
bool st[N][N];

int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};

int bfs(int x, int y)
{
    queue<pii> q;
    q.push({x, y});
    // g[x][y]='#';
    st[x][y]=true;
    int res=0;
    
    while(q.size())
    {
        auto t=q.front();
        q.pop();
        res++;
        
        for(int i=0;i<4;++i)
        {
            int a=t.x+dx[i];
            int b=t.y+dy[i];
            
            if(a<0 || a>= n || b< 0 || b>= m || g[a][b] != '.' || st[a][b]) continue;
            
            // g[a][b]='#';
            st[a][b]=true;
            q.push({a, b});
        }
    }
    
    return res;
}


int main()
{
    while(cin>>m>>n, m||n)
    {
        
        int x ,y;
        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                cin>>g[i][j];
                if(g[i][j]=='@')
                {
                    x=i;
                    y=j;
                }
            }
            
        memset(st, false, sizeof st);
        cout<<bfs(x, y)<<endl;
    }
    
    return 0;
}


-------------------------------  bfs  self

#include<iostream>
#include<queue>
#include<cstring>

using namespace std;

const int N=25;

typedef pair<int ,int > pii;

#define x first
#define y second

int m,n;

char g[N][N];
bool st[N][N];

int dx[]={0,1,0,-1};
int dy[]={1,0,-1,0};

int bfs(int x, int y)
{
    queue<pii> q;
    q.push({x, y});
    // g[x][y]='#';
    st[x][y]=true;
    int res=0;
    
    while(q.size())
    {
        auto t=q.front();
        q.pop();
        res++;
        
        for(int i=0;i<4;++i)
        {
            int a=t.x+dx[i];
            int b=t.y+dy[i];
            
            // if(a<0 || a>= n || b< 0 || b>= m || g[a][b] != '.' || st[a][b]) continue;
            
            // g[a][b]='#';
            
            if(a>=0 && a<n && b>=0 && b<m && !st[a][b] && g[a][b]=='.')
            {
                st[a][b]=true;
                q.push({a, b}); 
            }
            
        }
    }
    
    return res;
}


int main()
{
    while(cin>>m>>n, m||n)
    {
        
        int x ,y;
        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
                cin>>g[i][j];
                if(g[i][j]=='@')
                {
                    x=i;
                    y=j;
                }
            }
            
        memset(st, false, sizeof st);
        cout<<bfs(x, y)<<endl;
    }
    
    return 0;
}

