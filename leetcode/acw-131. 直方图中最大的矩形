131. 直方图中最大的矩形
直方图是由在公共基线处对齐的一系列矩形组成的多边形。

矩形具有相等的宽度，但可以具有不同的高度。

例如，图例左侧显示了由高度为2,1,4,5,1,3,3的矩形组成的直方图，矩形的宽度都为1：

2559_1.jpg

通常，直方图用于表示离散分布，例如，文本中字符的频率。

现在，请你计算在公共基线处对齐的直方图中最大矩形的面积。

图例右图显示了所描绘直方图的最大对齐矩形。

输入格式
输入包含几个测试用例。

每个测试用例占据一行，用以描述一个直方图，并以整数n开始，表示组成直方图的矩形数目。

然后跟随n个整数h1，…，hn。

这些数字以从左到右的顺序表示直方图的各个矩形的高度。

每个矩形的宽度为1。

同行数字用空格隔开。

当输入用例为n=0时，结束输入，且该用例不用考虑。

输出格式
对于每一个测试用例，输出一个整数，代表指定直方图中最大矩形的区域面积。

每个数据占一行。

请注意，此矩形必须在公共基线处对齐。

数据范围
1≤n≤100000,
0≤hi≤1000000000
输入样例：
7 2 1 4 5 1 3 3
4 1000 1000 1000 1000
0
输出样例：
8
4000




---------------------------------------------  0117 / 2021 /yxc




#include<iostream>
#include<algorithm>

using namespace std;

const int N=1e5+10;
typedef long long ll;

int h[N], q[N], l[N], r[N]; // lr数组存储的是坐标

int n;

// 对于数组       2 1 4 5 1 3 3

// 得到的l数组    0 0 2 3 0 5 5 
//实际想要的r数组 2 0 5 5 0 0 0   
//                6 0 3 3 0 0 0 

//  逆序数组    3 3 1 5 4 1 2 
// 得到的r数组  0 0 0 3 3 0 6 ,相对于原数组是以最右边从1开始
// 实际想要的是对于愿数组是从最左边开始的
//             
// 所以对于r数组变换 
// 



void get(int s[])
{
    h[0]=-1; // 设置最左边的边界
    int tt=0;
    
    for(int i=1;i<=n;++i)
    {
        while(h[q[tt]]>= h[i]) tt--; // 最后形成一个单调递增的栈
        s[i]=q[tt];// 栈顶就是 当前最近的最小的坐标
        q[++tt]=i;
    }
}


int main()
{
    while(cin>>n, n) // 逗号表达式
    {
        for(int i=1;i<=n;++i) cin>>h[i];
        
        get(l); // 得到每一个i左边最近最小的l[i] ，最左边坐标是1
        
        reverse(h+1, h+1+n);
      
        get(r); // r得到的是对于逆序后数组中每一个元素左边最小的坐标是多少，也就是原来数组的右边最近的最小的坐标（按照最右边坐标从1开始）
        
        
        ll res=0;
        
        // reverse(r+1, r+n+1);
        
        for(int i=1, j=n;i<=n;++i, --j) // i对应r数组下标 ， j对应l数组下标，因为反转数组，l1变成了ln，l数组要从n开始
        {
            res= max(res, h[i] * ((n+1-l[j])-r[i]-1ll));
        }
        
        cout<<res<<endl;
    }
    
    return 0;
}




