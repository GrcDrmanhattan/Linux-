给定一个大小为n≤106的数组。

有一个大小为k的滑动窗口，它从数组的最左边移动到最右边。

您只能在窗口中看到k个数字。

每次滑动窗口向右移动一个位置。

以下是一个例子：

该数组为[1 3 -1 -3 5 3 6 7]，k为3。

窗口位置	最小值	最大值
[1 3 -1] -3 5 3 6 7	-1	3
1 [3 -1 -3] 5 3 6 7	-3	3
1 3 [-1 -3 5] 3 6 7	-3	5
1 3 -1 [-3 5 3] 6 7	-3	5
1 3 -1 -3 [5 3 6] 7	3	6
1 3 -1 -3 5 [3 6 7]	3	7
您的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。

输入格式
输入包含两行。

第一行包含两个整数n和k，分别代表数组长度和滑动窗口的长度。

第二行有n个整数，代表数组的具体数值。

同行数据之间用空格隔开。

输出格式
输出包含两个。

第一行输出，从左至右，每个位置滑动窗口中的最小值。

第二行输出，从左至右，每个位置滑动窗口中的最大值。

输入样例：
8 3
1 3 -1 -3 5 3 6 7
输出样例：
-1 -3 -3 -3 3 3
3 3 5 5 6 7

###############################################################

#include<iostream>

using namespace std;

const int N=1e6+10;

int q[N];//单调队列,队列里存储的是下标
int a[N];

int n;
int k;

int main()
{
    scanf("%d%d",&n,&k);
    for(int i=0;i<n;++i) scanf("%d",&a[i]);
    
    int hh=0;
    int tt=-1;
    
    for(int i=0;i<n;++i)
    {
        //判断对头是否滑出窗口
        //起点是i，终点是i-k+1
        if(hh<=tt && i-k+1>q[hh]) ++hh;//k < i - q[hh] + 1，维持的窗口大小比k大，队头弹出
        while(hh<=tt && a[q[tt]]>=a[i]) tt--;//队尾元素比新加入的大，删除队尾（坐标--就可以），维持一个单调递增队列
        q[++tt] = i;
        if(i+1>=k) printf("%d ",a[q[hh]]);// 坐标从0开始，如果够k个元素，就输出队列对头元素
    }
    puts("");
    
    
    //求最大值，单调递减队列，最大在队头
    hh=0;
    tt=-1; 
    for(int i=0;i<n;++i)
    {
        if(hh<=tt && i-k+1>q[hh]) ++hh;
        while(hh<=tt && a[q[tt]]<=a[i]) tt--;//维持单调递减队列，最大值在队头
        
        q[++tt]=i;
        if(i+1>=k) printf("%d ",a[q[hh]]);
    }
    puts("");
    
    return 0;
}



#include<iostream>

using namespace std;

const int N=1e6+10;

int n;
int k;

int q[N];
int a[N];

int main()
{
    scanf("%d%d",&n,&k);
    
    for(int i=0;i<n;++i) scanf("%d",&a[i]);
    
    
    //输出最小值,维持单调递增，输出队头元素
    int hh=0;
    int tt=-1;
    
    for(int i=0;i<n;++i)
    {
        if(hh<=tt && i-q[hh]+1>k) ++hh;
        
        while(hh<=tt && a[i]<=a[q[tt]]) --tt;//向左移动，然后好插入a[i]
        q[++tt]=i;
        
        if(i+1>=k) printf("%d ",a[q[hh]]);
    }
    puts("");
    
    //输出最大值，维持单调递减
    hh=0;
    tt=-1;
    
    for(int i=0;i<n;++i)
    {
        if(hh<=tt && i-q[hh]+1>k) ++hh;
        
        while(hh<=tt && a[i]>=a[q[tt]]) --tt;//新插入元素比队尾大，队尾肯定不能作为答案，删除，相当于坐标--，左移动
        
        q[++tt]=i;
        
        if(i+1>=k) printf("%d ",a[q[hh]]);
    }
    puts("");
    
    
    return 0;
}
