18. 重建二叉树
输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。

注意:

二叉树中每个节点的值都互不相同；
输入的前序遍历和中序遍历一定合法；
样例
给定：
前序遍历是：[3, 9, 20, 15, 7]
中序遍历是：[9, 3, 15, 20, 7]

返回：[3, 9, 20, null, null, 15, 7, null, null, null, null]
返回的二叉树如下所示：
    3
   / \
  9  20
    /  \
   15   7
   
   
   
------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* helper(vector<int>& pre,int ps,int pe,vector<int>& ino,int is,int ie)
    {
        if(ps>pe || is>ie) return nullptr;
        TreeNode* root=new TreeNode(pre[ps]);
        int i;
        for( i=0;i<ie;++i)
        {
            if(ino[i]==pre[ps]) break;
        }
        
        int len=i-is;//i-is
        
        root->left = helper(pre,ps+1,ps+len,ino,is,i-1);
        root->right = helper(pre,ps+len+1,pe,ino,i+1,ie);
        
        return root;
    }


    TreeNode* buildTree(vector<int>& pre, vector<int>& ino) {
        if(pre.size()==0 || ino.size()==0) return nullptr;
        return helper(pre,0,pre.size()-1,ino,0,ino.size()-1);
    }
};



