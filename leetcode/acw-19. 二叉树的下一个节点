19. 二叉树的下一个节点
给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。

注意：

如果给定的节点是中序遍历序列的最后一个，则返回空节点;
二叉树一定不为空，且给定的节点一定不是空节点；
样例
假定二叉树是：[2, 1, 3, null, null, null, null]， 给出的是值等于2的节点。

则应返回值等于3的节点。

解释：该二叉树的结构如下，2的后继节点是3。
  2
 / \
1   3


-----------------------------------------   yxc


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode *father;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* inorderSuccessor(TreeNode* p) {
        if(p->right)
        {
            p=p->right;
            while(p->left) p=p->left;//如果有右子树，后继是右子树的最左节点
            return p;
        }
        //如果没有右子树，则向上寻找
        while(p->father && p==p->father->right) p=p->father; // 如果有father或者是father的右儿子， 就一直向上，直到是左儿子或者没有father为止
        return p->father;
    }
};



--------------------------------------------- 0224 / 2021/  


论往上找还是往下找，总共遍历的节点数都不大于树的高度。所以时间复杂度是 O(h)，其中 h是树的高度。




class Solution {
public:
    TreeNode* inorderSuccessor(TreeNode* p) {
        if(p->right){
            p=p->right;
            
            while(p->left) p=p->left;
            
            return p;
        }
        
        while(p->father && p==p->father->right) p=p->father;
        return p->father;
    }
};



