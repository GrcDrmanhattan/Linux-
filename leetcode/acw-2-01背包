有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。

第 i 件物品的体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。

接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。

输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤1000
0<vi,wi≤1000
输入样例
4 5
1 2
2 4
3 4
4 5
输出样例：
8

###########################################################################

#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std ;
const int N=1010;

int n,m;
int v[N];
int w[N];
int f[N][N];//前i个物品，体积不超过j的所有选法的价值最大值

int main()
{
    cin>>n>>m;//n个物品，背包容量m
    
    for(int i=1;i<=n;++i) cin>>v[i]>>w[i];
    
    for(int i=1;i<=n;++i)//i=0时f[0][..]均为0，已经初始化了
        for(int j=0;j<=m;++j)
        {
            f[i][j]=f[i-1][j];
            if(j>=v[i]) f[i][j]=max(f[i][j],f[i-1][j-v[i]]+w[i]);//分为最后一个物品不含i和最后一个含i
        }
    
    printf("%d\n",f[n][m]);
    
    return 0;
}

############################3  一维数组

#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std ;
const int N=1010;

int n,m;
int v[N];
int w[N];
int f[N];//压缩为一维数组

int main()
{
    cin>>n>>m;//n个物品，背包容量m
    
    for(int i=1;i<=n;++i) cin>>v[i]>>w[i];
    
    for(int i=1;i<=n;++i)
        for(int j=m;j>=v[i];--j)//j从大到小才可以保证和二维数组等价变换
        {
    
            f[j]=max(f[j],f[j-v[i]]+w[i]);//j-v[i]<j,j从大到小，所以j-v[i]在j之后计算，现在相当于第i-1层的j-vi和两维数组含义一样
        }
    
    printf("%d\n",f[m]);
    
    return 0;
}



----------------------------------------- 0226  / 2021/  


#include<iostream>
#include<algorithm>

using namespace std;

const int N=1010;

int f[N][N];
int v[N],w[N];
int n,m;

int main()
{
    cin>>n>>m;
    
    for(int i=1;i<=n;++i) cin>>v[i]>>w[i];
    
    for(int i=1;i<=n;++i)
        for(int j=0;j<=m;++j)
        {
            f[i][j] = f[i-1][j];
            if(j>=v[i]) f[i][j]=max( f[i][j] ,f[i-1][j-v[i]] + w[i]);
        }
        
    cout<<f[n][m]<<endl;
    
    return 0;
}


------------------------0226 

fi只会用到fi-1所以考虑滚动数组

#include<iostream>
#include<algorithm>

using namespace std;

const int N=1010;

int f[N];
int v[N],w[N];
int n,m;

int main()
{
    cin>>n>>m;
    
    for(int i=1;i<=n;++i) cin>>v[i]>>w[i];
    
    for(int i=1;i<=n;++i)
        for(int j=m;j>=v[i];--j)
        {
        
            f[j]=max( f[j] ,f[j-v[i]] + w[i]); 
            // 优化后如果从小到大则是j-vi在j之前算过了已经被更新了，就属于i层 的j-vi和原来不同， 改为从大到小优化，j-vi就在j之后算过，还没有被更新， 就属于第i-1层的了
            //f[i][j]=max(f[i][j], f[i-1][j-v[i]] + w[i]) 原来的是i-1层的j-vi
        }
        
    cout<<f[m]<<endl;
    
    return 0;
}


