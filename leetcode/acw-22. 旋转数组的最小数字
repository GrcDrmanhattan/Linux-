22. 旋转数组的最小数字
 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。

输入一个升序的数组的一个旋转，输出旋转数组的最小元素。

例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。

数组可能包含重复项。

注意：数组内所含元素非负，若数组大小为0，请返回-1。

样例
输入：nums=[2,2,2,0,1]

输出：0
#####################################################################  On，二分Ologn，但是删除元素最坏On，所以整体复杂度On

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n=nums.size()-1;
        if(n<0) return -1;
        
        while(n>0 && nums[n]==nums[0]) n--;//去除掉后半部分相同的数，
        //这样可以二分使得分界成两部分，前一部分大于等于num0,后一部分小于num0
        
        if(nums[n]>=nums[0]) return nums[0];//如果后面部分没有，只剩下前一部分输出num0
        
        // *********二 分 *******************
        //二分的前提是：必须要保证每次判断之后，能确定答案在哪一侧
        //二分要找出第一个小于num0的边界,这个边界就是答案
        
        int l=0;
        int r=n;
        
        while(l<r)
        {
            int mid=l+r>>1;
            
            if(nums[mid]<nums[0]) r=mid;//if成立说明mid在右面，又因为边界答案在右面的最左边，所以更新r
            else l=mid+1;
        }
        
        return nums[l];
    }
};

