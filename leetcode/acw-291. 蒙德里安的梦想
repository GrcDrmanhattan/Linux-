291. 蒙德里安的梦想
求把N*M的棋盘分割成若干个1*2的的长方形，有多少种方案。

例如当N=2，M=4时，共有5种方案。当N=2，M=3时，共有3种方案。

如下图所示：

2411_1.jpg

输入格式
输入包含多组测试用例。

每组测试用例占一行，包含两个整数N和M。

当输入用例N=0，M=0时，表示输入终止，且该用例无需处理。

输出格式
每个测试用例输出一个结果，每个结果占一行。

数据范围
1≤N,M≤11

输入样例：
1 2
1 3
1 4
2 2
2 3
2 4
2 11
4 11
0 0
输出样例：
1
0
1
2
3
5
144
51205

#########################################################################

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

const int N=12;
const int M=1<<N;//2^n个状态

int n,m;//行列
long long f[N][M];//f[i][j]说明前i-1列已经摆好，第i-1列伸出到第i列的状态是j
bool st[M];

int main()
{
    while(cin>>n>>m,n||m)
    {
        memset(f,0,sizeof(f));
        
        //预处理j｜k，所有状态（2^11)不存在连续个奇数0
        for(int i=0;i< 1<<n;++i)  //遍历所有的状态
        {
            st[i]=true;//假设成立
            int cnt=0;//当前连续0的个数
            for(int j=0;j<n;++j)//j从0到n-1行，状态的每一位
                if(i>>j & 1)//当前这一位是1
                {
                    if(cnt & 1) st[i]=false;//cnt是奇数
                    cnt=0;
                }
                else cnt++;//为0，cnt++
            
            if(cnt & 1) st[i]=false;
        }
        
        f[0][0]=1;
        for(int i=1;i<=m;++i)//枚举所有列
        {
            for(int j=0;j< 1<<n;++j)//i列的状态
            {
                for(int k=0;k< 1<<n;++k)//i-1列的状态
                {
                    if((j&k)==0 && st[j|k])
                    {
                        f[i][j]+=f[i-1][k];
                    }
                }
            }
        }
        
        cout<<f[m][0]<<endl;
    }
    
    return 0;
}


