35. 反转链表

定义一个函数，输入一个链表的头结点，反转该链表并输出反转后链表的头结点。

思考题：

请同时实现迭代版本和递归版本。
样例
输入:1->2->3->4->5->NULL

输出:5->4->3->2->1->NULL

------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 
//    递归版
 
// class Solution {
// public:
//     ListNode* reverseList(ListNode* head) {
//         if(!head || !head->next ) return head;
//         auto p=reverseList(head->next);
        
//         head->next->next = head;
//         head->next = nullptr;
//         return p;
//     }
// };



//  迭代

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head || !head->next ) return head;
        
        ListNode* pre=nullptr;
        ListNode* cur=head;
        ListNode* nxt=head;
        
        while(cur != nullptr)
        {
            nxt = cur->next; // 缓存cur的next
            cur->next = pre;//将每个指向前驱，反转链表
            pre= cur;
            cur=nxt;
        }
        return pre;
    }
};



