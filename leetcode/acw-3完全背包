有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。

第 i 种物品的体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。

输出格式
输出一个整数，表示最大价值。

数据范围
0<N,V≤1000
0<vi,wi≤1000
输入样例
4 5
1 2
2 4
3 4
4 5
输出样例：
10

###############################################################3333
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;

const int N=1010;

int n,m;
int f[N];
int v[N],w[N];


int main()
{
    cin>>n>>m;
    for(int i=1;i<=n;++i) cin>>v[i]>>w[i];
    //朴素版
    // for(int i=1;i<=n;++i)
    //     for(int j=0;j<=m;++j)
    //         for(int k=0;k*v[i]<=j;++k)//选择k个第i个物品
    //         {
    //             f[i][j]=max(f[i][j],f[i-1][j-k*v[i]] + w[i] * k);
    //         }
    
    //优化版
    // for(int i=1;i<=n;++i)
    //     for(int j=0;j<=m;++j)
    //     {
    //         f[i][j]=f[i-1][j];
    //         if(j>=v[i]) f[i][j]=max(f[i][j],f[i][j-v[i]]+w[i]);
    //     }
        
    
    //  一维数组
    
    for(int i=1;i<=n;++i)
        for(int j=v[i];j<=m;++j)
            f[j]=max(f[j],f[j-v[i]] + w[i]);//  因为j-vi小于j，j从小到大，所以j-vi先计算先到达第i层，相当于i层的j-vi和二维一样
    cout<<f[m]<<endl;
    
    return 0;
}



