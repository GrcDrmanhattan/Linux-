5. 多重背包问题 II

有 N 种物品和一个容量是 V 的背包。

第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。
输出最大价值。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。

接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。

输出格式
输出一个整数，表示最大价值。

数据范围
0<N≤1000
0<V≤2000
0<vi,wi,si≤2000
本题考查多重背包的二进制优化方法。

输入样例
4 5
1 2 3
2 4 1
3 4 3
4 5 2
输出样例：
10

************************************************************************88888

#include<iostream>
#include<algorithm>

using namespace std;

const int N=25000,M=2010;//物品最多1000*log2000（2为底

int n,m;
int v[N];
int w[N];

int f[N];

int main()
{
    cin>>n>>m;//物品数目，背包容量
    
    int cnt=0;
    for(int i=1;i<=n;++i)
    {
        int vv,ww,ss;//当前物品的体积，价值，个数
        cin>>vv>>ww>>ss;
        
        int k=1;
        while(k<=ss)
        {
            cnt++;
            v[cnt]=vv*k;//k个物品打包一起
            w[cnt]=ww*k;
            ss-=k;
            k*=2;
            
        }
        if(ss>0)//一直加到最大的2的k次幂，余下的补上
        {
            cnt++;
            v[cnt]=vv*ss;
            w[cnt]=ww*ss;
        }
    }
    
    n=cnt;
    //************ 01背包 优化
    for(int i=1;i<=n;++i)
        for(int j=m;j>=v[i];--j)
            f[j]=max(f[j],f[j-v[i]] + w[i]);
            
    cout<<f[m]<<endl;
    
    return 0;
}



