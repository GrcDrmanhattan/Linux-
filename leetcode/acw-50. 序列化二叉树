50. 序列化二叉树

请实现两个函数，分别用来序列化和反序列化二叉树。

您需要确保二叉树可以序列化为字符串，并且可以将此字符串反序列化为原始树结构。

样例
你可以序列化如下的二叉树
    8
   / \
  12  2
     / \
    6   4

为："[8, 12, 2, null, null, 6, 4, null, null, null, null]"
注意:

以上的格式是AcWing序列化二叉树的方式，你不必一定按照此格式，所以可以设计出一些新的构造方式。



----------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string res;
        dfs_s(res, root);
        cout<<res<<endl;
        return res;
    }
    
    void dfs_s(string &res,TreeNode* rt)
    {
        if(!rt) 
        {
            res += "null ";
            return ;
        }
        
        res += to_string(rt->val) + ' ';
        dfs_s(res, rt->left);
        dfs_s(res, rt->right);
    }
    

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int u=0;
        return dfs_d(data, u);
        
    }
    
    
    //8 12 null null 2 6 null null 4 null null 
    TreeNode* dfs_d(string data,int &u)
    {
        
        if(u == data.size()) return NULL;
        
        int k=u;
        while(data[k] != ' ') k++; // k前进到空格的位置
        
        if(data[u] == 'n')
        {
            u = k+1;
            return NULL;
        }
        
        
        bool f = false;
        if(data[u] =='-') f = !f,u++;
        
        int val=0;
        for(int i = u;i<k;i++) val = val*10+(data[i]-'0');
        u = k+1; // u前进到空格到下一个位置
        if(f) val *= -1;
        
        
        auto rt = new TreeNode(val);
        rt->left  = dfs_d(data, u);//先取出左子树
        rt->right = dfs_d(data, u); // 后右子树
        return rt;
    }
    
};



