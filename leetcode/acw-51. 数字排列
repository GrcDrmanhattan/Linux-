51. 数字排列

输入一组数字（可能包含重复数字），输出其所有的排列方式。

样例
输入：[1,2,3]

输出：
      [
        [1,2,3],
        [1,3,2],
        [2,1,3],
        [2,3,1],
        [3,1,2],
        [3,2,1]
      ]
      
      
--------------------------------   yxc nb
      
vector<vector<int>> res;
vector<int> tmp;

class Solution {
public:
    vector<vector<int>> permutation(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        tmp.resize(nums.size());
        
        dfs(0, 0, 0 , nums);
        return res;
    }
    
    
    void dfs(int u, int start, int state , vector<int> &nums) // 二进制表示状态 ， start 可以从哪个位置开始放
    {
        int len=nums.size();
        
        if(u == len) {
            res.push_back(tmp);
            return ;
        }
        
        // 如果是第一个数字 或者 和前面的数字不相等 可以随便放位置
        
        if(!u || nums[u] != nums[u-1]) start = 0; // 相等的数字只能放在上一个相等的数字后面，保持相对顺序
        
        for(int i=start;i<len;++i)
        {
            if(!(state>>i&1)) //当前第i位没有被用过
            {
                tmp[i]= nums[u]; // 可以将dfs的数字放到这个位置
                dfs(u+1, i+1, state + (1<<i), nums);
            }
        }
    }
};



      
