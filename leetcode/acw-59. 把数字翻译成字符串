59. 把数字翻译成字符串

给定一个数字，我们按照如下规则把它翻译为字符串：

0翻译成”a”，1翻译成”b”，……，11翻译成”l”，……，25翻译成”z”。

一个数字可能有多个翻译。例如12258有5种不同的翻译，它们分别是”bccfi”、”bwfi”、”bczi”、”mcfi”和”mzi”。

请编程实现一个函数用来计算一个数字有多少种不同的翻译方法。

样例
输入："12258"

输出：5



-----------------------------------  形似斐波那契数列 走一步或者走两步到最后一个台阶


// f[i] 前i位有多少个翻译方式
// 分成两种情况 ，第i位单独翻译一种，加上f[i-1]， 相当于先把第一个作为翻译，结果就等于剩下的n-1个翻译个数f[n-1]
//              第i-1和第i两个作为翻译，加上 f[i-2] ,先把前两个作为整体翻译，也就是剩下的n-2个 ,f[n-2]
// 相加两种情况


class Solution {
public:
    int getTranslationCount(string s) {
        int n=s.size();
        
        vector<int> f(n+1);
        f[0]=1;
        
        for(int i=1;i<=n;++i)
        {
            f[i] = f[i-1];
            
            int t=(s[i-2] - '0')*10 + s[i-1] -'0';
            if(t>=10 && t<= 25) f[i] += f[i-2];
        }
        
        return f[n];
    }
};

