77. 翻转单词顺序

输入一个英文句子，单词之前用一个空格隔开，且句首和句尾没有多余空格。翻转句子中单词的顺序，但单词内字符的顺序不变。

为简单起见，标点符号和普通字母一样处理。

例如输入字符串"I am a student."，则输出"student. a am I"。

样例
输入："I am a student."

输出："student. a am I"


---------------------  1218 

class Solution {
public:
    string reverseWords(string s) {
        vector<string> line;
        string w;
        s=' '+s;
        s+=' ';
        for(auto c:s)
        {
            if(c == ' ')
            {
                line.push_back(w);
                w="";
            }
            else w+=c;
        }
    
        reverse(line.begin(),line.end());
        
        string res;
        for(auto x:line) res+=x + ' ';
        res.erase(res.find_last_not_of(" ") + 1);
        return res;
    }
};

--------------------------------   yxc   经典代码 需要记住

// 先反转整个句子，然后1反转每个单词，操作分解

class Solution {
public:
    string reverseWords(string s) {
        // for(int i=0, j=s.size()-1;i<j;++i,--j) swap(s[j],s[i]); // 先将整个句子反转，
        reverse(s.begin(), s.end());
        
        for(int i=0;i<s.size();++i)
        {
            int j=i;
            while(j<s.size() && s[j] != ' ') j++;// while结束 j指向空格
            
            reverse(s.begin()+i, s.begin() + j); // 左闭右开区间
            
            i=j;// i这里指向空格，然后下一次循环i++
        }
        
        return s;
    }
};


--------------------- 0325 / 2021  


77. 翻转单词顺序

class Solution {
public:
    string reverseWords(string s) {
        reverse(s.begin(), s.end());
        
        for(int i=0;i<s.size();++i)
        {
            int j=i; // j每次都指向单词开始的位置， 然后前进到空格位置
            while(j<s.size() && s[j] != ' ') j++;
            
            reverse(s.begin()+i, s.begin() + j);
            i=j;// 然后i++，又到了单词的开始
        }
        
        return s;
    }
};



