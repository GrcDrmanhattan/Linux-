给定一个长度为n的整数数列，以及一个整数k，请用快速选择算法求出数列的第k小的数是多少。

输入格式

第一行包含两个整数 n 和 k。

第二行包含 n 个整数（所有整数均在1~109
范围内），表示整数数列。

输出格式

输出一个整数，表示数列的第k小数。

数据范围

1≤n≤100000
,
1≤k≤n

输入样例：

5 3
2 4 1 5 3
输出样例：

3
#######################################################################################################################################

#include<iostream>

using namespace std;

const int N=1e6+10;

int n,k;
int q[N];

//快排 nlogn

/*
void quick_sort(int q[],int l,int r)
{
    if(l>=r) return ;
    int i=l-1;
    int j=r+1;
    
    int x=q[l+r>>1];//要先求出x，这样可以避免一些错误
    
    while(i<j)
    {
        do i++;while(q[i]<x);
        do j--;while(q[j]>x);
        if(i<j) swap(q[i],q[j]);
    }
    
    quick_sort(q,l,j);
    quick_sort(q,j+1,r);
    
}

*/

//快速选择算法，时间复杂度On
int quick_sort(int q[],int l,int r,int k)//d递归保证第k小数是在 [l,r],里面的
{
    if(l==r)  return q[l];//只有一个，区间的一个数就是答案返回答案,也可以写l>=r
    
    int i=l-1;
    int j=r+1;
    int x=q[l];
    
    while(i<j)
    {
        while(q[++i]<x);//先++
        while(q[--j]>x);
        if(i<j) swap(q[i],q[j]);
    }
    
    int sl=j-l+1;
    if(k<=sl) return quick_sort(q,l,j,k);//k在左区间
    else return quick_sort(q,j+1,r,k-sl);
    
}

int main()
{
    scanf("%d%d",&n,&k);
    
    for(int i=0;i<n;++i) scanf("%d",&q[i]);
    
    // quick_sort(q,0,n-1);
    
    // printf("%d ",q[k-1]);//快排
    // for(int i=0;i<n;++i) printf("%d ",q[i]);
    
    
    //快速选择 
    cout<<quick_sort(q,0,n-1,k)<<endl;
    
    return 0;
}

