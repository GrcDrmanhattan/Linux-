80. 骰子的点数

将一个骰子投掷n次，获得的总点数为s，s的可能范围为n~6n。

掷出某一点数，可能有多种掷法，例如投掷2次，掷出3点，共有[1,2],[2,1]两种掷法。

请求出投掷n次，掷出n~6n点分别有多少种掷法。

样例1
输入：n=1

输出：[1, 1, 1, 1, 1, 1]

解释：投掷1次，可能出现的点数为1-6，共计6种。每种点数都只有1种掷法。所以输出[1, 1, 1, 1, 1, 1]。
样例2
输入：n=2

输出：[1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]

解释：投掷2次，可能出现的点数为2-12，共计11种。每种点数可能掷法数目分别为1,2,3,4,5,6,5,4,3,2,1。

      所以输出[1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]。
      
-------------------------------- 

// 递归会超时TLE

class Solution {
public:
    vector<int> numberOfDice(int n) {
        vector<int> res;
        for(int i=n;i<=n*6;++i) res.push_back(dfs(n, i));
        return res;
    }
    
    int dfs(int n,int sum)// 投掷n次，总和sum的方案数是多少
    {
        if(sum < 0) return 0;
        if(n == 0 ) return !sum;
        
        int res=0;
        for(int i=1;i<=6;++i) res+=dfs(n-1, sum - i);
        
        return res;
    }
};



----------------------dp

class Solution {
public:
    vector<int> numberOfDice(int n) {
        vector<vector<int>> f(n+1, vector<int>(n*6 + 1));
        
        f[0][0]=1;
        for(int i=1;i<=n;++i) // 前i次数
            for(int j=1;j<= i* 6;++j) // 总和j
                for(int k=1;k<= min(j,6);++k) // 最后一次的点数
                    f[i][j] += f[i-1][j-k];
                    
        vector<int> res;
        for(int i=n;i<=n*6;++i) res.push_back(f[n][i]);
        
        return res;
    }
};




 
