假定有一个无限长的数轴，数轴上每个坐标上的数都是0。

现在，我们首先进行 n 次操作，每次操作将某一位置x上的数加c。

近下来，进行 m 次询问，每个询问包含两个整数l和r，你需要求出在区间[l, r]之间的所有数的和。

输入格式
第一行包含两个整数n和m。

接下来 n 行，每行包含两个整数x和c。

再接下里 m 行，每行包含两个整数l和r。

输出格式
共m行，每行输出一个询问中所求的区间内数字和。

数据范围
−109≤x≤109,
1≤n,m≤105,
−109≤l≤r≤109,
−10000≤c≤10000

样例

输入样例：
3 3
1 2
3 6
7 5
1 3
4 6
7 8
输出样例：
8
0
5

#################################################

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

const int N=300010;
typedef pair<int,int> PII;


int n,m;
int a[N];
int s[N];//前缀和


vector<int> alls;//已经映射好了的元素
vector<PII> add,query;

int find(int x)//返回x离散后的值,将那些分散的数x比如3，5，1000，3000000，这样的映射为从1开始的下标
{
    int l=0;
    int r=alls.size()-1;//需要映射的个数
    
    while(l<r)
    {
        int mid=(l+r) >> 1;
        if(alls[mid]>=x) r=mid;
        else l=mid+1;
    }
    
    return r+1;//将x映射到从1开始的自然数
}

/*
vector<int>::iterator unique(vector<int>&a)
{
    int j=0;
    for(int i=0;i<a.size();++i)
    {
        if(!i || a[i]!=a[i-1])//如果是第一个元素或者不和前一个相等，赋值到前面
        {
            a[j++]=a[i];
        }
    }
    
    //a[0-j-1]是所有a中不重复的数
    
    return a.begin()+j;
}
*
*/

int main()
{
    cin>>n>>m;
    for(int i=0;i<n;++i)
    {
        int x,c;
        cin>>x>>c;
        
        add.push_back({x,c});
        
        alls.push_back(x);
    }
    
    for(int i=0;i<m;++i)
    {
        int l;
        int r;
        
        cin>>l>>r;
        
        query.push_back({l,r});
        
        alls.push_back(l);
        alls.push_back(r);
    }
    
    //  去重复
    sort(alls.begin(),alls.end());
    alls.erase(unique(alls.begin(),alls.end()),alls.end());
    
    //处理插入
    
    for(auto item:add)
    {
        int x=find(item.first);
        a[x]+=item.second;
    }
    
    
    //预处理前缀和
    for(int i=1;i<= alls.size();++i) s[i]=s[i-1]+a[i];//前缀和也是对映射后的下标操作
    
    
    //处理查询
    for(auto item:query)
    {
        int l=find(item.first);
        int r=find(item.second);
        
        cout<<s[r]-s[l-1]<<endl;
    }
    
    return 0;
}
