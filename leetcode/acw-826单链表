实现一个单链表，链表初始为空，支持三种操作：

(1) 向链表头插入一个数；

(2) 删除第k个插入的数后面的数；

(3) 在第k个插入的数后插入一个数

现在要对该链表进行M次操作，进行完所有操作后，从头到尾输出整个链表。

注意:题目中第k个插入的数并不是指当前链表的第k个数。例如操作过程中一共插入了n个数，则按照插入的时间顺序，这n个数依次为：第1个插入的数，第2个插入的数，…第n个插入的数。

输入格式

第一行包含整数M，表示操作次数。

接下来M行，每行包含一个操作命令，操作命令可能为以下几种：

(1) “H x”，表示向链表头插入一个数x。

(2) “D k”，表示删除第k个输入的数后面的数（当k为0时，表示删除头结点）。

(3) “I k x”，表示在第k个输入的数后面插入一个数x（此操作中k均大于0）。

输出格式

共一行，将整个链表从头到尾输出。

数据范围

1≤M≤100000

所有操作保证合法。

输入样例：
10
H 9
I 1 1
D 1
D 0
H 6
I 3 6
I 4 5
I 4 5
I 3 4
D 6
输出样例：

6 4 6 5


##################################

//第k个插入的数:下标是k-1
//操作2：删除下标k-1的后面的节点


#include<iostream>

using namespace std;

const int N=1e5+10;

//head 存储的是头节点的下标,head的值就是第一个节点，head指向的就是第一个点，head标识头节点在哪
//e[i]表示下标是i的节点的值
//ne[i] 表示下标i节点的下一个节点

int head;
int e[N];
int ne[N];
int idx;//当前已经用到的哪个点

void init()
{
    head=-1;
    idx=0;//当前可以从0号点开始分配
    
}

    //在头节点位置插入,也就是将值为x的变为第一个点
void add_to_head(int x)
{
    e[idx]=x;
    
    ne[idx]=head;//ne[idx]指向原来head存的值，也就是将idx作为第一个节点
    head=idx;//然后head存idx，作为新的head，head指向新的节点
    idx++;//可用的idx坐标++
    
}

//将x插入下标是k的点后
void add(int k,int x)
{
    e[idx]=x;
    
    ne[idx]=ne[k];
    ne[k]=idx;
    idx++;
}

//删除下标是k的点后面的节点
void remove(int k)
{
    ne[k]=ne[ne[k]];
}



int main()
{
    
    int m;
    cin>>m;
    
    init();
    
    while(m--)
    {
        int k;
        int x;
        char op;
        
        cin>>op;
        
        if(op=='H')
        {
            cin>>x;
            add_to_head(x);
        }
        else if(op=='D')
        {
            cin>>k;
            if(k==0) head=ne[head];
            //k0，删除头节点相当于head需要指向新的头，因为head的值就是头节点
            //所以head的值存下一个头，head指向原来head后面的节点
            remove(k-1);
            
        }
        else
        {
            cin>>k>>x;
            add(k-1,x);
        }
    }
    
    
    for(int i=head;i!=-1;i=ne[i]) cout<<e[i]<<' ';
    cout<<endl;
    
    return 0;    
}
