给定一个长度为N的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出-1。

输入格式
第一行包含整数N，表示数列长度。

第二行包含N个整数，表示整数数列。

输出格式
共一行，包含N个整数，其中第i个数表示第i个数的左边第一个比它小的数，如果不存在则输出-1。

数据范围
1≤N≤105
1≤数列中元素≤109

样例
输入样例：
5
3 4 2 7 5
输出样例：
-1 3 -1 2 2

###############################################################################################  //数组模拟栈，将元素左边的全部放入栈，通过坐标模拟删除栈

#include<iostream>

using namespace std;

const int N=1e5+10;

int stk[N];//数组模拟栈
int n;
int tt;

int main()
{
    
    scanf("%d",&n);
    
    for(int i=0;i<n;++i) 
    {
        int x;
        cin>>x;
        
        while(tt && stk[tt]>=x) --tt;//当栈顶元素大于插入x，说明x比栈顶元素更小，并且更近，栈顶永远不会用到
        //维持一个单调递增，将逆序的删除
        
        if(tt) cout<<stk[tt]<<' ';
        else cout<<-1<<' ';
        
        stk[++tt] =x;//最后插入栈
        
    }
    
    
    return 0;
}


------------------  0105 /2021 

// 因为要取最小值，所以要在栈插入新元素前，判断栈顶元素是否大于等于要插入的元素
// 如果·是，则不会被用作答案 需要删除


#include<iostream>
#include<algorithm>

using namespace std;

const int N = 1e5+10;


int n;
int a[N];
int st[N];

int tt;

int main()
{
    
    cin>>n;
    for(int i=0;i<n;++i) cin>>a[i];
    
    for(int i=0;i<n;++i)
    {
        while( tt && a[st[tt]] >= a[i]) tt--; // 在向栈里2插入新元素时要判断是否合法,当弹出结束时栈顶元素就是当前元素最近的最小值
        
        if(!tt) cout<<"-1 ";
        else cout<<a[st[tt]]<<' '; // 当弹出结束时栈顶元素就是当前元素最近的最小值
        
        
        st[++tt]=i;
    }
    
    return 0;
}

