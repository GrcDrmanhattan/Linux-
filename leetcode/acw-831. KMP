831. KMP
给定一个模式串S，以及一个模板串P，所有字符串中只包含大小写英文字母以及阿拉伯数字。

模板串P在模式串S中多次作为子串出现。

求出模板串P在模式串S中所有出现的位置的起始下标。

输入格式
第一行输入整数N，表示字符串P的长度。

第二行输入字符串P。

第三行输入整数M，表示字符串S的长度。

第四行输入字符串S。

输出格式
共一行，输出所有出现位置的起始下标（下标从0开始计数），整数之间用空格隔开。

数据范围
1≤N≤1041≤N≤104
1≤M≤1051≤M≤105
样例
样例
3
aba
5
ababa
输出样例：
0 2
样例
1
a
6
abaaaa
输出样例：
0 2 3 4 5
样例
2
aa
6
abaaaa
输出样例：
2 3 4

#######################################################################################3333  KMP
#include<iostream>
#include<algorithm>

using namespace std;
const int N=10010,M=100010;

int n,m;
char p[N];//长度n, p是短的串,p在s中多次出现,
char s[M];//长度m，s是长的串
int ne[N];

int main()
{
    cin>>n>>p+1>>m>>s+1;
    
    //next对于短的字串p求next
    //i从2开始，因为ne[1]=0,从1后退只能到0,ne[i]相当于求前i个字母中前缀和后缀相等的长度是多少
    //j 起到计数作用
    for(int i=2,j=0;i<=n;++i)
    {
        while(j && p[i]!=p[j+1]) j=ne[j];
        if(p[i]==p[j+1]) j++;
        
        ne[i]=j;
    }
    
    //kmp 匹配
    for(int i=1,j=0;i<=m;++i)//i遍历长的s串,j遍历短的p串,j起始位置要比i小一个,
    {
        //每次试图匹配j的下一位置和i是否相等
        while(j && s[i]!=p[j+1]) j=ne[j];//j往后退到ne[j]
        //while结束两种条件，j=0，s[i]==p[j+1]，第二种j可以继续前进
        if(s[i]==p[j+1]) j++;//j往后退，还需要向前走看是否相等，如果可以j++
        
        if(j==n)//j遍历完p串，匹配成功
        {
            //匹配成功
            printf("%d ",i-n);
            j=ne[j];//
        }
    }
    
    return 0;
}



