Trie字符串统计
维护一个字符串集合，支持两种操作：

“I x”向集合中插入一个字符串x；
“Q x”询问一个字符串在集合中出现了多少次。
共有N个操作，输入的字符串总长度不超过 105，字符串仅包含小写英文字母。

输入格式
第一行包含整数N，表示操作数。

接下来N行，每行包含一个操作指令，指令为”I x”或”Q x”中的一种。

输出格式
对于每个询问指令”Q x”，都要输出一个整数作为结果，表示x在集合中出现的次数。

每个结果占一行。

数据范围
1≤N≤2∗104

样例
输入样例：
5
I abc
Q abc
Q ab
I ab
Q ab
输出样例：
1
0
1

#############################################################################################

#include<iostream>

using namespace std;

const int N=1e5+10;

int son[N][26];//每个节点最多有26个孩子
int cnt[N];//以该节点结尾的单词个数
int idx;//下标是0，既是根结点也是空节点,存储当前用到的哪个下标，和单链表idx一样
char str[N];


void insert(char str[])
{
    int p=0;
    for(int i=0;str[i];++i)
    {
        int u=str[i]-'a';//将字母映射到0-25
        if(!son[p][u]) son[p][u]=++idx;//没有节点创建节点，如果有节点则走到儿子节点
        
        p=son[p][u];//p走到单词结尾
        
    }
    
    cnt[p]++;//结尾单词++
}

int query(char str[])
{
    int p=0;
    for(int i=0;str[i];++i)
    {
        int u=str[i]-'a';
        if(!son[p][u]) return 0;
        
        p=son[p][u];
    }
    
    return cnt[p];
}


int main()
{
    int n;
    scanf("%d",&n);
    
    while(n--)
    {
        char op[2];
        scanf("%s%s",op,str);
        if(op[0]=='I') insert(str);
        else printf("%d\n",query(str));
    }
    
    return 0;
}

----------------- 0106 /2021 //

#include<iostream>

using namespace std;

const int N=1e5+10;

int son[N][26], cnt[N], idx;

int n;

char str[N];

void insert(char str[])
{
    int p=0;
    for(int i=0;str[i];i++)
    {
        int u=str[i]-'a';
        
        if(!son[p][u]) son[p][u]=++idx;// 看当前节点是否有寻找的节点，如果没有就坐标++，创建一个
        
        p=son[p][u]; // p指向寻找的节点这里
    }
    
    cnt[p]++;
}


int query(char str[])
{
    int p=0;
    for(int i=0;str[i];++i)
    {
        int u=str[i]-'a';
        
        if(!son[p][u]) return 0;
        
        p=son[p][u];
    }
    
    return cnt[p];
}


int main()
{
    cin>>n;
    
    while(n--)
    {
        char op[2];
        
        cin>>op>>str;
        
        if(op[0]=='I') insert(str);
        else cout<<query(str)<<endl;
    }
    
    return 0;
}


