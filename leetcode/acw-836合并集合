一共有n个数，编号是1~n，最开始每个数各自在一个集合中。

现在要进行m个操作，操作共有两种：

“M a b”，将编号为a和b的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；
“Q a b”，询问编号为a和b的两个数是否在同一个集合中；
输入格式
第一行输入整数n和m。

接下来m行，每行包含一个操作指令，指令为“M a b”或“Q a b”中的一种。

输出格式
对于每个询问指令”Q a b”，都要输出一个结果，如果a和b在同一集合内，则输出“Yes”，否则输出“No”。

每个结果占一行。

数据范围
1≤n,m≤105
输入样例：
4 5
M 1 2
M 3 4
Q 1 2
Q 1 3
Q 3 4
输出样例：
Yes
No
Yes

###################################################### 并查集

#include<iostream>

const int N=1e5+10;

int p[N];//父节点
int n;
int m;

int find(int x)//返回x所在集合的编号，或者祖宗节点，+路径压缩
{
    if(p[x]!=x) p[x]=find(p[x]);//如果当前节点不是根结点，就父节点为祖宗节点
    
    return p[x];//返回
    
}


int main()
{
    scanf("%d%d",&n,&m);
    
    for(int i=0;i<n;++i) p[i]=i;
    
    while(m--)//m个操作
    {
        char op[2];//scanf读入%c会读入空格字符，而scanf读入字符串忽略空格回车，建议读入一个字母用读入字符串%s的形式
        int a,b;
        
        scanf("%s%d%d",&op,&a,&b);
        
        if(op[0]=='M') p[find(a)]=find(b);//让a集合的祖宗节点的父节点指向b集合的祖宗节点，合并ab集合
        else if(find(a)!=find(b)) printf("No \n");//puts("yes")
        else printf("Yes \n");//puts("no")
        
    }
    
    return 0;
}


----------------------------- 0106 /2021 

#include<iostream>

using namespace std;

const int N=1e5+10;

int n,m;

int p[N];

int find(int x)
{
    if(p[x] != x) p[x]=find(p[x]);
    
    return p[x];
}

int main()
{
    cin>>n>>m;
    for(int i=1;i<=n;++i) p[i]=i;
    
    while(m--)
    {
        char op[2];
        int a,b;
        cin>>op>>a>>b;
        
        if(op[0]=='M') p[find(a)] = find(b);
        else 
        {
            if(find(a)==find(b)) cout<<"Yes"<<endl;
            else cout<<"No"<<endl;
        }
    }
    
    return 0;
}

