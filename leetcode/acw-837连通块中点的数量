连通块中点的数量

给定一个包含n个点（编号为1~n）的无向图，初始时图中没有边。

现在要进行m个操作，操作共有三种：

“C a b”，在点a和点b之间连一条边，a和b可能相等；
“Q1 a b”，询问点a和点b是否在同一个连通块中，a和b可能相等；
“Q2 a”，询问点a所在连通块中点的数量；
输入格式
第一行输入整数n和m。

接下来m行，每行包含一个操作指令，指令为“C a b”，“Q1 a b”或“Q2 a”中的一种。

输出格式
对于每个询问指令”Q1 a b”，如果a和b在同一个连通块中，则输出“Yes”，否则输出“No”。

对于每个询问指令“Q2 a”，输出一个整数表示点a所在连通块中点的数量

每个结果占一行。

数据范围
1≤n,m≤105
输入样例：
5 5
C 1 2
Q1 1 2
Q2 1
C 2 5
Q2 5
输出样例：
Yes
2
3


############################################################

#include<iostream>

const int N=1e5+10;

int p[N];//父节点
int n;
int m;
int size[N];//每一个集合里点的数目

int find(int x)//返回x所在集合的编号，或者祖宗节点，+路径压缩
{
    if(p[x]!=x) p[x]=find(p[x]);//如果当前节点不是根结点，就父节点为祖宗节点
    
    return p[x];//返回
}


int main()
{
    scanf("%d%d",&n,&m);
    
    for(int i=0;i<n;++i)
    {
        p[i]=i;//初始化，每个点的父节点为自身
        size[i]=1;//以每个节点i为根的集合里面节点数为1
    }
    
    while(m--)//m个操作
    {
        char op[5];//scanf读入%c会读入空格字符，而scanf读入字符串忽略空格回车，建议读入一个字母用读入字符串%s的形式
        int a,b;
        
        scanf("%s",&op);
        
        if(op[0]=='C')//连接相当于合并两个集合
        {
            scanf("%d%d",&a,&b);
            if(find(a)==find(b)) continue;//已经在一个集合里，就不用相加
            
            size[find(b)]+=size[find(a)];//b集合点数目加上a集合的数目
            p[find(a)]=find(b);//让a集合的祖宗节点的父节点指向b集合的祖宗节点，合并ab集合
        }
        else if(op[1]=='1')//q1,是否在同一个连通块，
        {
            scanf("%d%d",&a,&b);
            if(find(a)==find(b)) puts("Yes");
            else puts("No");
        }
        else//q2查询连通块里面点的数量 
        {
            scanf("%d",&a);
            
            printf("%d\n",size[find(a)]);
        }
        
    }
    
    return 0;
}

--------------------- 0106 /2021 

#include<iostream>

using namespace std;

const int N=1e5+10;

int p[N];
int s[N];

int n,m;


int find(int x)
{
    if(p[x] != x) p[x] =find(p[x]);
    
    return p[x];
}


int main()
{
    cin>>n>>m;
    
    for(int i=1;i<=n;++i) 
    {
        p[i]=i;
        s[i]=1;
    }
    
    while(m--)
    {
        char op[5];
        int a,b;
        
        scanf("%s", &op);
        
      
        
        if(op[0]=='C')
        {
            cin>>a>>b;
            if(find(a)==find(b)) continue;
            
            s[find(b)] += s[find(a)];
            p[find(a)] = find(b);
        }
        else if(op[1]=='1')
        {
            cin>>a>>b;
            
            if(find(a) == find(b)) cout<<"Yes"<<endl;
            else cout<<"No"<<endl;
        }
        else
        {
            cin>>a;
            
            cout<<s[find(a)]<<endl;
        }
    }
    
    
    return 0;
}



