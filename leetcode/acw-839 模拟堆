维护一个集合，初始时集合为空，支持如下几种操作：

“I x”，插入一个数x；
“PM”，输出当前集合中的最小值；
“DM”，删除当前集合中的最小值（数据保证此时的最小值唯一）；
“D k”，删除第k个插入的数；
“C k x”，修改第k个插入的数，将其变为x；
现在要进行N次操作，对于所有第2个操作，输出当前集合的最小值。

输入格式
第一行包含整数N。

接下来N行，每行包含一个操作指令，操作指令为”I x”，”PM”，”DM”，”D k”或”C k x”中的一种。

输出格式
对于每个输出指令“PM”，输出一个结果，表示当前集合中的最小值。

每个结果占一行。

数据范围
1≤N≤105
−109≤x≤109
数据保证合法。

8
I -10
PM
I -10
D 1
C 2 8
I 6
PM
DM

输出样例：
-10
6
###############################################
#include<iostream>
#include<algorithm>
#include<string.h>

using namespace std;

const int N=1e5+10;

int h[N];
//hp ph 互为相反的映射
int hp[N];//堆里的点是第几个插入点，从堆里映射到下标
int ph[N];//第k个插入的数在堆里的下标，在堆里的位置，下标映射到堆里

int sz;

void heap_swap(int x,int y)
{
    swap(ph[hp[x]],ph[hp[y]]);
    swap(hp[x],hp[y]);
    swap(h[x],h[y]);
}

void down(int u)
{
    int t = u;
    if(u*2<sz && h[u*2]<h[t]) t=u*2;
    if(u*2+1<sz && h[u*2+1]<h[t]) t=u*2+1;
    
    if(u!=t)
    {
        heap_swap(u,t);
        down(t);
    }
}


void up(int u)
{
    while(u/2 && h[u/2]>h[u]) 
    {
        heap_swap(u/2,u);
        u/=2;
    }
}



int main()
{
    int n;
    scanf("%d",&n);
    
    int m=0;//当前第几个插入的数
    while(n--)
    {
        char op[10];
        int k;
        int x;
        
        scanf("%s",op);
        
        if(!strcmp(op,"I"))
        {
            scanf("%d",&x);
            sz++;
            m++;
            
            ph[m]=sz;
            hp[sz]=m;
            
            h[sz]=x;
            up(sz);
        }
        else if(!strcmp(op,"PM"))
        {
            printf("%d\n",h[1]);
        }
        else if(!strcmp(op,"DM"))//删除最小值，把最后一个元素换到第一个的位置上
        {
            heap_swap(1,sz);
            sz--;
            down(1);
        }
        else if(!strcmp(op,"D"))//删除第k个插入的数
        {
            scanf("%d",&k);
            
            k=ph[k];//找到第k个数在堆里的下标
            heap_swap(k,sz);
            sz--;
            
            down(k);
            up(k);
        }
        else
        {
            scanf("%d%d",&k,&x);
            
            k=ph[k];
            h[k]=x;
            
            down(k);
            up(k);
        }
    }
    
    return 0;
}


