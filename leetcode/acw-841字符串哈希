给定一个长度为n的字符串，再给定m个询问，每个询问包含四个整数l1,r1,l2,r2，请你判断[l1,r1]和[l2,r2]这两个区间所包含的字符串子串是否完全相同。

字符串中只包含大小写英文字母和数字。

输入格式
第一行包含整数n和m，表示字符串长度和询问次数。

第二行包含一个长度为n的字符串，字符串中只包含大小写英文字母和数字。

接下来m行，每行包含四个整数l1,r1,l2,r2，表示一次询问所涉及的两个区间。

注意，字符串的位置从1开始编号。

输出格式
对于每个询问输出一个结果，如果两个字符串子串完全相同则输出“Yes”，否则输出“No”。

每个结果占一行。

数据范围
1≤n,m≤105

样例
输入样例：
8 3
aabbaabb
1 3 5 7
1 3 6 8
1 2 1 2
输出样例：
Yes
No
Yes


################################################################################

#include<iostream>

using namespace std;

const int N=1e5+10;
const int P=131;//p进制数

typedef unsigned long long ULL;

int n;
int m;
ULL p[N];//预处理p的次幂
ULL h[N];//前n个字符的哈希值
char str[N];

int get(int l,int r)//求[l,r]之间的字符串哈希值，
{
    return h[r]-h[l-1]*p[r-l+1];//p的r-l+1次幂
}

/************
h[l-1]是将l-1作为最低位乘以p零次幂
要将h[l-1] 扩大到 作为h[r] 里面的前缀

或者：

a b c d e f g h i j k l m n

求[h,l]的哈希值

hash[h,l]=h*p4+i*p3+...l*p0

也就是hash[h-1] = hash[g] = hash[a,g] = a*p6+b*p5+.....g*p0

hash[l]=hash[a,l]=a*p11+b*p10+......l*p0

所以hash[h,l]=  hash[l]-hash[g]*p5(5=r-l+1)
             = a*p11+b*p10+......l*p0  -  (a*p6+b*p5+.....g*p0) *p5
             = h*p4+i*p3+...l*p0

*/


int main()
{
    scanf("%d%d%s",&n,&m,str+1);
    
    p[0]=1;//p的零次幂
    
    for(int i=1;i<=n;++i)
    {
        p[i]=p[i-1]*P;//先求出p的次幂方便求值
        h[i]=h[i-1]*P + str[i];//相当于求对应的p进制数是多少,a*p^3+b*p^2+cp^1+dp^0.......
    }
    
    while(m--)
    {
        int l1,r1;
        int l2,r2;
        
        scanf("%d%d%d%d",&l1,&r1,&l2,&r2);
        
        if(get(l1,r1)==get(l2,r2)) puts("yes");
        else puts("no");
    }
        
    return 0;
}

-------------------------- 0110 /2021 /

#include<iostream>

using namespace std;

const int N=1e5+10;
const int P=131;

typedef unsigned long long ull;

ull p[N],h[N];
char s[N];

int n,m;

int get(int l, int r)
{
    return h[r]-h[l-1]*p[r-l+1];
}

int main()
{
    cin>>n>>m>>s+1;

    p[0]=1;

    for(int i=1;i<=n;++i)
    {
        p[i]=p[i-1]*P;
        h[i]=h[i-1]*P + s[i];
    }

    while(m--)
    {
        int l1, r1 ,l2 ,r2;
        cin>>l1>>r1>>l2>>r2;

        if(get(l1, r1) == get(l2, r2)) puts("Yes");
        else puts("No");
    }

    return 0;
}



