842. 排列数字

给定一个整数n，将数字1~n排成一排，将会有很多种排列方法。

现在，请你按照字典序将所有的排列方法输出。

输入格式
共一行，包含一个整数n。

输出格式
按字典序输出所有排列方案，每个方案占一行。

数据范围
1≤n≤7
输入样例：

3
输出样例：
1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1

#########################################################################.  dfs

#include<iostream>

using namespace std;

const int N=10;

int path[N];
bool st[N];

int n;

void dfs(int x)
{
    if(x==n)
    {
        for(int i=0;i<n;++i)
        {
            printf("%d ",path[i]);
        }
        
        puts("");
        return ;
    }
    
    //u<n
    for(int i=1;i<=n;++i)//看看哪个没有用过
    {
        if(!st[i])
        {
            path[x]=i;
            st[i]=true;
            dfs(x+1);
            st[i]=false;
        }
    }
}

int main()
{
    
    cin>>n;
    
    dfs(0);
    
    return 0;
}

----------------------------- 

#include<iostream>

using namespace std;

const int N=10;

int n;
int path[N];
bool st[N];

void dfs(int u)//u 0，1，2 ，当u=3，结束
{
    if(u==n)//因为从0开始，所以表示已经搜索完了
    {
        for(int i=0;i<n;++i) printf("%d ",path[i]);
        puts("");
        return ;
    }
    
    for(int i=1;i<=n;++i)//没有访问完，就遍历所有节点是否没访问的，1-n个点
    {
        if(!st[i])
        {
            path[u]=i;//没有访问过，就把当前层填入这个数字
            st[i]=true;//true表示被访问，被用过
            dfs(u+1);
            st[i]=false;//恢复现场，从递归出来
        }
    }
}

int main()
{
    
    cin>>n;
    
    dfs(0);//从第零个位置初始状态，一个位置都没有填充数，开始看，
    
    return 0;
}

------------------------------ 0114 /2021 /

#include<iostream>

using namespace std;

int a[10];
bool st[10];
int n;

void dfs(int u) // dfs遍历每个需要放数字的位置
{
    if(u==n)
    {
        for(int i=0;i<n;++i) printf("%d ", a[i]);
        puts("");
        return ;
    }
    
    for(int i=1;i<=n;++i)
    {
        if(!st[i])
        {
            a[u]=i;
            st[i]=true;
            dfs(u+1);
            st[i]=false;
        }
    }
}


int main()
{
    cin>>n;
    dfs(0);
    return 0;
}

