846. 树的重心
给定一颗树，树中包含n个结点（编号1~n）和n-1条无向边。

请你找到树的重心，并输出将重心删除后，剩余各个连通块中点数的最大值。

重心定义：重心是指树中的一个结点，如果将这个点删除后，剩余各个连通块中点数的最大值最小，那么这个节点被称为树的重心。

输入格式
第一行包含整数n，表示树的结点数。

接下来n-1行，每行包含两个整数a和b，表示点a和点b之前存在一条边。

输出格式
输出一个整数m，表示重心的所有的子树中最大的子树的结点数目。

数据范围
1≤n≤105

样例
输入样例
9
1 2
1 7
1 4
2 8
2 5
4 3
3 9
4 6
输出样例：
4

#################################3333  就是返回重心对应的最小的最大值

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

const int N=1e5+10;
const int M=N*2;


int n;

int h[N];// 链表头，n个单链表，n个头
int e[M];
int ne[M];
int idx;

bool st[N];//  标记是否搜过

int ans=N;//全局答案

void add(int a,int b)//插入a指向b的边,头插法
{
    e[idx]=b;
    ne[idx]=h[a];
    
    h[a]=idx;
    idx++;
    
}

//********************** dfs 求出把每个点删除后的最大值，最后取所有最大的最小****************

//返回以u为根的子树的点的数量
int dfs(int u)
{
    st[u]=true;//标记被搜过
    
    int sum=1;//每层向上返回的sum,包含本层的节点，从1开始
    int res=0;//删除点后，每个连通块的最大的节点数
    
    for(int i=h[u];i!=-1;i=ne[i])//i为每个的idx，遍历u点向下的所有
    {
        int j=e[i];//获取idx对应的点
        if(!st[j]) 
        {
            int s=dfs(j);//当前子树的大小
            
            res=max(res,s);//当前子树也算一个连通块，取max
            
            sum+=s;//当前子树也是u为跟的一部分，u的节点数目要加上s
        }
           
    }
    
    res=max(res,n-sum);//当把从u点往下的所有连通块遍历完后，再和u点以上的取max
    
    ans=min(ans,res);//取连通块的最小的最大值
    
    return sum;
    
}


int main()
{
    cin>>n;
    
    memset(h,-1,sizeof(h));
    
    for(int i=0;i<n-1;++i)
    {
        int a;
        int b;
        cin>>a>>b;
        
        add(a,b);//邻接表存储图（树）
        add(b,a);
    }
    
    dfs(1);//dfs(n)都可以，1-n个节点，
    //节点编号从1开始，所以dfs从1开始，idx是边的关系
    
    cout<<ans<<endl;
    
    return 0;
}


//*****************************************

#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

const int N=1e5+10;
const int M=N*2;

int n;
//单链表,邻接表
int h[N];
int e[M];
int ne[M];
int idx;

bool st[N];

int ans=N;


void add(int a,int b)//插入a->b
{
    e[idx]=b;
    
    ne[idx]=h[a];
    h[a]=idx;
    
    idx++;
}

int dfs(int x)
{
    int sum=1;//dfs返回的以x为根的树的节点数目
    int tmp=0;//最大连通块的节点数目
    
    st[x]=true;
    
    for(int i=h[x];i!=-1;i=ne[i])
    {
        int j=e[i];// 先取得idx对应的节点是·多少
        
        if(!st[j])
        {
            int s=dfs(j);
            
            tmp=max(tmp,s);
            sum+=s;
        }
    }
    
    tmp=max(tmp,n-sum);//在x下面遍历完，就向上遍历
    
    ans=min(ans,tmp);
    
    return sum;//返回sum
}


int main()
{
    scanf("%d",&n);
    memset(h,-1,sizeof(h));
    
    for(int i=0;i<n-1;++i)//n-1条边
    {
        int a;
        int b;
        cin>>a>>b;
        
        add(a,b);
        add(b,a);
        
    }
    
    dfs(1);
    
    cout<<ans<<endl;
    return 0;
}


*********************************************************************88888  1024

#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

int n;
const int N=1e5+10;

int ne[N],h[N],e[N],idx;
int res=N;

bool st[N];

void add(int a,int b)
{
    e[idx]=b;
    ne[idx]=h[a];
    h[a]=idx;
    idx++;
}

int dfs(int x)//dfs两个作用，返回以x为根的节点数sum，和 计算删除x后每个连通块的最大数tmp并且更新全局res
{
    st[x]=true;
    int sum=1;//dfs返回的值
    int tmp=0;
    
    for(int i=h[x];i!=-1;i=ne[i])
    {
        int j=e[i];
        if(!st[j])
        {
            int t=dfs(j);
            sum+=t;
            
            tmp=max(tmp,t);
        }
    }
    //最后还要和在x点之上的连通块数取一个max
    tmp=max(tmp,n-sum);
    res=min(res,tmp);
    
    return sum;
}

int main()
{
    cin>>n;
    memset(h,-1,sizeof(h));
    
    for(int i=0;i<n-1;++i)//n-1个边
    {
        int a,b;
        cin>>a>>b;
        add(a,b);
        add(b,a);
    }
    
    dfs(1);
    cout<<res<<endl;
    return 0;
    
}

