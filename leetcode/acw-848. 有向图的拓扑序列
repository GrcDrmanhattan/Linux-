848. 有向图的拓扑序列 

给定一个n个点m条边的有向图，图中可能存在重边和自环。

请输出任意一个该有向图的拓扑序列，如果拓扑序列不存在，则输出-1。

若一个由图中所有点构成的序列A满足：对于图中的每条边(x, y)，x在A中都出现在y之前，则称A是该图的一个拓扑序列。

输入格式
第一行包含两个整数n和m

接下来m行，每行包含两个整数x和y，表示点x和点y之间存在一条有向边(x, y)。

输出格式
共一行，如果存在拓扑序列，则输出拓扑序列。

否则输出-1。

数据范围
1≤n,m≤105

样例
输入样例：
3 3
1 2
2 3
1 3
输出样例：
1 2 3

##########################################################

#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

const int N=1e5+10;

int h[N];
int e[N];
int ne[N];
int idx;

int d[N];//入度
int q[N];


int n;
int m;

void add(int a,int b)
{
    e[idx]=b;
    
    ne[idx]=h[a];
    h[a]=idx;
    
    idx++;
}

bool top()
{
    int hh=0;
    int tt=-1;
    
    for(int i=1;i<=n;++i)//点从1开始
    {
        if(d[i]==0)
        {
            q[++tt]=i;
        }
    }
    
    while(hh<=tt)
    {
        int t=q[hh++];//取出队头，hh后移动相当于弹出队头，因为出队是拓扑排序的，又没有删除元素，所以队列里就是拓扑序列
        
        for(int i=h[t];i!=-1;i=ne[i])
        {
            int j=e[i];
            
            d[j]--;
            
            if(d[j]==0) q[++tt]=j;
        }
    }
    
    return tt==n-1;//说明n个点都进入了，是有向无环图，存在拓扑序列·
}


int main()
{
    cin>>n>>m;
    
    memset(h,-1,sizeof(h));
    
    for(int i=0;i<m;++i)
    {
        int a;
        int b;
        add(a,b);
        
        d[b]++;
    }
    
    if(top())
    {
        for(int i=0;i<n;++i)//队列中就是拓扑序列
        {
            printf("%d ",q[i]);
        }
        
        puts("");
    }
    else
    {
        puts("-1");
    }
    
    return 0;
}


