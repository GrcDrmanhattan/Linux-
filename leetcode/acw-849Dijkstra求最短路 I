给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为正值。

请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。

输入格式
第一行包含整数n和m。

接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。

输出格式
输出一个整数，表示1号点到n号点的最短距离。

如果路径不存在，则输出-1。


数据范围
1≤n≤500,
1≤m≤105,
图中涉及边长均不超过10000。

输入样例：
3 3
1 2 2
2 3 1
1 3 4
输出样例：
3

#######################################

#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>

using namespace std;

const int N=510;

int n;
int m;

int g[N][N];//邻接矩阵
int dist[N];//当前最短距离，从1号点走到每个点
bool st[N];//每个点是否确定,是否在确定距离的集合s


int dijkstra()
{
    memset(dist,0x3f,sizeof(dist));
    dist[1]=0;
    
    for(int i=0;i<n;++i)//迭代n次，
    {
        int t=-1;
        
        for(int j=1;j<=n;++j)
        {
            if(!st[j] && (t==-1 || dist[t]>dist[j]))
            {
                t=j;
            }
        }
        
        st[t]=true;
        
        for(int j=1;j<=n;++j)
        {
            dist[j]=min(dist[j],dist[t]+g[t][j]);
        }
    }
    
    if(dist[n]==0x3f3f3f3f) return -1;
    
    return dist[n];
}


int main()
{
    
    scanf("%d%d",&n,&m);
    
    memset(g,0x3f,sizeof(g));
    
    while(m--)
    {
        int a;
        int b;
        int c;
        
        scanf("%d%d%d",&a,&b,&c);
        
        g[a][b]=min(g[a][b],c);
        
    }
    
    int res=dijkstra();
    
    printf("%d\n",res);
    
    return 0;
}


#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

const int N=510;

int n;
int m;

int g[N][N];
int dis[N];//1到每个点到距离
bool st[N];

int dijkstra()//Dijkstra求单源最短路
{
    memset(dis,0x3f,sizeof(dis));//先距离设为无穷，1号点到自身距离为0
    dis[1]=0;
    
    for(int i=0;i<n;++i)//n次循环，只是循环n次，i无意义
    {
        int t=-1;
        
        for(int j=1;j<=n;++j)//看看哪个点不再集合，并且通过该点可以距离更小
        {
            if(!st[j] && (t==-1 || dis[t]>dis[j]))
            {
                t=j;
            }
        }
        
        st[t]=true;//把j加入集合
        
        for(int j=1;j<=n;++j)
        {
            dis[j]=min(dis[j],dis[t]+g[t][j]);//如果经过t到j，距离更小就更新距离
        }
    }
    
    if(dis[n]==0x3f3f3f3f) return -1;// 如果1号到n号的距离为无穷，返回-1
    
    return dis[n];
}

int main()
{
    cin>>n>>m;
    
    memset(g,0x3f,sizeof(g));
    
    
    while(m--)
    {
        int a;
        int b;
        int c;
        
        cin>>a>>b>>c;
        
        g[a][b]=min(g[a][b],c);
    }
    
    cout<< dijkstra()<<endl;
    
    return 0;
}


---------------------------------- 0113 / 2021 / 


// 所有边权值为正数， 自环不影响最短路， 只用处理重边

#include<iostream>
#include<cstring>

using namespace std;

const int N=510;

int g[N][N];// 邻接矩阵
int n,m;

int dis[N];
bool st[N];


int dij()
{
    memset(dis, 0x3f ,sizeof dis);
    dis[1]=0;
    
    for(int i=0;i<n;++i)
    {
        int t=-1;
        for(int j=1;j<=n;++j)
        {
            if(!st[j] && (t==-1 || dis[t] > dis[j])) t=j;
            
        }
        
        st[t]=true;
        
        for(int j=1;j<=n;++j)
        {
            dis[j]=min(dis[j], dis[t] + g[t][j]);
        }
        
    }
    
    if(dis[n]==0x3f3f3f3f) return -1;
    else return dis[n];
    
}


int main() // On^2
{
    cin>>n>>m;
    
    memset(g,0x3f,sizeof(g));
    
    while(m--)
    {
        int a, b ,c;
        cin>>a>>b>>c;
        
        g[a][b]=min(g[a][b], c);
    }
    
    
    memset(st, false ,sizeof(st));
    
    cout<<dij()<<endl;
    return 0;
}





