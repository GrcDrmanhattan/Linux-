Dijkstra求最短路 II

给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为非负值。

请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。

输入格式
第一行包含整数n和m。

接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。

输出格式
输出一个整数，表示1号点到n号点的最短距离。

如果路径不存在，则输出-1。

数据范围
1≤n,m≤1.5×105,
图中涉及边长均不小于0，且不超过10000。

输入样例：
3 3
1 2 2
2 3 1
1 3 4
输出样例：
3

##########################################################  堆优化版本

#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>

using namespace std;

typedef pair<int,int> PII;

const int N=2e5+10;

int n;
int m;

int h[N];//邻接表存储稀疏图
int e[N];
int ne[N];
int w[N];
int idx;


bool st[N];
int dis[N];


void add(int a,int b,int c)
{
    e[idx]=b;//e[坐标]=点
    w[idx]=c;//w[坐标]=c
    
    ne[idx]=h[a];//ne[idx]的下一个坐标是什么坐标
    h[a]=idx;//h[点]=坐标
    idx++;
}

int dijkstra()//堆优化堆Dijkstra
{
    memset(dis,0x3f,sizeof(dis));
    dis[1]=0;
    
    priority_queue<PII,vector<PII>,greater<>> heap;
    heap.push({0,1});
    
    while(heap.size())
    {
        
        auto t=heap.top();
        heap.pop();
        
        int distance=t.first;
        int v=t.second;
        
        if(st[v]) continue;
        
        st[v]=true;
        
        for(int i=h[v];i!=-1;i=ne[i])
        {
            int j=e[i];//j是点，i是坐标
            
            if(dis[j] > distance +w[i])
            {
                dis[j]=distance + w[i];
                heap.push({dis[j],j});
            }
        }
    }
    
    if(dis[n]==0x3f3f3f3f) return -1;
    
    return dis[n];
}

int  main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof(h));
    
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        
        add(a,b,c);
    }
    
    int res=dijkstra();
    
    printf("%d\n",res);
    
    return 0;
}


