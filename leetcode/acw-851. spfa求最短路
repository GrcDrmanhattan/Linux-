851. spfa求最短路
给定一个n个点m条边的有向图，图中可能存在重边和自环， 边权可能为负数。

请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出impossible。

数据保证不存在负权回路。

输入格式
第一行包含整数n和m。

接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。

输出格式
输出一个整数，表示1号点到n号点的最短距离。

如果路径不存在，则输出”impossible”。

数据范围
数据范围
1≤n,m≤105,
图中涉及边长绝对值均不超过10000。

输入样例：
3 3
1 2 5
2 3 -3
1 3 4
输出样例：
2

#######################################################################################################################

#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>
#include<vector>

using namespace std;


const int N=2e5+10;

int n;
int m;

int h[N];//邻接表存储稀疏图
int e[N];
int ne[N];
int w[N];
int idx;


bool st[N];//是否在队列中
int dis[N];


void add(int a,int b,int c)
{
    e[idx]=b;//e[坐标]=点
    w[idx]=c;//w[坐标]=c
    
    ne[idx]=h[a];//ne[idx]的下一个坐标是什么坐标
    h[a]=idx;//h[点]=坐标
    idx++;
}

int spfa()//
{
    memset(dis,0x3f,sizeof(dis));
    dis[1]=0;
    
    queue<int> q;
    q.push(1);
    st[1]=true;
    
    while(q.size())//   队列存放可以更新别人的点
    {
        int t=q.front();
        q.pop();
        
        st[t]=false;
        
        for(int i=h[t];i!=-1;i=ne[i])
        {
            int j=e[i];
            
            if(dis[j] > dis[t] + w[i])
            {
                dis[j]=dis[t] + w[i];
                
                if(!st[j])
                {
                    q.push(j);
                    st[j]=true;
                }
            }
        }
    }
    
    if(dis[n]==0x3f3f3f3f) return -1;
    return dis[n];
}

int  main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof(h));
    
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        
        add(a,b,c);
        
    }
    
    int res=spfa();
    
    if(res==-1) puts("impossible");
    else printf("%d\n",res);
    
    return 0;
}


