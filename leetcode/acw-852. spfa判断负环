852. spfa判断负环 

给定一个n个点m条边的有向图，图中可能存在重边和自环， 边权可能为负数。

请你判断图中是否存在负权回路。

输入格式
第一行包含整数n和m。

接下来m行每行包含三个整数x，y，z，表示点x和点y之间存在一条有向边，边长为z。

输出格式
如果图中存在负权回路，则输出“Yes”，否则输出“No”。

数据范围
1≤n≤20001≤n≤2000
1≤m≤100001≤m≤10000
图中涉及边长绝对值均不超过10000。

输入样例：
3 3
1 2 -1
2 3 4
3 1 -4
输出样例：
Yes

##############################################################################

#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>

using namespace std;

const int N=1e5+10;

int n;
int m;

int h[N];
int w[N];
int e[N];
int ne[N];
int idx;

bool st[N];
int dis[N];
int cnt[N];//到该点的边数

void add(int a,int b,int c)
{
    e[idx]=b;
    w[idx]=c;
    
    ne[idx]=h[a];
    h[a]=idx;
    idx++;
    
}

bool spfa()
{
    queue<int> q;
    for(int i=1;i<=n;++i)//开始把全部点加入，因为负环不一定是从1号点开始
    {
        st[i]=true;
        q.push(i);
    }
    
    
    while(q.size())
    {
        int tmp=q.front();
        q.pop();
        
        st[tmp]=false;
        
        for(int i=h[tmp];i!=-1;i=ne[i])
        {
            int j=e[i];
            
            if(dis[j] > dis[tmp] + w[i])
            {
                dis[j]=dis[tmp]+w[i];
                cnt[j]=cnt[tmp]+1;
                
                if(cnt[j] >= n) return true;//到j的路径上至少n个边，n+1个点，
                    // 但只有n个点，会有重复点，只有更小距离才会又回到一个点，所以存在负环
                if(!st[j])
                {
                    st[j]=true;
                    q.push(j);
                }
            }
        }
    }
    
    return false;
}


int main()
{
    scanf("%d%d",&n,&m);
    memset(h,-1,sizeof(h));
    
    while(m--)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);
    }
    
    
    if(spfa()) puts("yes");
    else puts("no");
    
    return 0;
}



