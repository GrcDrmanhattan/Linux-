861. 二分图的最大匹配

给定一个二分图，其中左半部包含n1个点（编号1~n1），右半部包含n2个点（编号1~n2），二分图共包含m条边。

数据保证任意一条边的两个端点都不可能在同一部分中。

请你求出二分图的最大匹配数。

二分图的匹配：给定一个二分图G，在G的一个子图M中，M的边集{E}中的任意两条边都不依附于同一个顶点，则称M是一个匹配。

二分图的最大匹配：所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数

样例
输入样例：
2 2 4
1 1
1 2
2 1
2 2
输出样例：
2

############################################################################  匈牙利算法
 
#include<iostream>
#include<cstring>
#include<algorithm>

using namespace std;

const int N=510;
const int M=1e5+10;

int n1,n2,m;
int h[N];
int e[M];
int ne[M];
int idx;

int match[N];//右边点对应的点，每个女生和哪个男生一起
bool st[N];//每次不要搜重复的女生

void add(int a,int b)
{
    e[idx]=b;
    
    ne[idx]=h[a];
    h[a]=idx;
    idx++;
}

bool find(int x)
{
    for(int i=h[x];i!=-1;i=ne[x])//枚举所有男生看上的
    {
        int j=e[i];
        if(!st[j])
        {
            st[j]=true;
            
            if(match[j]==0 || find(match[j]))//没有匹配到男生或者可以为匹配的男生寻找下一个女生成功
            {
                match[j]=x;
                return true;
            }
        }
    }
    
    return false;
}

int main()
{
    scanf("%d%d%d",&n1,&n2,&m);
    
    memset(h,-1,sizeof(h));
    
    while(m--)
    {
        int a,b;
        scanf("%d%d",&a,&b);
        add(a,b);
    }
    
    int res=0;
    
    for(int i=1;i<=n1;++i)//枚举左边的每一个男生
    {
        memset(st,false,sizeof(st));
        
        if(find(i)) res++;//如果男生找到成功res++
    }
    
    printf("%d\n",res);
    
    return 0;
}

