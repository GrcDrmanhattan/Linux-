907. 区间覆盖
给定N个闭区间[ai,bi]以及一个线段区间[s,t]，请你选择尽量少的区间，将指定线段区间完全覆盖。

输出最少区间数，如果无法完全覆盖则输出-1。

输入格式
第一行包含两个整数s和t，表示给定线段区间的两个端点。

第二行包含整数N，表示给定区间数。

接下来N行，每行包含两个整数ai,bi，表示一个区间的两个端点。

输出格式
输出一个整数，表示所需最少区间数。

如果无解，则输出-1。

数据范围
1≤N≤105,
−109≤ai≤bi≤109,
−109≤s≤t≤109

输入样例：
1 5
3
-1 3
2 4
3 5

输出样例：
2

#########################################################################  贪心+双指针
  
/*
1 将左端点从小到大排序
2 从前到后枚举每个区间，所有可覆盖的区间（start，end）选择右端点最长的区间，
    然后更新start为右端点的最大值，

*/
#include<iostream>
#include<algorithm>

using namespace std;

const int N=1e5+10;

int n;
int st,ed;

struct R
{
    int l,r;
    bool operator< (const R &w)const
    {
        return l<w.l;
    }
}rr[N];

int main()
{
    scanf("%d%d",&st,&ed);
    scanf("%d",&n);
    
    for(int i=0;i<n;++i)
    {
        int l,r;
        scanf("%d%d",&l,&r);
        rr[i]={l,r};
    }
    
    sort(rr,rr+n);
    
    int res=0;
    bool success=false;
    
    for(int i=0;i<n;++i)
    {
        int j=i;
        int r=-2e9;
        
        while(j<n && rr[j].l<=st)
        {
            r=max(r,rr[j].r);
            j++;
        }
        
        if(r<st)//最大的右端点小于st，说明没有结果
        {
            res=-1;
            break;
        }
        
        res++;
        if(r>=ed)
        {
            success=true;
            break;
        }
        
        st=r;//更新st为最大的右端点
        i=j-1;
    }
    
    if(!success) res=-1;
    
    printf("%d\n",res);
    return 0;    
}

