//大整数减法
//ab为正整数
#inlcude<iostream>
#include <vector>

using namespace std;

//判断是否A>=B
bool cmp(vector<int>&A,vector<int>&B)
{
    if(A.size()!=B.size()) return A.size()>B.size();
    
    for(int i=A.size()-1;i>=0;--i)//从高位开始比较
    {
        if(A[i]!=B[i]) return A[i]>B[i];//找到第一位不相等的，a大就a大，b大就b大
    }

    return true;//A[i]==B[i] 所有都相等true
}

//c=A-B
vector<int> add(vector<int>&A,vector<int>&B)//保证A>=B
{
    vector<int> C;
    
    //从个位开始相减
    for(int i=0,t=0;i<A.size();++i)//a里面的每一位减去b里面的每一位，所以要先剪去上次的借位，然后减b
    {
        t=A[i]-t;//a[i]要先剪去上一位的进位
        if(i<B.size()) t-=B[i];//先判断b[i]是否存在，存在t就减去b[i],减去减数，a[i] - b[i] -t
        C.push_back((t+10)%10);//t>=0:t, t<0:t+10;统一用+10%10表示

        if(t<0) t=1;//t<0,需要借一位
        else t=0; 

    }

    while(C.size()>1 && C.back()==0) C.pop_back();//当位数多于一位时，去除先导0

    return C;
}

int main()
{
    string a,b;
    cin>>a>>b;

    vector<int> A,B;//将大整数ab用vector存储

    for(int i=a.size()-1;i>=0;--i) A.push_back(a[i]-'0');
    for(int i=b.size()-1;i>=0;--i) B.push_back(b[i]-'0');//[6,5,4,3,2,1]

    if(cmp(A,B))
    {
        //A>=B
        auto C=sub(A,B);

        for(int i=C.size()-1;i>=0;--i) printf("%d",C[i]);
    }
    else
    {
        auto C=sub(B,A);
        printf("-");
        for(int i=C.size()-1;i>=0;--i) printf("%d",C[i]);//倒序输出
    }    

    return 0;
}

