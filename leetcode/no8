字符串转换为整数

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 

//解法一

class Solution 
{
public:
    int myAtoi(string str) 
    {
        unsigned long len=str.size();

        if(len==0) return 0;
        int index=0;
        while(index<len)
        {
            //如果不为空跳出循环，进行分类判断
            if(str[index]!=' ') //单引号表示单个字符 里面加空格
            {
                break;
            }
            //为空就继续循环
            index++;
        } 

        if(index==len) return 0;
        //先判断符号位
        int sign=1;
        if(str[index]=='+')
        {
            index++;
        
        }
        else if(str[index]=='-')
        {
            sign=-1;
            index++;
        }

        int res=0;
        while(index<len)
        {
            if(str[index]<'0' || str[index]>'9') break;

            else if(res>INT_MAX/10 || res==INT_MAX/10 && (str[index]-'0')>INT_MAX%10)
            {
                return INT_MAX;
            }
            else if(res<INT_MIN/10 || res == INT_MIN/10 && (str[index]-'0') > -(INT_MIN%10)) //注意
            {
                return INT_MIN;
            }

            res=res*10+sign*(str[index]-'0');
            ++index;

        }

        return res;    
    }
};

//解法2

class Solution {
public:
    int myAtoi(string str) 
    {
        int num = 0; //依据num的类型返回
        istringstream str_1(str);   //格式化分解字符串
        str_1 >> num;
        return num;
    }
};



