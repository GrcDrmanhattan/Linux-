剑指 Offer 07. 重建二叉树

输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。

 

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
 

限制：

0 <= 节点个数 <= 5000

-------------------------- 0213 / 2021 


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int ,int > mp;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0;i<inorder.size();++i) mp[inorder[i]] = i;
        return dfs(preorder, 0, preorder.size()-1 ,inorder, 0 ,inorder.size()-1);
    }

    TreeNode* dfs(vector<int>& preorder , int ps ,int pe, vector<int> & inorder, int is, int ie)
    {
        if(is>ie || ps>pe) return nullptr;
        auto rt=new TreeNode(preorder[ps]);
        int k=mp[preorder[ps]];

        rt->left= dfs(preorder, ps+1, ps+1 + k-1 - is, inorder, is, k-1);
        rt->right = dfs(preorder, ps+1+k-is, pe, inorder, k+1, ie);
        return rt;
    }

};


