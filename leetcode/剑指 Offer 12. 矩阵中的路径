剑指 Offer 12. 矩阵中的路径

请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。
如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

 

示例 1：

输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true
示例 2：

输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false
 

提示：

1 <= board.length <= 200
1 <= board[i].length <= 200

---------------------------------- 0213/  2021  


class Solution {
public:
    
    bool exist(vector<vector<char>>& board, string word) {
        if(board.empty()) return false;
        
        for(int i=0;i<board.size();++i)
            for(int j=0;j<board[0].size();++j)
                if(dfs(board, i ,j ,0, word)) 
                    return true;
        return false;
    }

    bool dfs(vector<vector<char>>& g, int x, int y , int u ,string word)
    {
        if(word[u] != g[x][y]) return false;
        if(u== word.size()-1) return true;

        char c=word[u];
        g[x][y]='*';

        int dx[]={0,1,0,-1};
        int dy[]={1,0,-1,0};
        for(int i=0;i<4;++i)
        {
            int a=x+dx[i];
            int b=y+dy[i];
            if(a>=0 && a<g.size() && b>=0 && b<g[0].size())
                if(dfs(g,  a,b ,u+1, word)) return true;
        }

        g[x][y]=c;
        return false;
    }
};


------------------------------ 0223 / 2021 / 


class Solution {
public:
    int n,m;
    vector<vector<char>> g;

    bool exist(vector<vector<char>>& board, string word) {
        if(board.empty()) return false;
        n=board.size();
        m=board[0].size();
        g=board;

        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
                if(dfs(word, i, j, 0)) return true; // 只要从某一个位置搜索找到路径就返回true

        return false;
    }

    bool dfs(string& word, int x, int y, int u)
    {
        if(g[x][y] != word[u]) return false;
        if(u==word.size()-1) return true;

        bool st[210][210];
        memset(st, 0 ,sizeof st);

        int dx[]={0, 1 ,0, -1};
        int dy[]={1, 0, -1, 0};
        
        char c=word[u];
        g[x][y]='*';

        for(int i=0;i<4;++i){
            int a=x+dx[i];
            int b=y+dy[i];
            if(a>=0 && a<n && b>=0 && b<m && !st[a][b])
            {
                st[a][b]=true;
                if(dfs(word, a , b , u+1)) return true;
            }
        }

        g[x][y]=c;
        return false;
    }
};



------------------------ 0223 / 2021 

不需要判重数组st

class Solution {
public:
    vector<vector<char>> g;
    int n,m;

    bool exist(vector<vector<char>>& board, string word) {
        if(board.empty()) return false;
        g=board;
        n=g.size();
        m=g[0].size();

        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
                if(dfs(word, i ,j ,0) ) return true;

        return false;
    }

    bool dfs(string& word, int x, int y, int u)
    {
        if(word[u] != g[x][y]) return false;
        if(u==word.size()-1) return true;

        int dx[]={0, 1, 0, -1};
        int dy[]={1, 0, -1, 0};

        char c=word[u];
        g[x][y]='*'; // 标记为特殊字符意思是不希望走回头路，再访问同一个位置， 也可以用st数组替代

        for(int i=0;i<4;++i){
            int a=x+dx[i];
            int b=y+dy[i];

            if(a>=0 && a<n && b>=0 && b<m && g[a][b] != '*') {
                
                if(dfs(word ,a, b, u+1)) return true;
            }
        }

        g[x][y]=c;
        return false;
    }
};


