剑指 Offer 26. 树的子结构
输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)

B是A的子结构， 即 A中有出现和B相同的结构和节点值。

例如:
给定的树 A:

     3
    / \
   4   5
  / \
 1   2
给定的树 B：

   4 
  /
 1
返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。

示例 1：

输入：A = [1,2,3], B = [3,1]
输出：false
示例 2：

输入：A = [3,4,5,1,2], B = [4,1]
输出：true
限制：

0 <= 节点个数 <= 10000

##############################################################

//0914

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution 
{
public:
    bool isSubStructure(TreeNode* A, TreeNode* B) 
    {
        bool res=false;

        if(A!=NULL && B!=NULL)
        {
            if(A->val == B->val) res=helper(A,B);//先找到a中是否有某个节点和b的根结点相同，进入helper

            if(!res) res = isSubStructure(A->left,B);//helper出来为假，就看a的左右子树是否和b根相同
            if(!res) res = isSubStructure(A->right,B);
        }

        return res;
    }

    bool helper(TreeNode* a,TreeNode* b)//判断A树的当前a节点的子树是否和b树相同结构
    {
        if(b==NULL) return true;
        if(a==NULL) return false;

        if(a->val != b->val) return false;

        return helper(a->left,b->left) && helper(a->right,b->right);//值相等递归左右子树判断
    }
};


------------------------------ 0216  /2021/  


class Solution {
public:
    bool isSubStructure(TreeNode* A, TreeNode* B) {
        
        if(!A || !B) return false;

        if(check(A, B)) return true;// 先判断以当前节点a为根是否匹配b，可以匹配返回true，否则递归判断

        return isSubStructure(A->left, B) || isSubStructure(A->right, B);
    }

    bool check(TreeNode* p , TreeNode* q)
    {
        if(!q) return true;
        if(!p || p->val != q->val) return false;

        return check(p->left, q->left) && check(p->right, q->right);
    }
};


------------------------------- 0223 / 2021 / 


class Solution {
public:
    bool isSubStructure(TreeNode* A, TreeNode* B) {
        if(!A || !B) return false;

        if(check(A ,B)) return true;

        return isSubStructure(A->left, B) || isSubStructure(A->right, B);
    }

    bool check(TreeNode* p, TreeNode* q)
    {
        if(!q) return true;
        if(!p || p->val != q->val) return false;

        return check(p->left, q->left) && check(p->right, q->right);
    }
};

