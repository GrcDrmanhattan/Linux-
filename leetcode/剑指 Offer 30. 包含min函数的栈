剑指 Offer 30. 包含min函数的栈

定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。

 

示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.min();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.min();   --> 返回 -2.
 

提示：

各函数的调用总次数不超过 20000 次

----------------------------- 0216  /2021/  


单调栈的一种做法 ， 

m最小栈维护存储和原栈相同数目的元素，但是可以优化使得m栈里面少存一些1元素


class MinStack {
public:
    /** initialize your data structure here. */
    stack<int> st, m;

    MinStack() {

    }
    
    void push(int x) {
        st.push(x);

        if(m.size()){
            int t=m.top();
            x=std::min(x, t);
        }
        m.push(x);
    }
    
    void pop() {
        // int t=st.top();
        st.pop();
        m.pop();
    }
    
    int top() {
        return st.top();
    }
    
    int min() {
        return m.top();
    }
};


------------------- 优化一点点，但没有减少空间和时间

class MinStack {
public:
    /** initialize your data structure here. */
    stack<int> s1, m;
    MinStack() {

    }
    
    void push(int x) {
        s1.push(x);
        if(m.empty() || m.top()>= x) m.push(x);
    }
    
    void pop() {
        if(s1.top() == m.top()) m.pop();
        s1.pop();
    }
    
    int top() {
        return s1.top();
    }
    
    int getMin() {
        return m.top();
    }
};




