剑指 Offer 46. 把数字翻译成字符串

给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
 

提示：

0 <= num < 231

---------------------- 0219 / 2021/  ycx 


// f[i] 前i个数字有多少翻译方式
// f[i] = f[i-1]  + f[i-2] 第i位单独翻译，第i和i-1一起翻译

class Solution {
public:
    int translateNum(int num) {
        int n=0;
        string s=to_string(num);
        
        n=s.size();
        
        vector<int> f(n+1);
        f[0]=1;

        for(int i=1;i<=n;++i)
        {
            f[i]=f[i-1];
            if(i>1)
            {
                int t=(s[i-2] -'0')*10+ s[i-1]-'0';
                if(t>=10 && t<=25) f[i] += f[i-2];
            }
        }

        return f[n];
    }
};

