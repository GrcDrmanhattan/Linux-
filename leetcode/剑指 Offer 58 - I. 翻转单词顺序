剑指 Offer 58 - I. 翻转单词顺序

输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串"I am a student. "，则输出"student. a am I"。

 

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

说明：

无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。

-------------------------   1223 


class Solution {
public:
    string reverseWords(string s) {
        string tmp;
       
        s.erase(s.find_last_not_of(" ") + 1); 
        // 找到最后一个不是空格的位置，从下一个位置一直删除到结尾，删除尾后空格

        for(int i=0;i<s.size();++i)
        {
            int j=i;
            while(j<s.size() && s[j]==' ') j++;
            int k=j;
            while(k<s.size() && s[k] != ' ') k++;
            if(s[j] != ' ')
            {
                string t = s.substr(j, k-j+1);// 也就是只加一个空格，将字符串中间的空格减少为一个
                tmp+=t;
            }
            i=k;
        }


        cout<<"---"<<tmp<<"--"<<endl;
        reverse(tmp.begin(), tmp.end());
       
        for(int i=0;i<tmp.size();++i)
        {   
            int j=i;
            while(j<tmp.size() && tmp[j]!=' ') j++;

            reverse(tmp.begin()+i, tmp.begin()+j);
            i=j;
        }
        

        return tmp;
    }
};

