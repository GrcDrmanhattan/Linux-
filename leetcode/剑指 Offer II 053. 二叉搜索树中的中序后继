剑指 Offer II 053. 二叉搜索树中的中序后继

给定一棵二叉搜索树和其中的一个节点 p ，找到该节点在树中的中序后继。如果节点没有中序后继，请返回 null 。

节点 p 的后继是值比 p.val 大的节点中键值最小的节点，即按中序遍历的顺序节点 p 的下一个节点。

 

示例 1：



输入：root = [2,1,3], p = 1
输出：2
解释：这里 1 的中序后继是 2。请注意 p 和返回值都应是 TreeNode 类型。
示例 2：



输入：root = [5,3,6,2,4,null,null,1], p = 6
输出：null
解释：因为给出的节点没有中序后继，所以答案就返回 null 了。
 

提示：

树中节点的数目在范围 [1, 104] 内。
-105 <= Node.val <= 105
树中各节点的值均保证唯一。
 

注意：本题与主站 285 题相同： https://leetcode-cn.com/problems/inorder-successor-in-bst/
----------------- 1104  / 2021   

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/*
从根节点出发没遍历到一个节点，就比较其与节点 p 的值的大小。
若当前节点的值小于等于节点 p 的值，那么节点 p 的下一个节点应该在当前节点的右子树。
若当前节点的值大于节点 p 的值，那么当前节点就有可能是节点 p 的下一个节点。
此时当前节点的值比节点 p 大，但是节点 p 的下一个节点要求是所有大于等于它的值中最小的一个，
因此接下来遍历当前节点的左子树，确定是否能找到值更小但是仍然大于等于节点 p 值的节点。
重复上述过程，直到找到最后一个大于等于节点 p 的值的节点，就是需要的结果。有股二分查找的味道。

*/


时间Oh，树的高度

class Solution {
public:
    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {
        TreeNode* res=nullptr;
        auto cur=root;
        while(cur){
            if(cur->val <= p->val) cur=cur->right;
            else{
                res=cur;
                cur=cur->left;
            }
        }
        return res;
    }
};



