面试题 02.02. 返回倒数第 k 个节点

实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。

注意：本题相对原题稍作改动

示例：

输入： 1->2->3->4->5 和 k = 2
输出： 4
说明：

给定的 k 保证是有效的。

###########################################

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution 
{
public:
    int kthToLast(ListNode* head, int k) 
    {
        if(head==NULL || k==0) return NULL;

        ListNode* fast=head;
        ListNode* slow=head;

        for(int i=0;i<k-1;++i) fast=fast->next;//快指针刚开始在head，循环后，从head开始前进k-1，坐标k-1，距离slowk-1
        
        while(fast->next != NULL) //当fast-next==null,也就是fast在尾节点，此时在坐标n，slow坐标在k-1，他们距离n-k+1
        {
            fast=fast->next;
            slow=slow->next;
        }

        return slow->val;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
// class Solution 
// {
// public:
//     ListNode* getKthFromEnd(ListNode* head, int k) 
//     {
//         if(head==NULL || k==0) return NULL;

//         ListNode* fast=head;
//         ListNode* slow=head;

//         for(int i=0;i<k-1;++i) fast=fast->next;//快指针刚开始在head，循环后，从head开始前进k-1，坐标k-1，距离slowk-1
        
//         while(fast->next != NULL) //当fast-next==null,也就是fast在尾节点，此时在坐标n，slow坐标在k-1，他们距离n-k+1
//         {
//             fast=fast->next;
//             slow=slow->next;
//         }

//         return slow;

//     }
// };


-------------------  1228 /2020 /

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 
class Solution {
public:
    int kthToLast(ListNode* head, int k) {
        int n=0;
        for(auto p=head;p;p=p->next) n++;

        auto p=head;
        for(int i=0;i<n-k;++i) p=p->next;
        return p->val;
    }
};


